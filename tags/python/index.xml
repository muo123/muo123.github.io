<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 雪国流明</title><link>https://muo123.github.io/tags/python/</link><description>Recent content in Python on 雪国流明</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>muo123</copyright><lastBuildDate>Tue, 08 Jul 2025 19:54:52 +0800</lastBuildDate><atom:link href="https://muo123.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Windows 11 上使用 Docker 创建 Python 环境</title><link>https://muo123.github.io/articles/%E5%9C%A8-windows-11-%E4%B8%8A%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-python-%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 08 Jul 2025 19:50:03 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%9C%A8-windows-11-%E4%B8%8A%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-python-%E7%8E%AF%E5%A2%83/</guid><description>&lt;img src="https://muo123.github.io/images/Windows11%E4%BD%BF%E7%94%A8Docker%E5%88%9B%E5%BB%BAPython%E7%8E%AF%E5%A2%83.png" alt="Featured image of post 在 Windows 11 上使用 Docker 创建 Python 环境" />&lt;h1 id="在windows-11上使用docker创建python开发环境">在Windows 11上使用Docker创建Python开发环境
&lt;/h1>&lt;p>使用Docker创建Python开发环境可以确保开发环境的一致性，并避免&amp;quot;在我机器上能运行&amp;quot;的问题。以下是在Windows 11上设置Python开发环境的步骤：&lt;/p>
&lt;h2 id="前提条件">前提条件
&lt;/h2>&lt;ol>
&lt;li>Windows 11系统&lt;/li>
&lt;li>已安装Docker Desktop for Windows&lt;/li>
&lt;li>启用WSL 2（推荐）&lt;/li>
&lt;/ol>
&lt;h2 id="步骤1安装docker-desktop">步骤1：安装Docker Desktop
&lt;/h2>&lt;p>如果尚未安装：&lt;/p>
&lt;ol>
&lt;li>从&lt;a class="link" href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener"
>Docker官网&lt;/a>下载Docker Desktop&lt;/li>
&lt;li>安装并启动Docker Desktop&lt;/li>
&lt;li>确保在设置中启用WSL 2后端（Settings &amp;gt; General &amp;gt; Use WSL 2 based engine）&lt;/li>
&lt;/ol>
&lt;h2 id="步骤2创建项目目录">步骤2：创建项目目录
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>mkdir &lt;span style="color:#ff5c57">python-docker&lt;/span>-project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd python-docker&lt;/span>-project
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤3创建dockerfile">步骤3：创建Dockerfile
&lt;/h2>&lt;p>在项目目录中创建&lt;code>Dockerfile&lt;/code>文件（无扩展名），内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 使用官方Python镜像作为基础&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 设置工作目录&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 复制当前目录内容到容器中的/app目录&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . /app&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 安装项目依赖&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 容器启动时运行的命令&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;your_script.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤4创建requirementstxt">步骤4：创建requirements.txt
&lt;/h2>&lt;p>在同一目录下创建&lt;code>requirements.txt&lt;/code>文件，列出你的Python依赖，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>flask==2.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numpy==1.21.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pandas==1.3.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤5创建docker-composeyml可选但推荐">步骤5：创建docker-compose.yml（可选但推荐）
&lt;/h2>&lt;p>对于更复杂的开发环境，使用docker-compose更方便：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;3.8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">build&lt;/span>: .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;5000:5000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - .:/app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_ENV=development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">command&lt;/span>: python your_script.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤6构建并运行容器">步骤6：构建并运行容器
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 构建镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker build -t &lt;span style="color:#ff5c57">python-dev&lt;/span> .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 运行容器（如果使用docker-compose则运行下面的命令）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -it --rm -p &lt;span style="color:#ff9f43">5000&lt;/span>&lt;span style="color:#ff5c57">:&lt;/span>&lt;span style="color:#ff9f43">5000&lt;/span> -v ${PWD}&lt;span style="color:#ff5c57">:&lt;/span>/app &lt;span style="color:#ff5c57">python-dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 或者使用docker-compose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">docker-compose&lt;/span> up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开发工作流程">开发工作流程
&lt;/h2>&lt;ol>
&lt;li>使用你喜欢的编辑器（如VS Code）编辑本地文件&lt;/li>
&lt;li>更改会自动同步到容器中（因为挂载了卷）&lt;/li>
&lt;li>测试和调试在容器环境中进行&lt;/li>
&lt;/ol>
&lt;h2 id="vs-code集成推荐">VS Code集成（推荐）
&lt;/h2>&lt;ol>
&lt;li>安装&amp;quot;Docker&amp;quot;和&amp;quot;Remote - Containers&amp;quot;扩展&lt;/li>
&lt;li>打开项目文件夹&lt;/li>
&lt;li>按F1，选择&amp;quot;Remote-Containers: Open Folder in Container&amp;quot;&lt;/li>
&lt;li>选择你的Dockerfile或docker-compose.yml&lt;/li>
&lt;/ol>
&lt;h2 id="常用命令">常用命令
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 查看运行中的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#ff5c57">ps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 进入运行中的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker exec -it &amp;lt;&lt;span style="color:#ff5c57">container-id&lt;/span>&amp;gt; bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 停止容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop &amp;lt;&lt;span style="color:#ff5c57">container-id&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 删除所有停止的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker container prune
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 删除未使用的镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker image prune
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="提示">提示
&lt;/h2>&lt;ul>
&lt;li>对于数据科学项目，可以考虑使用&lt;code>python:3.9-slim&lt;/code>或&lt;code>jupyter/datascience-notebook&lt;/code>镜像&lt;/li>
&lt;li>如果需要GUI支持，需要额外配置X11转发&lt;/li>
&lt;li>对于生产环境，使用多阶段构建以减少镜像大小&lt;/li>
&lt;/ul>
&lt;p>这样你就有了一个隔离的、可复制的Python开发环境，可以在任何支持Docker的机器上运行。&lt;/p></description></item></channel></rss>