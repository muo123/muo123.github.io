<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 雪国流明</title><link>https://muo123.github.io/tags/docker/</link><description>Recent content in Docker on 雪国流明</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>muo123</copyright><lastBuildDate>Tue, 08 Jul 2025 19:48:40 +0800</lastBuildDate><atom:link href="https://muo123.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>简单了解 Docker</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-docker/</link><pubDate>Tue, 08 Jul 2025 19:40:54 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-docker/</guid><description>&lt;img src="https://muo123.github.io/images/Docker%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D.jpg" alt="Featured image of post 简单了解 Docker" />&lt;h2 id="什么是docker">什么是Docker？
&lt;/h2>&lt;p>Docker是一个开源的容器化平台，用于开发、部署和运行应用程序。它允许开发者将应用程序及其依赖项打包到一个轻量级、可移植的容器中，然后可以在任何支持Docker的环境中运行。&lt;/p>
&lt;h2 id="docker的核心概念">Docker的核心概念
&lt;/h2>&lt;h3 id="1-容器container">1. 容器(Container)
&lt;/h3>&lt;ul>
&lt;li>轻量级的、可执行的软件包，包含运行应用程序所需的一切：代码、运行时、系统工具、系统库和设置&lt;/li>
&lt;li>与虚拟机不同，容器共享主机系统的内核，不需要单独的操作系统&lt;/li>
&lt;li>提供进程隔离，确保应用程序在不同环境中行为一致&lt;/li>
&lt;/ul>
&lt;h3 id="2-镜像image">2. 镜像(Image)
&lt;/h3>&lt;ul>
&lt;li>容器的模板，包含创建容器所需的指令&lt;/li>
&lt;li>由多层文件系统组成，每一层代表镜像构建过程中的一个指令&lt;/li>
&lt;li>镜像是只读的，当从镜像启动容器时，Docker会在镜像顶部添加一个可写层&lt;/li>
&lt;/ul>
&lt;h3 id="3-dockerfile">3. Dockerfile
&lt;/h3>&lt;ul>
&lt;li>文本文件，包含构建Docker镜像所需的所有命令&lt;/li>
&lt;li>每条指令都会在镜像中创建一个新层&lt;/li>
&lt;li>示例Dockerfile:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> ubuntu:20.04&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> apt-get update &lt;span style="color:#ff6ac1">&amp;amp;&amp;amp;&lt;/span> apt-get install -y python3&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . /app&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python3&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;app.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="4-docker引擎">4. Docker引擎
&lt;/h3>&lt;ul>
&lt;li>Docker的核心组件，包括：
&lt;ul>
&lt;li>Docker守护进程(dockerd)：管理容器、镜像、网络和存储卷&lt;/li>
&lt;li>REST API：与守护进程交互的接口&lt;/li>
&lt;li>Docker CLI：用户与Docker交互的命令行工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="docker的主要优势">Docker的主要优势
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>一致性环境&lt;/strong>：开发、测试和生产环境一致&lt;/li>
&lt;li>&lt;strong>隔离性&lt;/strong>：应用程序在容器中相互隔离&lt;/li>
&lt;li>&lt;strong>轻量级&lt;/strong>：比传统虚拟机更高效，启动更快&lt;/li>
&lt;li>&lt;strong>可移植性&lt;/strong>：一次构建，随处运行&lt;/li>
&lt;li>&lt;strong>微服务友好&lt;/strong>：适合微服务架构部署&lt;/li>
&lt;li>&lt;strong>版本控制和组件重用&lt;/strong>：镜像可以版本化并重用&lt;/li>
&lt;/ol>
&lt;h2 id="docker基本命令">Docker基本命令
&lt;/h2>&lt;h3 id="镜像相关">镜像相关
&lt;/h3>&lt;ul>
&lt;li>&lt;code>docker pull &amp;lt;image&amp;gt;&lt;/code>：从仓库拉取镜像&lt;/li>
&lt;li>&lt;code>docker build -t &amp;lt;name&amp;gt; .&lt;/code>：根据Dockerfile构建镜像&lt;/li>
&lt;li>&lt;code>docker images&lt;/code>：列出本地镜像&lt;/li>
&lt;li>&lt;code>docker rmi &amp;lt;image&amp;gt;&lt;/code>：删除镜像&lt;/li>
&lt;/ul>
&lt;h3 id="容器相关">容器相关
&lt;/h3>&lt;ul>
&lt;li>&lt;code>docker run &amp;lt;image&amp;gt;&lt;/code>：从镜像创建并启动容器&lt;/li>
&lt;li>&lt;code>docker ps&lt;/code>：列出运行中的容器&lt;/li>
&lt;li>&lt;code>docker ps -a&lt;/code>：列出所有容器&lt;/li>
&lt;li>&lt;code>docker stop &amp;lt;container&amp;gt;&lt;/code>：停止容器&lt;/li>
&lt;li>&lt;code>docker start &amp;lt;container&amp;gt;&lt;/code>：启动已停止的容器&lt;/li>
&lt;li>&lt;code>docker rm &amp;lt;container&amp;gt;&lt;/code>：删除容器&lt;/li>
&lt;li>&lt;code>docker exec -it &amp;lt;container&amp;gt; /bin/bash&lt;/code>：进入运行中的容器&lt;/li>
&lt;/ul>
&lt;h3 id="网络相关">网络相关
&lt;/h3>&lt;ul>
&lt;li>&lt;code>docker network ls&lt;/code>：列出网络&lt;/li>
&lt;li>&lt;code>docker network create &amp;lt;name&amp;gt;&lt;/code>：创建网络&lt;/li>
&lt;li>&lt;code>docker network connect &amp;lt;network&amp;gt; &amp;lt;container&amp;gt;&lt;/code>：连接容器到网络&lt;/li>
&lt;/ul>
&lt;h2 id="docker架构">Docker架构
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>客户端-服务器架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Docker客户端与Docker守护进程通信&lt;/li>
&lt;li>守护进程负责构建、运行和分发容器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>主要组件&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Docker客户端(CLI)&lt;/li>
&lt;li>Docker主机(运行守护进程)&lt;/li>
&lt;li>注册表(Docker Hub等)存储镜像&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="docker使用场景">Docker使用场景
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>应用程序打包和部署&lt;/strong>&lt;/li>
&lt;li>&lt;strong>持续集成和持续部署(CI/CD)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>微服务架构&lt;/strong>&lt;/li>
&lt;li>&lt;strong>开发环境标准化&lt;/strong>&lt;/li>
&lt;li>&lt;strong>快速搭建测试环境&lt;/strong>&lt;/li>
&lt;li>&lt;strong>平台即服务(PaaS)部署&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="docker生态系统">Docker生态系统
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Docker Compose&lt;/strong>：用于定义和运行多容器应用程序&lt;/li>
&lt;li>&lt;strong>Docker Swarm&lt;/strong>：Docker原生的集群管理和编排工具&lt;/li>
&lt;li>&lt;strong>Kubernetes&lt;/strong>：流行的容器编排系统(虽然不专属于Docker，但常与Docker一起使用)&lt;/li>
&lt;li>&lt;strong>Docker Hub&lt;/strong>：公共镜像注册表&lt;/li>
&lt;li>&lt;strong>Docker Desktop&lt;/strong>：Mac和Windows上的Docker桌面应用&lt;/li>
&lt;/ul>
&lt;h2 id="docker与传统虚拟机的比较">Docker与传统虚拟机的比较
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>Docker容器&lt;/th>
&lt;th>传统虚拟机&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>启动时间&lt;/td>
&lt;td>秒级&lt;/td>
&lt;td>分钟级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>性能&lt;/td>
&lt;td>接近原生&lt;/td>
&lt;td>有损耗&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>硬盘使用&lt;/td>
&lt;td>一般为MB级&lt;/td>
&lt;td>一般为GB级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>系统支持量&lt;/td>
&lt;td>单机支持上千容器&lt;/td>
&lt;td>一般几十个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>隔离性&lt;/td>
&lt;td>进程级别&lt;/td>
&lt;td>系统级别&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>操作系统&lt;/td>
&lt;td>共享主机OS&lt;/td>
&lt;td>每个VM有独立OS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>Docker通过容器化技术彻底改变了软件开发和部署的方式，提供了轻量级、一致性和可移植性的解决方案。它已成为现代DevOps实践和云原生应用开发的核心工具之一。&lt;/p></description></item></channel></rss>