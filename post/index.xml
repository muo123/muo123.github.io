<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 雪国流明</title><link>https://muo123.github.io/post/</link><description>Recent content in Posts on 雪国流明</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>muo123</copyright><lastBuildDate>Fri, 11 Jul 2025 20:33:18 +0800</lastBuildDate><atom:link href="https://muo123.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>归并排序 C++ 实现</title><link>https://muo123.github.io/articles/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-c-%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 11 Jul 2025 20:28:57 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-c-%E5%AE%9E%E7%8E%B0/</guid><description>&lt;h3 id="归并排序算法详解">归并排序算法详解
&lt;/h3>&lt;p>归并排序（Merge Sort）是一种基于分治策略的排序算法。其基本思想是将一个大问题分解成若干个小问题，分别解决小问题，然后将小问题的解合并起来得到原问题的解。&lt;/p>
&lt;h4 id="定义">&lt;strong>定义&lt;/strong>
&lt;/h4>&lt;p>归并排序（Merge Sort）是一种基于&lt;strong>分治法&lt;/strong>的稳定排序算法：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>时间复杂度&lt;/strong>：O(n log n)（最优、最差和平均情况相同）&lt;/li>
&lt;li>&lt;strong>空间复杂度&lt;/strong>：O(n)（需要额外存储空间）&lt;/li>
&lt;li>&lt;strong>稳定性&lt;/strong>：稳定排序（相等元素的相对位置不变）&lt;/li>
&lt;/ol>
&lt;h4 id="核心思路">&lt;strong>核心思路&lt;/strong>
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>分治策略&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分解&lt;/strong>：将数组递归地分成两半，直到子数组长度为1&lt;/li>
&lt;li>&lt;strong>解决&lt;/strong>：单个元素的数组自然有序&lt;/li>
&lt;li>&lt;strong>合并&lt;/strong>：将两个有序子数组合并成一个有序数组&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合并操作&lt;/strong>（关键步骤）：&lt;/p>
&lt;ul>
&lt;li>使用三个指针分别跟踪：
&lt;ul>
&lt;li>左子数组起始位置&lt;/li>
&lt;li>右子数组起始位置&lt;/li>
&lt;li>临时数组的写入位置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>比较左右子数组元素，将较小者放入临时数组&lt;/li>
&lt;li>将剩余元素直接复制到临时数组末尾&lt;/li>
&lt;li>将排序结果从临时数组复制回原数组&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="代码解释">&lt;strong>代码解释&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">using&lt;/span> &lt;span style="color:#ff6ac1">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#define N 1000010 &lt;/span>&lt;span style="color:#78787e">// 定义最大数组长度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> q[N], tmp[N]; &lt;span style="color:#78787e">// q: 待排序数组, tmp: 临时存储空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">void&lt;/span> &lt;span style="color:#57c7ff">merge_sort&lt;/span>(&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#ff6ac1">*&lt;/span>q, &lt;span style="color:#9aedfe">int&lt;/span> l, &lt;span style="color:#9aedfe">int&lt;/span> r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 递归终止条件：子数组长度 &amp;lt;= 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">if&lt;/span> (l &lt;span style="color:#ff6ac1">&amp;gt;=&lt;/span> r) &lt;span style="color:#ff6ac1">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 分治：计算中点（注意避免溢出）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span> mid &lt;span style="color:#ff6ac1">=&lt;/span> l &lt;span style="color:#ff6ac1">+&lt;/span> r &lt;span style="color:#ff6ac1">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>; &lt;span style="color:#78787e">// 等价于 (l + r) / 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 递归分解
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> merge_sort(q, l, mid); &lt;span style="color:#78787e">// 排序左半部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> merge_sort(q, mid &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>, r); &lt;span style="color:#78787e">// 排序右半部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 合并操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span> i &lt;span style="color:#ff6ac1">=&lt;/span> l; &lt;span style="color:#78787e">// 左子数组起始指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span> j &lt;span style="color:#ff6ac1">=&lt;/span> mid &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>; &lt;span style="color:#78787e">// 右子数组起始指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span> k &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>; &lt;span style="color:#78787e">// 临时数组指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 合并两个有序子数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">while&lt;/span> (i &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> mid &lt;span style="color:#ff6ac1">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 稳定排序的关键：相等时取左子数组元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">if&lt;/span> (q[i] &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> q[j]) tmp[k&lt;span style="color:#ff6ac1">++&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> q[i&lt;span style="color:#ff6ac1">++&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">else&lt;/span> tmp[k&lt;span style="color:#ff6ac1">++&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> q[j&lt;span style="color:#ff6ac1">++&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 处理剩余元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">while&lt;/span> (i &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> mid) tmp[k&lt;span style="color:#ff6ac1">++&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> q[i&lt;span style="color:#ff6ac1">++&lt;/span>]; &lt;span style="color:#78787e">// 左子数组剩余
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">while&lt;/span> (j &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> r) tmp[k&lt;span style="color:#ff6ac1">++&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> q[j&lt;span style="color:#ff6ac1">++&lt;/span>]; &lt;span style="color:#78787e">// 右子数组剩余
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 将排序结果复制回原数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">for&lt;/span> (&lt;span style="color:#9aedfe">int&lt;/span> i &lt;span style="color:#ff6ac1">=&lt;/span> l, j &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>; i &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> r; i&lt;span style="color:#ff6ac1">++&lt;/span>, j&lt;span style="color:#ff6ac1">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q[i] &lt;span style="color:#ff6ac1">=&lt;/span> tmp[j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关键点解析">&lt;strong>关键点解析&lt;/strong>
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>分治实现&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过递归不断将数组二分（&lt;code>l&lt;/code>到&lt;code>mid&lt;/code>和&lt;code>mid+1&lt;/code>到&lt;code>r&lt;/code>）&lt;/li>
&lt;li>当子数组长度为1时终止递归（&lt;code>l &amp;gt;= r&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合并过程&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>双指针比较&lt;/strong>：同时遍历左右子数组，选择较小元素&lt;/li>
&lt;li>&lt;strong>稳定性保证&lt;/strong>：&lt;code>q[i] &amp;lt;= q[j]&lt;/code>确保相等时左侧元素优先&lt;/li>
&lt;li>&lt;strong>剩余元素处理&lt;/strong>：直接复制未遍历完的子数组&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>空间使用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>需要额外O(n)空间的&lt;code>tmp&lt;/code>数组存储中间结果&lt;/li>
&lt;li>结果需复制回原数组&lt;code>q&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="运行样例">&lt;strong>运行样例&lt;/strong>
&lt;/h4>&lt;p>&lt;strong>输入数组&lt;/strong>：&lt;code>[3, 1, 4, 1, 5, 9, 2, 6]&lt;/code>&lt;br>
&lt;strong>排序过程&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>1. 分解：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [3, 1, 4, 1] 和 [5, 9, 2, 6]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> → [3, 1], [4, 1], [5, 9], [2, 6]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> → [3], [1], [4], [1], [5], [9], [2], [6]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. 合并：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [3] &amp;amp; [1] → [1, 3]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [4] &amp;amp; [1] → [1, 4]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [5] &amp;amp; [9] → [5, 9]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [2] &amp;amp; [6] → [2, 6]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> → [1, 3] &amp;amp; [1, 4] → [1, 1, 3, 4]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> → [5, 9] &amp;amp; [2, 6] → [2, 5, 6, 9]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> → [1,1,3,4] &amp;amp; [2,5,6,9] → [1,1,2,3,4,5,6,9]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>最终输出&lt;/strong>：&lt;code>[1, 1, 2, 3, 4, 5, 6, 9]&lt;/code>&lt;/p>
&lt;h4 id="算法特点">&lt;strong>算法特点&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特点&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>稳定性&lt;/strong>&lt;/td>
&lt;td>保持相等元素原始顺序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>时间复杂度&lt;/strong>&lt;/td>
&lt;td>始终O(n log n)，无最坏情况&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>空间占用&lt;/strong>&lt;/td>
&lt;td>需额外O(n)空间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>适用场景&lt;/strong>&lt;/td>
&lt;td>大数据量、需要稳定排序的场景&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;strong>注&lt;/strong>：代码中&lt;code>mid = l + r &amp;gt;&amp;gt; 1&lt;/code>通过位运算优化除法，效果等同于&lt;code>(l + r) / 2&lt;/code>但效率更高。&lt;/p>&lt;/blockquote>
&lt;h3 id="总结">总结
&lt;/h3>&lt;p>归并排序通过分治思想，将问题规模不断缩小，然后合并有序子数组，从而完成整个数组的排序。其时间复杂度稳定为O(n log n)，但需要O(n)的额外空间。该算法适用于各种规模的数据，尤其在链表排序中具有优势（因为链表不需要额外空间进行合并）。&lt;/p></description></item><item><title>WPS JS宏功能以及使用指南</title><link>https://muo123.github.io/articles/wps-js%E5%AE%8F%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 11 Jul 2025 20:24:56 +0800</pubDate><guid>https://muo123.github.io/articles/wps-js%E5%AE%8F%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description>&lt;img src="https://muo123.github.io/images/WPS-JS%E5%AE%8F%E5%8A%9F%E8%83%BD.png" alt="Featured image of post WPS JS宏功能以及使用指南" />&lt;h1 id="wps-js宏详细说明及常用表格函数介绍">WPS JS宏详细说明及常用表格函数介绍
&lt;/h1>&lt;h2 id="一wps-js宏概述">一、WPS JS宏概述
&lt;/h2>&lt;p>WPS JS宏是基于JavaScript语言的自动化脚本功能，允许用户在WPS Office（文字、表格、演示）中创建自定义功能，实现办公自动化。与传统的VBA宏不同，JS宏使用更现代的JavaScript语法，具有更好的跨平台兼容性。&lt;/p>
&lt;h3 id="js宏的特点">JS宏的特点：
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>基于JavaScript&lt;/strong>：使用标准的ES5/ES6语法&lt;/li>
&lt;li>&lt;strong>跨平台&lt;/strong>：在Windows、Linux和Mac上都能运行&lt;/li>
&lt;li>&lt;strong>安全性高&lt;/strong>：运行在沙箱环境中，不会直接访问系统资源&lt;/li>
&lt;li>&lt;strong>易于分享&lt;/strong>：宏代码随文档保存，便于共享&lt;/li>
&lt;/ol>
&lt;h2 id="二js宏基础使用">二、JS宏基础使用
&lt;/h2>&lt;h3 id="1-启用js宏">1. 启用JS宏
&lt;/h3>&lt;p>在WPS Office中：&lt;/p>
&lt;ul>
&lt;li>点击&amp;quot;开发工具&amp;quot;选项卡&lt;/li>
&lt;li>选择&amp;quot;JS宏&amp;quot;按钮&lt;/li>
&lt;li>在弹出的编辑器中编写代码&lt;/li>
&lt;/ul>
&lt;h3 id="2-基本结构">2. 基本结构
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">function&lt;/span> MyMacro() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 获取当前活动工作表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff5c57">let&lt;/span> sheet &lt;span style="color:#ff6ac1">=&lt;/span> Application.ActiveSheet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 在这里编写你的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Hello WPS JS宏!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="三常用表格函数">三、常用表格函数
&lt;/h2>&lt;h3 id="1-工作簿和工作表操作">1. 工作簿和工作表操作
&lt;/h3>&lt;h4 id="获取活动工作簿和工作表">获取活动工作簿和工作表
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> workbook &lt;span style="color:#ff6ac1">=&lt;/span> Application.ActiveWorkbook;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> sheet &lt;span style="color:#ff6ac1">=&lt;/span> Application.ActiveSheet;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建工作表">创建工作表
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> newSheet &lt;span style="color:#ff6ac1">=&lt;/span> workbook.Worksheets.Add();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>newSheet.Name &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;新工作表&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="删除工作表">删除工作表
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>workbook.Worksheets.Item(&lt;span style="color:#5af78e">&amp;#34;Sheet1&amp;#34;&lt;/span>).Delete();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-单元格操作">2. 单元格操作
&lt;/h3>&lt;h4 id="获取和设置单元格值">获取和设置单元格值
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// 获取A1单元格的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff5c57">let&lt;/span> value &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1&amp;#34;&lt;/span>).Value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// 设置A1单元格的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;新值&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// 设置多个单元格
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:B10&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;批量填充&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="单元格格式设置">单元格格式设置
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> range &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:D1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>range.Font.Bold &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">true&lt;/span>; &lt;span style="color:#78787e">// 加粗
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>range.Font.Color &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;#FF0000&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 红色
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>range.Interior.Color &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;#FFFF00&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 背景黄色
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>range.HorizontalAlignment &lt;span style="color:#ff6ac1">=&lt;/span> xlCenter; &lt;span style="color:#78787e">// 居中
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-常用数据处理函数">3. 常用数据处理函数
&lt;/h3>&lt;h4 id="查找数据">查找数据
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> searchRange &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:A100&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> found &lt;span style="color:#ff6ac1">=&lt;/span> searchRange.Find(&lt;span style="color:#5af78e">&amp;#34;查找内容&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">if&lt;/span> (found) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#5af78e">&amp;#34;找到在：&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">+&lt;/span> found.Address());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="排序">排序
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> sortRange &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:C100&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sortRange.Sort(sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1&amp;#34;&lt;/span>), xlAscending);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="筛选">筛选
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:D100&amp;#34;&lt;/span>).AutoFilter(&lt;span style="color:#ff9f43">1&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;条件值&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-公式和函数">4. 公式和函数
&lt;/h3>&lt;h4 id="插入公式">插入公式
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;C1&amp;#34;&lt;/span>).Formula &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;=A1+B1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用内置函数">常用内置函数
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// SUM函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;D1&amp;#34;&lt;/span>).Formula &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;=SUM(A1:C1)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// VLOOKUP函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;E1&amp;#34;&lt;/span>).Formula &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;=VLOOKUP(D1,A1:B100,2,FALSE)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// IF函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>sheet.Range(&lt;span style="color:#5af78e">&amp;#34;F1&amp;#34;&lt;/span>).Formula &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;=IF(A1&amp;gt;100,\&amp;#34;高\&amp;#34;,\&amp;#34;低\&amp;#34;)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-数据验证">5. 数据验证
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">let&lt;/span> validationRange &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;G1:G10&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>validationRange.Validation.Add(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xlValidateList, &lt;span style="color:#78787e">// 验证类型：列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> xlValidAlertStop, &lt;span style="color:#78787e">// 警告样式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> xlBetween, &lt;span style="color:#78787e">// 运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#5af78e">&amp;#34;选项1,选项2,选项3&amp;#34;&lt;/span> &lt;span style="color:#78787e">// 列表值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="四实用示例">四、实用示例
&lt;/h2>&lt;h3 id="1-批量填充序号">1. 批量填充序号
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">function&lt;/span> fillSerialNumbers() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> sheet &lt;span style="color:#ff6ac1">=&lt;/span> Application.ActiveSheet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> lastRow &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">+&lt;/span> sheet.Rows.Count).End(xlUp).Row;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> (&lt;span style="color:#ff5c57">let&lt;/span> i &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>; i &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> lastRow; i&lt;span style="color:#ff6ac1">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">+&lt;/span> i).Value &lt;span style="color:#ff6ac1">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-数据汇总">2. 数据汇总
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">function&lt;/span> summarizeData() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> sheet &lt;span style="color:#ff6ac1">=&lt;/span> Application.ActiveSheet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> dataRange &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:B100&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> sum &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> (&lt;span style="color:#ff5c57">let&lt;/span> i &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>; i &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> dataRange.Rows.Count; i&lt;span style="color:#ff6ac1">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#ff6ac1">+=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;B&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">+&lt;/span> i).Value &lt;span style="color:#ff6ac1">||&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;C1&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;总计&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;D1&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-创建表格">3. 创建表格
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">function&lt;/span> createTable() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> sheet &lt;span style="color:#ff6ac1">=&lt;/span> Application.ActiveSheet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 添加表头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:D1&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> [[&lt;span style="color:#5af78e">&amp;#34;姓名&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;年龄&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;部门&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;工资&amp;#34;&lt;/span>]];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 添加数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff5c57">let&lt;/span> data &lt;span style="color:#ff6ac1">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#5af78e">&amp;#34;张三&amp;#34;&lt;/span>, &lt;span style="color:#ff9f43">30&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;销售部&amp;#34;&lt;/span>, &lt;span style="color:#ff9f43">5000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#5af78e">&amp;#34;李四&amp;#34;&lt;/span>, &lt;span style="color:#ff9f43">28&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;技术部&amp;#34;&lt;/span>, &lt;span style="color:#ff9f43">6000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#5af78e">&amp;#34;王五&amp;#34;&lt;/span>, &lt;span style="color:#ff9f43">35&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;管理部&amp;#34;&lt;/span>, &lt;span style="color:#ff9f43">7000&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A2:D4&amp;#34;&lt;/span>).Value &lt;span style="color:#ff6ac1">=&lt;/span> data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 应用表格样式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff5c57">let&lt;/span> tableRange &lt;span style="color:#ff6ac1">=&lt;/span> sheet.Range(&lt;span style="color:#5af78e">&amp;#34;A1:D4&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> table &lt;span style="color:#ff6ac1">=&lt;/span> sheet.ListObjects.Add(xlSrcRange, tableRange, &lt;span style="color:#ff6ac1">null&lt;/span>, xlYes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table.TableStyle &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;TableStyleMedium2&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="五调试技巧">五、调试技巧
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>使用console.log()&lt;/strong>：输出调试信息到控制台&lt;/li>
&lt;li>&lt;strong>设置断点&lt;/strong>：在代码行号旁边点击设置断点&lt;/li>
&lt;li>&lt;strong>单步执行&lt;/strong>：使用调试工具栏的按钮逐步执行代码&lt;/li>
&lt;li>&lt;strong>查看变量&lt;/strong>：在调试过程中查看变量值&lt;/li>
&lt;/ol>
&lt;h2 id="六注意事项">六、注意事项
&lt;/h2>&lt;ol>
&lt;li>JS宏与VBA语法有差异，不能直接混用&lt;/li>
&lt;li>部分Excel VBA功能在WPS JS宏中可能不可用&lt;/li>
&lt;li>宏执行速度可能受数据量影响&lt;/li>
&lt;li>复杂的操作建议分步执行和测试&lt;/li>
&lt;/ol>
&lt;p>通过掌握这些WPS JS宏的基础知识和常用表格函数，您可以大大提高办公效率，实现各种自动化处理任务。&lt;/p></description></item><item><title>Miniconda 使用指南及详细介绍</title><link>https://muo123.github.io/articles/miniconda-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E5%8F%8A%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</link><pubDate>Thu, 10 Jul 2025 19:26:38 +0800</pubDate><guid>https://muo123.github.io/articles/miniconda-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E5%8F%8A%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</guid><description>&lt;p>好的，我们来详细介绍一下 &lt;strong>Miniconda&lt;/strong> 以及它的使用。&lt;/p>
&lt;h2 id="什么是-miniconda">什么是 Miniconda？
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>核心概念：&lt;/strong> Miniconda 是 &lt;strong>Anaconda&lt;/strong> 的一个&lt;strong>精简版&lt;/strong>。Anaconda 是一个极其流行的 Python/R &lt;strong>数据科学平台&lt;/strong>，它包含了 Python/R 解释器、一个强大的包管理器 (&lt;code>conda&lt;/code> 和 &lt;code>pip&lt;/code>)，以及&lt;strong>超过 1500 个预装好的&lt;/strong>科学计算、数据分析和机器学习相关的库（如 NumPy, Pandas, Scikit-learn, Matplotlib, Jupyter 等）。&lt;/li>
&lt;li>&lt;strong>Miniconda 的精髓：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>只包含最核心组件：&lt;/strong> Miniconda 仅包含：
&lt;ul>
&lt;li>Python 解释器（或可选的最小 Python 环境）。&lt;/li>
&lt;li>&lt;strong>&lt;code>conda&lt;/code> 包管理器&lt;/strong>（这是核心！）。&lt;/li>
&lt;li>少量必要的依赖包。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>轻量级：&lt;/strong> 安装包很小（通常几十 MB），安装后占用的磁盘空间也远小于 Anaconda（初始可能只有几百 MB）。&lt;/li>
&lt;li>&lt;strong>灵活性：&lt;/strong> 它&lt;strong>不预装&lt;/strong>任何科学计算包。用户可以根据自己的&lt;strong>具体需求&lt;/strong>，使用 &lt;code>conda&lt;/code> 命令来&lt;strong>按需安装&lt;/strong>所需的包和环境。这避免了安装大量你可能永远不会用到的包。&lt;/li>
&lt;li>&lt;strong>核心价值：&lt;/strong> 提供 Anaconda 最核心、最强大的功能——&lt;strong>&lt;code>conda&lt;/code> 包管理和环境管理&lt;/strong>——而无需承担 Anaconda 的庞大体积。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="miniconda-与-anaconda-的关键区别">Miniconda 与 Anaconda 的关键区别
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">特性&lt;/th>
&lt;th style="text-align: left">Miniconda&lt;/th>
&lt;th style="text-align: left">Anaconda&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>大小&lt;/strong>&lt;/td>
&lt;td style="text-align: left">非常小 (安装包几十MB)&lt;/td>
&lt;td style="text-align: left">很大 (安装包几百MB到几GB)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>预装包&lt;/strong>&lt;/td>
&lt;td style="text-align: left">只有 Python + &lt;code>conda&lt;/code> + 核心依赖&lt;/td>
&lt;td style="text-align: left">Python + &lt;code>conda&lt;/code> + &lt;code>pip&lt;/code> + &lt;strong>1500+ 个科学包&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>灵活性&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;strong>极高&lt;/strong>，按需安装，避免冗余&lt;/td>
&lt;td style="text-align: left">较低，预装大量包，可能包含很多不用的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>磁盘空间&lt;/strong>&lt;/td>
&lt;td style="text-align: left">占用少&lt;/td>
&lt;td style="text-align: left">占用多&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>目标用户&lt;/strong>&lt;/td>
&lt;td style="text-align: left">需要灵活控制环境、知道需要什么包的用户&lt;/td>
&lt;td style="text-align: left">希望开箱即用、不介意体积的初学者/用户&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>简单来说：Miniconda 给你一个干净的起点和强大的工具 (&lt;code>conda&lt;/code>)，让你自己动手构建所需的环境。&lt;/strong>&lt;/p>
&lt;h2 id="为什么使用-miniconda-核心优势">为什么使用 Miniconda？ (核心优势)
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>强大的环境管理 (&lt;code>conda env&lt;/code>)：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>隔离性：&lt;/strong> 可以创建多个完全独立的 Python 环境（每个环境有自己的 Python 版本、包和依赖）。这是解决项目间包版本冲突的&lt;strong>黄金法则&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>可重现性：&lt;/strong> 可以精确导出环境配置 (&lt;code>environment.yml&lt;/code>)，方便在其他机器或与他人共享时&lt;strong>完全复现&lt;/strong>相同的环境。&lt;/li>
&lt;li>&lt;strong>安全性：&lt;/strong> 测试新包或不同版本时，不会污染系统Python或其他项目环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>卓越的包管理 (&lt;code>conda install&lt;/code>)：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>跨平台：&lt;/strong> Conda 包是预编译好的二进制文件，在 Windows, macOS, Linux 上安装通常&lt;strong>快速且一致&lt;/strong>，避免了从源码编译的复杂性和潜在错误（尤其对包含C/C++扩展的科学包非常重要）。&lt;/li>
&lt;li>&lt;strong>管理非Python依赖：&lt;/strong> Conda 不仅能管理 Python 包，还能管理环境所需的&lt;strong>非Python库和工具&lt;/strong>（如 MKL 数学库、C 编译器、HDF5 等）。这是 &lt;code>pip&lt;/code> 做不到的。&lt;/li>
&lt;li>&lt;strong>依赖关系解决：&lt;/strong> Conda 有复杂的依赖关系解析器，尽力确保安装的包及其依赖相互兼容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>轻量级与定制化：&lt;/strong> 只安装你真正需要的包，节省磁盘空间，保持环境简洁。&lt;/li>
&lt;li>&lt;strong>访问庞大的生态系统：&lt;/strong> 可以使用 &lt;code>conda&lt;/code> 从默认通道、社区维护的 &lt;code>conda-forge&lt;/code> 通道（包数量最多、更新最快）以及其他通道安装成千上万的包。&lt;/li>
&lt;li>&lt;strong>与 pip 兼容：&lt;/strong> 在 Conda 环境中，你仍然可以使用 &lt;code>pip&lt;/code> 来安装 PyPI 上的包（尤其是那些尚未提供 Conda 包的库）。通常建议优先使用 &lt;code>conda install&lt;/code>，当找不到所需包时再用 &lt;code>pip install&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h2 id="如何安装-miniconda">如何安装 Miniconda
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>下载安装程序：&lt;/strong>
&lt;ul>
&lt;li>访问 Miniconda 官方网站: &lt;a class="link" href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener"
>https://docs.conda.io/en/latest/miniconda.html&lt;/a>&lt;/li>
&lt;li>根据你的操作系统 (Windows, macOS, Linux) 和系统架构 (通常是 64 位 x86_64/amd64, Apple Silicon 选 arm64) 选择合适的安装程序。通常选择最新 Python 版本的安装器即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>运行安装程序：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Windows:&lt;/strong> 双击下载的 &lt;code>.exe&lt;/code> 文件。安装过程中：
&lt;ul>
&lt;li>建议为“所有用户”或“仅当前用户”安装（当前用户通常更简单）。&lt;/li>
&lt;li>&lt;strong>关键步骤：&lt;/strong> 在“Advanced Options”中，&lt;strong>强烈勾选 “Add Miniconda3 to my PATH environment variable”&lt;/strong>。虽然官方警告可能引起冲突，但对于初学者在命令行中使用方便性更重要。如果不勾选，以后需要手动激活环境或修改 PATH。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>macOS:&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>图形界面：&lt;/strong> 双击下载的 &lt;code>.pkg&lt;/code> 文件，按向导安装。&lt;/li>
&lt;li>&lt;strong>命令行 (推荐)：&lt;/strong> 打开终端，执行 &lt;code>bash Miniconda3-latest-MacOSX-x86_64.sh&lt;/code> (或对应你下载文件名的命令)。按提示操作（主要是按回车看许可协议，输入 &lt;code>yes&lt;/code> 同意，选择安装位置 - 通常按回车用默认位置 &lt;code>~/miniconda3&lt;/code>）。最后会问是否运行 &lt;code>conda init&lt;/code>，输入 &lt;code>yes&lt;/code>。这会配置你的 shell (如 bash, zsh) 在启动时自动激活 &lt;code>base&lt;/code> 环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Linux:&lt;/strong> 在终端中，导航到下载目录，执行 &lt;code>bash Miniconda3-latest-Linux-x86_64.sh&lt;/code> (或对应你下载文件名的命令)。后续步骤与 macOS 命令行安装类似。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>验证安装：&lt;/strong>
&lt;ul>
&lt;li>打开一个新的&lt;strong>终端&lt;/strong> (Windows: 命令提示符CMD 或 PowerShell; macOS/Linux: Terminal)。&lt;/li>
&lt;li>输入以下命令并按回车：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>如果安装成功，你会看到类似 &lt;code>conda 24.5.0&lt;/code> 的版本号。&lt;/li>
&lt;li>输入 &lt;code>python --version&lt;/code> 会显示 Miniconda 自带的 Python 版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="miniconda-核心使用指南-命令行">Miniconda 核心使用指南 (命令行)
&lt;/h2>&lt;p>Miniconda 主要通过 &lt;code>conda&lt;/code> 命令在终端/命令行中使用。以下是最常用和最重要的操作：&lt;/p>
&lt;h3 id="1-管理环境">1. 管理环境
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>创建新环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create --name myenv &lt;span style="color:#78787e"># 创建一个名为 &amp;#39;myenv&amp;#39; 的空环境（使用base环境的Python版本）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda create --name myenv &lt;span style="color:#ff5c57">python&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>3.10 &lt;span style="color:#78787e"># 创建名为 &amp;#39;myenv&amp;#39; 的环境并安装 Python 3.10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda create --name myenv numpy pandas matplotlib &lt;span style="color:#78787e"># 创建环境并直接安装指定包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda create --name myenv &lt;span style="color:#ff5c57">python&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>3.9 &lt;span style="color:#ff5c57">numpy&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>1.21 pandas scikit-learn &lt;span style="color:#78787e"># 组合指定&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>执行命令后，conda 会解析依赖并列出将要安装的包，询问是否继续 (&lt;code>Proceed ([y]/n)?&lt;/code>)，输入 &lt;code>y&lt;/code> 确认。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>激活环境：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>激活环境意味着后续的 &lt;code>conda install&lt;/code> 和 &lt;code>python&lt;/code> 等命令都将在该环境下执行。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda activate myenv &lt;span style="color:#78787e"># 激活名为 &amp;#39;myenv&amp;#39; 的环境&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>激活后，命令行提示符前通常会显示环境名 &lt;code>(myenv)&lt;/code>。&lt;/li>
&lt;li>&lt;strong>Windows 注意：&lt;/strong> 在原生 CMD 或 PowerShell 中，激活命令也是 &lt;code>conda activate myenv&lt;/code> (新版Miniconda已统一)。在老版本或某些配置下可能需要先 &lt;code>activate myenv&lt;/code>。如果 &lt;code>conda activate&lt;/code> 无效，尝试 &lt;code>activate myenv&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>停用环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda deactivate &lt;span style="color:#78787e"># 停用当前环境，回到 &amp;#39;base&amp;#39; 环境或系统环境&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>列出所有环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 或&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda info --envs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>输出中带 &lt;code>*&lt;/code> 号的是当前激活的环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env remove --name myenv &lt;span style="color:#78787e"># 删除名为 &amp;#39;myenv&amp;#39; 的环境&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>克隆环境：&lt;/strong> (基于现有环境创建副本)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create --name myclone --clone myenv &lt;span style="color:#78787e"># 克隆 &amp;#39;myenv&amp;#39; 环境到新环境 &amp;#39;myclone&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>导出环境配置 (用于共享或复现)：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda activate myenv &lt;span style="color:#78787e"># 先激活要导出的环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda env &lt;span style="color:#ff5c57">export&lt;/span> &amp;gt; environment.yml &lt;span style="color:#78787e"># 将环境详细信息导出到 environment.yml 文件&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>这个 &lt;code>environment.yml&lt;/code> 文件精确记录了环境中所有包的名称、版本和来源通道。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>根据 environment.yml 文件创建环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env create -f environment.yml &lt;span style="color:#78787e"># 根据 environment.yml 文件创建新环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda env create --name newenv -f environment.yml &lt;span style="color:#78787e"># 指定新环境名&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="2-管理包-在激活的环境中操作">2. 管理包 (在激活的环境中操作)
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>安装包：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda install numpy &lt;span style="color:#78787e"># 安装最新稳定版的 numpy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install &lt;span style="color:#ff5c57">numpy&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>1.23.5 &lt;span style="color:#78787e"># 安装指定版本的 numpy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install numpy pandas matplotlib &lt;span style="color:#78787e"># 一次性安装多个包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install -c conda-forge package_name &lt;span style="color:#78787e"># 从特定的通道（如 conda-forge）安装包&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>列出当前环境中已安装的包：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>搜索包：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda search numpy &lt;span style="color:#78787e"># 搜索名为 &amp;#39;numpy&amp;#39; 的包有哪些可用版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda search &lt;span style="color:#5af78e">&amp;#34;scikit-learn&amp;#34;&lt;/span> &lt;span style="color:#78787e"># 搜索特定名称的包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda search --channel conda-forge tensorflow &lt;span style="color:#78787e"># 在特定通道搜索&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>更新包：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda update numpy &lt;span style="color:#78787e"># 更新 numpy 到当前通道的最新兼容版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda update --all &lt;span style="color:#78787e"># 更新当前环境中所有包到最新兼容版本 (谨慎使用，可能破坏依赖)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>卸载包：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda remove numpy &lt;span style="color:#78787e"># 从当前环境卸载 numpy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda remove numpy pandas &lt;span style="color:#78787e"># 卸载多个包&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="3-管理-conda-本身和配置">3. 管理 Conda 本身和配置
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>更新 Conda：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda update conda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>清理缓存 (释放磁盘空间)：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda clean --all &lt;span style="color:#78787e"># 删除所有未使用的包和缓存&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置通道优先级 (如添加 conda-forge 并设置最高优先级)：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda config --add channels conda-forge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda config --set channel_priority strict &lt;span style="color:#78787e"># 非常重要！确保优先从 conda-forge 解析包&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="使用场景和最佳实践">使用场景和最佳实践
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>按项目创建环境：&lt;/strong> 每个新项目都应该在&lt;strong>自己独立&lt;/strong>的 Conda 环境中进行。这是避免依赖地狱的最佳实践。&lt;/li>
&lt;li>&lt;strong>&lt;code>environment.yml&lt;/code> 是黄金标准：&lt;/strong> 项目根目录下务必包含 &lt;code>environment.yml&lt;/code> 文件。提交到版本控制 (Git) 中，确保团队成员或未来的你能精确复现环境。&lt;/li>
&lt;li>&lt;strong>优先使用 &lt;code>conda install&lt;/code>：&lt;/strong> 对于科学计算、数据科学相关的包，优先尝试用 &lt;code>conda install&lt;/code> 安装，特别是涉及底层编译或非Python依赖的包 (NumPy, Pandas, SciPy, TensorFlow, PyTorch, GDAL, R 包等)。&lt;/li>
&lt;li>&lt;strong>善用 &lt;code>conda-forge&lt;/code>：&lt;/strong> &lt;code>conda-forge&lt;/code> 是社区维护的通道，包数量庞大且更新及时。添加并设置其为高优先级 (&lt;code>strict&lt;/code>)。&lt;/li>
&lt;li>&lt;strong>&lt;code>pip&lt;/code> 作为补充：&lt;/strong> 当 Conda 通道中没有你需要的纯 Python 包（或特定版本）时，在激活的 Conda 环境中使用 &lt;code>pip install&lt;/code>。注意：尽量避免在同一个环境中混用 &lt;code>conda install&lt;/code> 和 &lt;code>pip install&lt;/code> 安装同一个包的不同版本。&lt;/li>
&lt;li>&lt;strong>谨慎更新：&lt;/strong> 除非必要，不要轻易运行 &lt;code>conda update --all&lt;/code>。更新单个关键包或根据项目需求创建新环境再更新测试更安全。更新前建议导出当前环境 (&lt;code>conda env export&lt;/code>) 作为备份。&lt;/li>
&lt;li>&lt;strong>保持 &lt;code>base&lt;/code> 环境干净：&lt;/strong> 尽量不要在 &lt;code>base&lt;/code> 环境里安装项目特定的包。只用它来管理其他环境。项目工作务必在独立环境中进行。&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>Miniconda 提供了一个轻量级、灵活且强大的 Python 环境与包管理解决方案。它通过 &lt;code>conda&lt;/code> 工具赋予你以下核心能力：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>环境隔离：&lt;/strong> 为不同项目创建独立沙箱，解决版本冲突。&lt;/li>
&lt;li>&lt;strong>精准复现：&lt;/strong> 通过 &lt;code>environment.yml&lt;/code> 文件确保环境一致性。&lt;/li>
&lt;li>&lt;strong>高效安装：&lt;/strong> 预编译的二进制包加速复杂科学库的安装。&lt;/li>
&lt;li>&lt;strong>管理非Python依赖：&lt;/strong> 处理包所需的系统库。&lt;/li>
&lt;li>&lt;strong>按需定制：&lt;/strong> 只安装所需包，节省资源。&lt;/li>
&lt;/ul>
&lt;p>对于开发者、数据科学家、研究人员以及任何需要管理多个 Python 项目或处理复杂依赖关系的人来说，Miniconda 是一个非常值得学习和使用的工具。它比完整的 Anaconda 更轻巧，同时保留了其最核心、最有价值的功能。开始使用 Miniconda，拥抱更干净、更可控的 Python 开发体验吧！&lt;/p></description></item><item><title>Conda 使用指南与环境管理</title><link>https://muo123.github.io/articles/conda-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B8%8E%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 10 Jul 2025 19:22:09 +0800</pubDate><guid>https://muo123.github.io/articles/conda-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B8%8E%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</guid><description>&lt;img src="https://muo123.github.io/images/Conda%E4%BD%BF%E7%94%A8.png" alt="Featured image of post Conda 使用指南与环境管理" />&lt;p>Conda 是一个强大的 &lt;strong>开源包管理系统和环境管理系统&lt;/strong>，主要用于 Python 和 R 语言，但也支持其他语言的包。它由 Anaconda, Inc. (前身为 Continuum Analytics) 开发，旨在简化科学计算、数据分析、机器学习等领域中复杂软件栈的安装和管理。&lt;/p>
&lt;p>&lt;strong>Conda 的核心优势：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>跨平台：&lt;/strong> 支持 Windows, macOS, Linux。&lt;/li>
&lt;li>&lt;strong>环境隔离：&lt;/strong> 允许你创建相互隔离的独立环境，每个环境可以拥有不同版本的 Python 解释器、库包及其依赖项。这解决了项目间依赖冲突的问题（例如，项目 A 需要 TensorFlow 1.x，项目 B 需要 TensorFlow 2.x）。&lt;/li>
&lt;li>&lt;strong>包管理：&lt;/strong> 不仅管理 Python 包，还能管理非 Python 的二进制依赖库（如 C 库、CUDA 工具包、R 包等），这对于科学计算库（如 NumPy, SciPy, Pandas, PyTorch, TensorFlow）至关重要，因为它们通常依赖复杂的底层原生库。&lt;/li>
&lt;li>&lt;strong>解决依赖关系：&lt;/strong> Conda 使用 SAT 求解器来解析复杂的包依赖关系，确保环境中的所有包版本兼容。&lt;/li>
&lt;li>&lt;strong>丰富的软件源 (Channels)：&lt;/strong> 除了默认的 &lt;code>defaults&lt;/code> 频道（由 Anaconda 维护），还有庞大的社区频道，最著名的是 &lt;code>conda-forge&lt;/code>，它提供了比 &lt;code>defaults&lt;/code> 更广泛、更新更快的软件包集合。Bioconda 是生物信息学领域的重要频道。&lt;/li>
&lt;li>&lt;strong>与 Anaconda/Miniconda 捆绑：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Anaconda Distribution:&lt;/strong> 一个庞大的科学计算和数据科学平台，预装了数百个常用包（如 NumPy, SciPy, Pandas, Matplotlib, Jupyter, Scikit-learn）。安装文件较大。&lt;/li>
&lt;li>&lt;strong>Miniconda:&lt;/strong> Conda 的最小化安装包，只包含 Conda、Python 和少量核心依赖。推荐使用，因为它更轻量，你可以按需安装所需包。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Conda vs pip vs virtualenv/venv：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>pip&lt;/code>： 是 Python 官方的包安装器，&lt;strong>只&lt;/strong>管理 Python 包。它不管理环境（虽然常与 &lt;code>virtualenv&lt;/code> 或 &lt;code>venv&lt;/code> 结合使用），也不管理非 Python 依赖。&lt;/li>
&lt;li>&lt;code>virtualenv&lt;/code>/&lt;code>venv&lt;/code>： 是 Python 官方的环境隔离工具，用于创建独立的 Python 环境（主要是隔离 &lt;code>site-packages&lt;/code>）。它们&lt;strong>不&lt;/strong>管理包本身（依赖 &lt;code>pip&lt;/code> 安装包），也&lt;strong>不&lt;/strong>管理非 Python 依赖。&lt;/li>
&lt;li>&lt;code>conda&lt;/code>： 是一个&lt;strong>更综合&lt;/strong>的解决方案，&lt;strong>同时&lt;/strong>提供环境隔离 (&lt;code>conda create -n myenv&lt;/code>) &lt;strong>和&lt;/strong>包管理 (&lt;code>conda install&lt;/code>)，并且管理范围&lt;strong>超越&lt;/strong>了纯 Python 包，解决了底层依赖问题。&lt;code>conda&lt;/code> 环境内部也可以使用 &lt;code>pip&lt;/code>，但需谨慎以避免冲突。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>核心概念：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>环境 (Environment)：&lt;/strong> 一个独立的目录，包含特定版本的 Python 解释器、安装的包及其所有依赖项。默认环境叫 &lt;code>base&lt;/code>。&lt;/li>
&lt;li>&lt;strong>包 (Package)：&lt;/strong> 包含软件（库、应用、工具）及其元数据（名称、版本、依赖关系）的压缩文件。&lt;/li>
&lt;li>&lt;strong>通道 (Channel)：&lt;/strong> Conda 包存储和分发的服务器 URL。&lt;code>defaults&lt;/code> 是官方默认通道，&lt;code>conda-forge&lt;/code> 是最大、最活跃的社区通道。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>安装 Conda：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>下载安装器：&lt;/strong>
&lt;ul>
&lt;li>访问 Miniconda 官网：&lt;a class="link" href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener"
>https://docs.conda.io/en/latest/miniconda.html&lt;/a>&lt;/li>
&lt;li>选择适合你操作系统 (Windows, macOS, Linux) 和系统架构 (通常是 64-bit) 的 Python 版本（通常选最新的）。Miniconda 是推荐的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>运行安装器：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Windows:&lt;/strong> 双击下载的 &lt;code>.exe&lt;/code> 文件，按向导安装。建议勾选“Add Miniconda3 to my PATH environment variable”（虽然安装程序可能不推荐，但方便后续在任意终端使用 &lt;code>conda&lt;/code> 命令），并选择“Register Miniconda3 as my default Python 3.x”。&lt;/li>
&lt;li>&lt;strong>macOS/Linux:&lt;/strong> 打开终端，导航到下载目录，运行 &lt;code>bash Miniconda3-latest-MacOSX-x86_64.sh&lt;/code> (macOS Intel) 或 &lt;code>bash Miniconda3-latest-Linux-x86_64.sh&lt;/code> (Linux)，按提示操作。通常同意许可协议、选择安装位置（默认即可）、在初始化步骤选择 &lt;code>yes&lt;/code>（让 &lt;code>conda init&lt;/code> 配置你的 shell）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>验证安装：&lt;/strong> 打开一个新的终端窗口（非常重要，以使环境变量生效），输入：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>如果显示 Conda 版本号（如 &lt;code>conda 24.5.0&lt;/code>），则安装成功。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>基础 Conda 命令与使用：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>获取帮助：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda --help &lt;span style="color:#78787e"># 查看所有命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda &amp;lt;command&amp;gt; -h &lt;span style="color:#78787e"># 查看特定命令帮助，如 `conda install -h`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理环境：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>创建新环境：&lt;/strong> 指定环境名 (&lt;code>-n myenv&lt;/code>) 和要安装的包（可指定版本）。&lt;code>python=3.9&lt;/code> 表示安装 Python 3.9。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create -n myenv &lt;span style="color:#ff5c57">python&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>3.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>创建环境并同时安装包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create -n myenv &lt;span style="color:#ff5c57">python&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>3.9 numpy pandas matplotlib scikit-learn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>激活环境：&lt;/strong> 进入该环境，后续操作（安装、运行程序）都在此环境中进行。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda activate myenv &lt;span style="color:#78787e"># Windows/macOS/Linux (在初始化配置后)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">source&lt;/span> activate myenv &lt;span style="color:#78787e"># Linux/macOS (旧方式，或在某些未配置的 shell 中)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>激活后，命令行提示符通常会显示环境名 &lt;code>(myenv)&lt;/code>。&lt;/li>
&lt;li>&lt;strong>停用环境：&lt;/strong> 返回 &lt;code>base&lt;/code> 环境。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda deactivate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>列出所有环境：&lt;/strong> 星号 &lt;code>*&lt;/code> 表示当前激活的环境。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 或&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda info --envs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>删除环境：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda remove -n myenv --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>复制环境：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create -n new_env --clone old_env
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>导出环境配置 (YAML 文件)：&lt;/strong> 用于分享或重建环境。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env &lt;span style="color:#ff5c57">export&lt;/span> &amp;gt; environment.yml &lt;span style="color:#78787e"># 包含精确版本和所有通道来源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 或 (更推荐，只包含你显式安装的包，不包含依赖)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda env &lt;span style="color:#ff5c57">export&lt;/span> --from-history &amp;gt; environment.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>根据 YAML 文件创建环境：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env create -f environment.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理包 (在激活的环境中操作)：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>安装包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda install numpy pandas &lt;span style="color:#78787e"># 安装最新稳定版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install &lt;span style="color:#ff5c57">numpy&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>1.23.5 &lt;span style="color:#78787e"># 安装指定版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install &lt;span style="color:#5af78e">&amp;#34;scipy&amp;gt;=1.8&amp;#34;&lt;/span> &lt;span style="color:#78787e"># 安装满足版本条件的包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install -c conda-forge tensorflow &lt;span style="color:#78787e"># 从特定频道安装&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>安装多个包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda install numpy pandas matplotlib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>更新包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda update numpy &lt;span style="color:#78787e"># 更新单个包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda update --all &lt;span style="color:#78787e"># 更新环境中所有包到最新兼容版本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>移除包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda remove numpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>列出已安装包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>搜索包：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda search numpy &lt;span style="color:#78787e"># 在配置的频道中搜索&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda search -c conda-forge tensorflow &lt;span style="color:#78787e"># 在特定频道中搜索&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>清理缓存：&lt;/strong> 删除下载的 tarballs 和未使用的包。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda clean -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理通道：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>添加频道 (永久)：&lt;/strong> 将频道添加到 &lt;code>.condarc&lt;/code> 配置文件。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda config --add channels conda-forge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda config --add channels bioconda &lt;span style="color:#78787e"># 可以添加多个&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>设置频道优先级：&lt;/strong> 确保 &lt;code>conda-forge&lt;/code> 优先级最高（推荐）。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda config --set channel_priority strict
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>列出已配置频道：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda config --show channels
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>移除频道：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda config --remove channels channel_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>临时使用频道 (不修改配置)：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda install -c channel_name package_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>典型工作流程示例：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>创建项目环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create -n my_project &lt;span style="color:#ff5c57">python&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>3.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda activate my_project
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>安装所需包：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda install -c conda-forge numpy pandas matplotlib jupyterlab scikit-learn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>在环境中工作：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>启动 Python: &lt;code>python&lt;/code>&lt;/li>
&lt;li>启动 JupyterLab: &lt;code>jupyter lab&lt;/code>&lt;/li>
&lt;li>运行项目脚本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>离开项目：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda deactivate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>返回项目：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda activate my_project
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>分享环境：&lt;/strong> (在项目根目录)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env &lt;span style="color:#ff5c57">export&lt;/span> --from-history &amp;gt; environment.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>environment.yml&lt;/code> 加入版本控制 (如 Git)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同事/另一台机器重建环境：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda env create -f environment.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda activate my_project
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>重要提示与最佳实践：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>避免在 &lt;code>base&lt;/code> 环境安装太多包：&lt;/strong> 保持 &lt;code>base&lt;/code> 环境简洁，为每个项目创建独立环境。&lt;/li>
&lt;li>&lt;strong>优先使用 &lt;code>conda install&lt;/code>：&lt;/strong> 在 Conda 环境中，优先尝试用 &lt;code>conda install&lt;/code> 安装包，尤其是涉及复杂依赖（科学计算、机器学习库）时。&lt;/li>
&lt;li>&lt;strong>谨慎混用 &lt;code>conda&lt;/code> 和 &lt;code>pip&lt;/code>：&lt;/strong> 在同一个环境中，尽量避免混用。如果必须使用 &lt;code>pip&lt;/code> (&lt;code>pip install some_package&lt;/code>)，最好：
&lt;ul>
&lt;li>先用 &lt;code>conda install&lt;/code> 安装尽可能多的依赖。&lt;/li>
&lt;li>再用 &lt;code>pip&lt;/code> 安装 Conda 仓库中没有的纯 Python 包。&lt;/li>
&lt;li>避免用 &lt;code>pip&lt;/code> 安装 &lt;code>conda&lt;/code> 已经安装的包或其底层依赖。&lt;/li>
&lt;li>在运行 &lt;code>pip&lt;/code> 之前，可以尝试 &lt;code>conda install pip&lt;/code> 以确保环境内的 &lt;code>pip&lt;/code> 版本兼容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>conda-forge&lt;/code> 是首选频道：&lt;/strong> 由于其包数量多、更新快、社区活跃，建议设置 &lt;code>conda-forge&lt;/code> 为最高优先级 (&lt;code>channel_priority: strict&lt;/code>) 并将其作为默认频道。&lt;/li>
&lt;li>&lt;strong>使用 &lt;code>mamba&lt;/code> (可选但推荐)：&lt;/strong> &lt;code>mamba&lt;/code> 是一个用 C++ 重写的、完全兼容 &lt;code>conda&lt;/code> 的替代前端。它&lt;strong>显著&lt;/strong>加快了依赖解析和环境创建/更新的速度（尤其在复杂环境时）。安装后 (&lt;code>conda install -n base -c conda-forge mamba&lt;/code>)，只需将命令中的 &lt;code>conda&lt;/code> 替换为 &lt;code>mamba&lt;/code> (如 &lt;code>mamba create -n myenv python=3.9 numpy&lt;/code>, &lt;code>mamba install pandas&lt;/code>)。&lt;code>mamba&lt;/code> 的命令行选项与 &lt;code>conda&lt;/code> 几乎一致。&lt;/li>
&lt;li>&lt;strong>定期更新 Conda：&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda update -n base conda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 如果用 mamba&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mamba update -n base conda mamba
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>Conda 是一个解决 Python (及其他语言) 包管理和环境隔离难题的利器，尤其适合科学计算和需要管理复杂依赖栈的场景。其核心在于&lt;strong>环境隔离&lt;/strong>和&lt;strong>强大的依赖解析能力&lt;/strong>。通过 &lt;code>conda create&lt;/code>, &lt;code>conda activate/deactivate&lt;/code>, &lt;code>conda install/remove/list&lt;/code> 等命令，你可以轻松创建、切换、配置独立的工作环境。遵循最佳实践（如使用独立环境、优先 &lt;code>conda install&lt;/code>、善用 &lt;code>conda-forge&lt;/code>、考虑 &lt;code>mamba&lt;/code>），能极大提升你的开发效率和项目可复现性。&lt;/p></description></item><item><title>Python 版本管理工具详解与对比</title><link>https://muo123.github.io/articles/python-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AF%B9%E6%AF%94/</link><pubDate>Thu, 10 Jul 2025 19:19:33 +0800</pubDate><guid>https://muo123.github.io/articles/python-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AF%B9%E6%AF%94/</guid><description>&lt;p>Python 开发中常需管理不同版本的解释器和依赖环境。以下是主流工具的介绍及对比：&lt;/p>
&lt;hr>
&lt;h4 id="1-pyenv">&lt;strong>1. pyenv&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>核心功能&lt;/strong>：&lt;br>
管理多个 &lt;strong>Python 解释器版本&lt;/strong>（如 3.8, 3.11, PyPy 等），支持全局或按目录切换版本。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>纯 Shell 实现，无 Python 依赖。&lt;/li>
&lt;li>通过 &lt;code>pyenv install&lt;/code> 安装任意版本（需提前安装编译依赖）。&lt;/li>
&lt;li>支持插件扩展（如 &lt;code>pyenv-virtualenv&lt;/code> 管理虚拟环境）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>常用命令&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pyenv install 3.11.0 &lt;span style="color:#78787e"># 安装 Python 3.11.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv global 3.11.0 &lt;span style="color:#78787e"># 设置全局默认版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv &lt;span style="color:#ff5c57">local&lt;/span> 3.8.12 &lt;span style="color:#78787e"># 当前目录使用指定版本（生成 .python-version 文件）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="2-virtualenv--venv">&lt;strong>2. virtualenv / venv&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>核心功能&lt;/strong>：&lt;br>
创建&lt;strong>隔离的 Python 环境&lt;/strong>（虚拟环境），避免项目间依赖冲突。&lt;/li>
&lt;li>&lt;strong>对比&lt;/strong>：
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>工具&lt;/th>
&lt;th>所属&lt;/th>
&lt;th>支持版本&lt;/th>
&lt;th>激活命令&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>virtualenv&lt;/code>&lt;/td>
&lt;td>第三方包&lt;/td>
&lt;td>Python 2/3&lt;/td>
&lt;td>&lt;code>source env/bin/activate&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>venv&lt;/code>&lt;/td>
&lt;td>Python 标准库&lt;/td>
&lt;td>&lt;strong>Python ≥3.3&lt;/strong>&lt;/td>
&lt;td>&lt;code>source env/bin/activate&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>虚拟环境包含独立的 &lt;code>pip&lt;/code> 和包目录。&lt;/li>
&lt;li>&lt;code>venv&lt;/code> 无需额外安装（推荐 Python 3.3+ 使用）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>示例&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -m venv myenv &lt;span style="color:#78787e"># 创建虚拟环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">source&lt;/span> myenv/bin/activate &lt;span style="color:#78787e"># 激活环境（Linux/macOS）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myenv&lt;span style="color:#5af78e">\S&lt;/span>cripts&lt;span style="color:#5af78e">\a&lt;/span>ctivate &lt;span style="color:#78787e"># 激活环境（Windows）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="3-pipenv">&lt;strong>3. pipenv&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>核心功能&lt;/strong>：&lt;br>
整合 &lt;strong>虚拟环境 + 依赖管理&lt;/strong>（替代 &lt;code>pip&lt;/code> + &lt;code>virtualenv&lt;/code>），使用 &lt;code>Pipfile&lt;/code> 跟踪依赖。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>自动创建/管理虚拟环境。&lt;/li>
&lt;li>生成 &lt;code>Pipfile.lock&lt;/code> 确保依赖版本确定性。&lt;/li>
&lt;li>支持开发/生产环境依赖分离。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>常用命令&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pipenv --python 3.8 &lt;span style="color:#78787e"># 指定 Python 版本创建环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pipenv install requests &lt;span style="color:#78787e"># 安装包（写入 Pipfile）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pipenv install --dev pytest &lt;span style="color:#78787e"># 安装开发依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pipenv shell &lt;span style="color:#78787e"># 进入虚拟环境&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="4-conda">&lt;strong>4. conda&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>核心功能&lt;/strong>：&lt;br>
管理 &lt;strong>Python 版本 + 虚拟环境 + 跨语言依赖&lt;/strong>（如 C/C++ 库），适合科学计算。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>独立于系统 Python，可安装任意版本解释器。&lt;/li>
&lt;li>支持非 Python 包（如 NumPy、TensorFlow 的二进制依赖）。&lt;/li>
&lt;li>包含 &lt;code>conda&lt;/code> 和 &lt;code>pip&lt;/code> 双包管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>常用命令&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create --name myenv &lt;span style="color:#ff5c57">python&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>3.9 &lt;span style="color:#78787e"># 创建环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda activate myenv &lt;span style="color:#78787e"># 激活环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda install numpy &lt;span style="color:#78787e"># 安装包&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="5-poetry">&lt;strong>5. poetry&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>核心功能&lt;/strong>：&lt;br>
专注于 &lt;strong>依赖管理与打包&lt;/strong>（替代 &lt;code>pipenv&lt;/code> + &lt;code>setuptools&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>使用 &lt;code>pyproject.toml&lt;/code> 统一管理依赖、打包配置。&lt;/li>
&lt;li>自动解析依赖树，生成 &lt;code>poetry.lock&lt;/code>。&lt;/li>
&lt;li>支持发布包到 PyPI。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>常用命令&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry new project &lt;span style="color:#78787e"># 创建项目&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry add pandas &lt;span style="color:#78787e"># 安装依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry install &lt;span style="color:#78787e"># 安装所有依赖（含开发依赖）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry build &lt;span style="color:#78787e"># 构建包&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="工具对比总结">工具对比总结
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>工具&lt;/th>
&lt;th>核心能力&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>pyenv&lt;/strong>&lt;/td>
&lt;td>多版本 Python 解释器切换&lt;/td>
&lt;td>需同时维护多个 Python 版本的项目&lt;/td>
&lt;td>轻量级，版本切换灵活&lt;/td>
&lt;td>不管理虚拟环境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>virtualenv/venv&lt;/strong>&lt;/td>
&lt;td>创建虚拟环境&lt;/td>
&lt;td>简单隔离项目依赖&lt;/td>
&lt;td>标准工具，与 IDE 兼容性好&lt;/td>
&lt;td>需手动激活/管理依赖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>pipenv&lt;/strong>&lt;/td>
&lt;td>虚拟环境 + 依赖管理&lt;/td>
&lt;td>替代 pip+virtualenv 的现代方案&lt;/td>
&lt;td>自动管理环境，依赖锁定可靠&lt;/td>
&lt;td>性能较慢，社区争议较大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>conda&lt;/strong>&lt;/td>
&lt;td>Python + 跨语言环境管理&lt;/td>
&lt;td>数据科学、机器学习项目&lt;/td>
&lt;td>解决复杂二进制依赖，跨平台&lt;/td>
&lt;td>体积大，非纯 Python 生态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>poetry&lt;/strong>&lt;/td>
&lt;td>依赖管理 + 打包&lt;/td>
&lt;td>开发并发布 Python 包&lt;/td>
&lt;td>统一配置，依赖解析强大&lt;/td>
&lt;td>学习曲线较陡&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="使用建议">使用建议：
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>基础开发&lt;/strong>：&lt;br>
&lt;code>pyenv&lt;/code> + &lt;code>venv&lt;/code>（Python ≥3.3）或 &lt;code>virtualenv&lt;/code>（Python 2）。&lt;/li>
&lt;li>&lt;strong>项目依赖管理&lt;/strong>：&lt;br>
&lt;code>poetry&lt;/code>（推荐）或 &lt;code>pipenv&lt;/code>。&lt;/li>
&lt;li>&lt;strong>数据科学&lt;/strong>：&lt;br>
&lt;code>conda&lt;/code>（尤其需管理非 Python 依赖时）。&lt;/li>
&lt;li>&lt;strong>包开发者&lt;/strong>：&lt;br>
&lt;code>poetry&lt;/code>（一站式管理依赖、打包、发布）。&lt;/li>
&lt;/ol></description></item><item><title>在 Windows11 使用 Docker 创建 Ubuntu 容器</title><link>https://muo123.github.io/articles/%E5%9C%A8-windows11-%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-ubuntu-%E5%AE%B9%E5%99%A8/</link><pubDate>Wed, 09 Jul 2025 21:52:08 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%9C%A8-windows11-%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-ubuntu-%E5%AE%B9%E5%99%A8/</guid><description>&lt;img src="https://muo123.github.io/images/Docker%E5%88%9B%E5%BB%BAUbuntu%E5%AE%B9%E5%99%A8.jpg" alt="Featured image of post 在 Windows11 使用 Docker 创建 Ubuntu 容器" />&lt;p>在 Windows 系统上使用 Docker 创建 Ubuntu 容器的步骤如下：&lt;/p>
&lt;hr>
&lt;h3 id="1-确保-docker-环境就绪">1. 确保 Docker 环境就绪
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>安装 Docker Desktop&lt;/strong>&lt;br>
下载地址：&lt;a class="link" href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener"
>https://www.docker.com/products/docker-desktop&lt;/a>&lt;br>
安装后启动 Docker Desktop（系统托盘出现鲸鱼图标即表示运行成功）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>验证 Docker 安装&lt;/strong>&lt;br>
打开 PowerShell 或 CMD，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker --version &lt;span style="color:#78787e"># 查看 Docker 版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run hello-world &lt;span style="color:#78787e"># 测试基础功能&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-拉取-ubuntu-镜像">2. 拉取 Ubuntu 镜像
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull ubuntu:latest &lt;span style="color:#78787e"># 下载最新版 Ubuntu 镜像&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="3-创建并运行-ubuntu-容器">3. 创建并运行 Ubuntu 容器
&lt;/h3>&lt;h4 id="基础交互模式临时容器">基础交互模式（临时容器）
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -it --name my_ubuntu ubuntu:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-it&lt;/code>：进入交互模式（分配伪终端）&lt;/li>
&lt;li>&lt;code>--name my_ubuntu&lt;/code>：为容器命名（可自定义）&lt;/li>
&lt;li>此时会直接进入容器的 Bash Shell&lt;/li>
&lt;/ul>
&lt;h4 id="后台运行模式长期容器">后台运行模式（长期容器）
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name my_ubuntu ubuntu:latest sleep infinity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-d&lt;/code>：容器在后台运行&lt;/li>
&lt;li>&lt;code>sleep infinity&lt;/code>：保持容器持续运行（避免自动退出）&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-进入已运行的容器">4. 进入已运行的容器
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#ff5c57">exec&lt;/span> -it my_ubuntu /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>此命令会打开容器的 Bash Shell&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-常用容器操作命令">5. 常用容器操作命令
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>docker ps&lt;/code>&lt;/td>
&lt;td>查看运行中的容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>docker ps -a&lt;/code>&lt;/td>
&lt;td>查看所有容器（含已停止的）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>docker stop my_ubuntu&lt;/code>&lt;/td>
&lt;td>停止容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>docker start my_ubuntu&lt;/code>&lt;/td>
&lt;td>启动已停止的容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>docker rm my_ubuntu&lt;/code>&lt;/td>
&lt;td>删除容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>docker rmi ubuntu:latest&lt;/code>&lt;/td>
&lt;td>删除镜像&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="6-高级用法示例">6. 高级用法示例
&lt;/h3>&lt;h4 id="挂载主机目录到容器">挂载主机目录到容器
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -it -v C:&lt;span style="color:#5af78e">\H&lt;/span>ostData:/container_data ubuntu:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 Windows 的 &lt;code>C:\HostData&lt;/code> 映射到容器的 &lt;code>/container_data&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="端口映射">端口映射
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d -p 8080:80 --name web_server ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将容器的 80 端口映射到主机的 8080 端口&lt;/li>
&lt;/ul>
&lt;h4 id="保存容器修改为新镜像">保存容器修改为新镜像
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker commit my_ubuntu my_custom_ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="常见问题解决">常见问题解决
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Docker 无法启动&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>确保已启用 WSL 2（Windows 10/11 必需）&lt;/li>
&lt;li>在 PowerShell 管理员模式运行：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl --update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default-version &lt;span style="color:#ff9f43">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权限不足错误&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在 Docker Desktop 设置中启用 &lt;strong>WSL Integration&lt;/strong>&lt;/li>
&lt;li>或以管理员身份运行 PowerShell&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文件路径问题&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Windows 路径需转换为 Linux 风格（如 &lt;code>/c/HostData&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>通过以上步骤，您已成功在 Windows 上运行 Ubuntu 容器。接下来可以在容器内安装软件（如 &lt;code>apt update &amp;amp;&amp;amp; apt install python3&lt;/code>）或部署应用。&lt;/p></description></item><item><title>Docker Compose 文件详解</title><link>https://muo123.github.io/articles/docker-compose-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 08 Jul 2025 19:57:20 +0800</pubDate><guid>https://muo123.github.io/articles/docker-compose-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h1 id="docker-compose-文件详解">Docker Compose 文件详解
&lt;/h1>&lt;p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具，通过 YAML 文件配置应用服务。下面详细介绍如何编写 &lt;code>docker-compose.yml&lt;/code> 文件来管理 Python 开发环境。&lt;/p>
&lt;h2 id="基本结构">基本结构
&lt;/h2>&lt;p>一个典型的 Python 开发环境 &lt;code>docker-compose.yml&lt;/code> 文件包含以下部分：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;3.8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">build&lt;/span>: .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;5000:5000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - .:/app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_ENV=development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">command&lt;/span>: flask run --host=0.0.0.0 --port=5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="核心指令详解">核心指令详解
&lt;/h2>&lt;h3 id="1-version">1. &lt;code>version&lt;/code>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;3.8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>指定使用的 Compose 文件格式版本&lt;/li>
&lt;li>常用版本：&amp;lsquo;3.8&amp;rsquo;（最新稳定版）&lt;/li>
&lt;li>不同版本支持的功能不同&lt;/li>
&lt;/ul>
&lt;h3 id="2-services">2. &lt;code>services&lt;/code>
&lt;/h3>&lt;p>定义要运行的各个容器服务。&lt;/p>
&lt;h4 id="服务定义示例">服务定义示例：
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>: &lt;span style="color:#78787e"># 服务名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">build&lt;/span>: . &lt;span style="color:#78787e"># 使用当前目录的Dockerfile构建&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">image&lt;/span>: my-python-app &lt;span style="color:#78787e"># 可选，指定镜像名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">container_name&lt;/span>: my-app &lt;span style="color:#78787e"># 可选，指定容器名称&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-build">3. &lt;code>build&lt;/code>
&lt;/h3>&lt;p>指定构建镜像的配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">context&lt;/span>: . &lt;span style="color:#78787e"># 构建上下文路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">dockerfile&lt;/span>: Dockerfile &lt;span style="color:#78787e"># 指定Dockerfile文件名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">args&lt;/span>: &lt;span style="color:#78787e"># 构建参数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - PYTHON_VERSION=3.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-ports">4. &lt;code>ports&lt;/code>
&lt;/h3>&lt;p>端口映射：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;5000:5000&amp;#34;&lt;/span> &lt;span style="color:#78787e"># 主机端口:容器端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;8000:8000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>左侧为主机端口，右侧为容器端口&lt;/li>
&lt;li>仅指定容器端口时，主机端口随机分配：&lt;code>&amp;quot;5000&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="5-volumes">5. &lt;code>volumes&lt;/code>
&lt;/h3>&lt;p>数据卷挂载：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - .:/app &lt;span style="color:#78787e"># 主机路径:容器路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - /path/on/host:/path/in/container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - data_volume:/data &lt;span style="color:#78787e"># 使用命名卷&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>开发时常用挂载项目目录实现代码热更新&lt;/li>
&lt;li>命名卷需要在顶层 &lt;code>volumes&lt;/code> 部分声明&lt;/li>
&lt;/ul>
&lt;h3 id="6-environment">6. &lt;code>environment&lt;/code>
&lt;/h3>&lt;p>环境变量设置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_ENV=development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_DEBUG=1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - DATABASE_URL=postgres://user:pass@db:5432/mydb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或使用键值对格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">FLASK_ENV&lt;/span>: &lt;span style="color:#5af78e">&amp;#34;development&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">FLASK_DEBUG&lt;/span>: &lt;span style="color:#5af78e">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="7-command">7. &lt;code>command&lt;/code>
&lt;/h3>&lt;p>覆盖容器启动命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">command&lt;/span>: flask run --host=0.0.0.0 --port=5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或数组格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">command&lt;/span>: [&lt;span style="color:#5af78e">&amp;#34;flask&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;run&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;--host=0.0.0.0&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;--port=5000&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="高级配置">高级配置
&lt;/h2>&lt;h3 id="1-依赖关系-depends_on">1. 依赖关系 (&lt;code>depends_on&lt;/code>)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - db
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - redis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">db&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">image&lt;/span>: postgres:13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">redis&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">image&lt;/span>: redis:6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>控制服务启动顺序&lt;/li>
&lt;li>不等待依赖服务&amp;quot;就绪&amp;quot;，只是&amp;quot;启动&amp;quot;&lt;/li>
&lt;/ul>
&lt;h3 id="2-健康检查-healthcheck">2. 健康检查 (&lt;code>healthcheck&lt;/code>)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">test&lt;/span>: [&lt;span style="color:#5af78e">&amp;#34;CMD&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;curl&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;-f&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;http://localhost:5000/health&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">interval&lt;/span>: 30s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">timeout&lt;/span>: 10s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">retries&lt;/span>: &lt;span style="color:#ff9f43">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">start_period&lt;/span>: 10s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-资源限制-resources">3. 资源限制 (&lt;code>resources&lt;/code>)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">cpus&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;0.50&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">memory&lt;/span>: 512M
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">reservations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">memory&lt;/span>: 256M
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-网络配置-networks">4. 网络配置 (&lt;code>networks&lt;/code>)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - frontend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - backend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">frontend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">backend&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="完整-python-开发环境示例">完整 Python 开发环境示例
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;3.8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">context&lt;/span>: .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">dockerfile&lt;/span>: Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - PYTHON_VERSION=3.9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">image&lt;/span>: my-python-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">container_name&lt;/span>: python-web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;5000:5000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - .:/app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - /app/.venv &lt;span style="color:#78787e"># 避免将虚拟环境挂载到主机&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_ENV=development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_DEBUG=1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - redis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - db
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">restart&lt;/span>: unless-stopped
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - app-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">db&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">image&lt;/span>: postgres:13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">POSTGRES_USER&lt;/span>: devuser
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">POSTGRES_PASSWORD&lt;/span>: devpass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">POSTGRES_DB&lt;/span>: devdb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - postgres_data:/var/lib/postgresql/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;5432:5432&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - app-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">redis&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">image&lt;/span>: redis:6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;6379:6379&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - redis_data:/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - app-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">postgres_data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">redis_data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">app-network&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">driver&lt;/span>: bridge
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用命令">常用命令
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 启动所有服务（后台运行）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose up -d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 查看服务状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose ps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 查看服务日志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose logs -f web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 停止服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose down
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 重建并启动服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose up -d --build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 进入运行中的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose &lt;span style="color:#ff5c57">exec&lt;/span> web bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 运行一次性命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose run web python manage.py migrate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开发环境优化技巧">开发环境优化技巧
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>使用覆盖文件&lt;/strong>：创建 &lt;code>docker-compose.override.yml&lt;/code> 用于开发特定配置&lt;/li>
&lt;li>&lt;strong>环境变量文件&lt;/strong>：使用 &lt;code>.env&lt;/code> 文件管理环境变量&lt;/li>
&lt;li>&lt;strong>缓存依赖&lt;/strong>：对 &lt;code>pip&lt;/code> 缓存使用命名卷&lt;/li>
&lt;li>&lt;strong>热重载&lt;/strong>：确保正确挂载代码目录并设置开发环境变量&lt;/li>
&lt;li>&lt;strong>多阶段Compose&lt;/strong>：使用不同文件管理开发和生产配置&lt;/li>
&lt;/ol>
&lt;p>通过合理配置 &lt;code>docker-compose.yml&lt;/code>，你可以轻松管理包含多个服务的复杂 Python 开发环境，并确保团队成员使用完全相同的环境配置。&lt;/p></description></item><item><title>Dockfile 文件详解</title><link>https://muo123.github.io/articles/dockfile-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 08 Jul 2025 19:55:29 +0800</pubDate><guid>https://muo123.github.io/articles/dockfile-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h1 id="dockerfile-编写详解">Dockerfile 编写详解
&lt;/h1>&lt;p>Dockerfile 是一个文本文件，包含了一系列用于构建 Docker 镜像的指令。下面我将详细介绍如何编写一个高效的 Python 开发环境 Dockerfile。&lt;/p>
&lt;h2 id="基本结构">基本结构
&lt;/h2>&lt;p>一个典型的 Python 项目 Dockerfile 包含以下部分：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 1. 基础镜像&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 2. 元数据 (可选)&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">LABEL&lt;/span> &lt;span style="color:#ff5c57">maintainer&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;your.email@example.com&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">LABEL&lt;/span> &lt;span style="color:#ff5c57">version&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">LABEL&lt;/span> &lt;span style="color:#ff5c57">description&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;Python development environment&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 3. 环境变量设置&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> PYTHONDONTWRITEBYTECODE &lt;span style="color:#ff9f43">1&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> PYTHONUNBUFFERED &lt;span style="color:#ff9f43">1&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 4. 工作目录设置&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 5. 依赖安装 (先复制requirements文件，利用Docker缓存层)&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> requirements.txt .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 6. 复制项目文件&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 7. 暴露端口 (可选)&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">EXPOSE&lt;/span>&lt;span style="color:#5af78e"> 8000&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 8. 启动命令&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;app.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="指令详解">指令详解
&lt;/h2>&lt;h3 id="1-from---指定基础镜像">1. FROM - 指定基础镜像
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>python:3.9-slim&lt;/code> 是官方提供的轻量级 Python 镜像&lt;/li>
&lt;li>其他常用变体：
&lt;ul>
&lt;li>&lt;code>python:3.9&lt;/code> - 完整版&lt;/li>
&lt;li>&lt;code>python:3.9-alpine&lt;/code> - 更小的基于 Alpine Linux 的镜像&lt;/li>
&lt;li>&lt;code>python:3.9-buster&lt;/code> - 基于 Debian Buster&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-label---添加元数据">2. LABEL - 添加元数据
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">LABEL&lt;/span> &lt;span style="color:#ff5c57">maintainer&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;your.email@example.com&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">LABEL&lt;/span> &lt;span style="color:#ff5c57">version&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>为镜像添加元信息，便于管理&lt;/li>
&lt;li>可以使用多个 LABEL 指令或合并为一个：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">LABEL&lt;/span> &lt;span style="color:#ff5c57">maintainer&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;your.email@example.com&amp;#34;&lt;/span> &lt;span style="color:#5af78e">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5af78e">&lt;/span> &lt;span style="color:#ff5c57">version&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;1.0&amp;#34;&lt;/span> &lt;span style="color:#5af78e">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5af78e">&lt;/span> &lt;span style="color:#ff5c57">description&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;Python development environment&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="3-env---设置环境变量">3. ENV - 设置环境变量
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">ENV&lt;/span> PYTHONDONTWRITEBYTECODE &lt;span style="color:#ff9f43">1&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> PYTHONUNBUFFERED &lt;span style="color:#ff9f43">1&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>PYTHONDONTWRITEBYTECODE=1&lt;/code>：防止 Python 将 pyc 文件写入磁盘&lt;/li>
&lt;li>&lt;code>PYTHONUNBUFFERED=1&lt;/code>：确保 Python 输出直接发送到终端而不被缓冲&lt;/li>
&lt;li>其他常用环境变量：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">ENV&lt;/span> &lt;span style="color:#ff5c57">FLASK_APP&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>app.py&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> &lt;span style="color:#ff5c57">FLASK_ENV&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>development
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="4-workdir---设置工作目录">4. WORKDIR - 设置工作目录
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>设置容器内的工作目录&lt;/li>
&lt;li>如果目录不存在会自动创建&lt;/li>
&lt;li>后续的 RUN、CMD、COPY 等指令都会在这个目录下执行&lt;/li>
&lt;/ul>
&lt;h3 id="5-copy-和-run---复制文件和安装依赖">5. COPY 和 RUN - 复制文件和安装依赖
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">COPY&lt;/span> requirements.txt .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>最佳实践&lt;/strong>：先单独复制 requirements.txt 并安装依赖，这样可以更好地利用 Docker 的缓存层&lt;/li>
&lt;li>&lt;code>--no-cache-dir&lt;/code>：告诉 pip 不要缓存下载的包，减小镜像大小&lt;/li>
&lt;li>对于生产环境，可以添加 &lt;code>--no-deps&lt;/code> 只安装项目直接依赖&lt;/li>
&lt;/ul>
&lt;h3 id="6-copy---复制项目文件">6. COPY - 复制项目文件
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>第一个 &lt;code>.&lt;/code> 表示主机当前目录&lt;/li>
&lt;li>第二个 &lt;code>.&lt;/code> 表示容器内的当前目录（由 WORKDIR 指定）&lt;/li>
&lt;li>可以使用 &lt;code>.dockerignore&lt;/code> 文件排除不需要复制的文件和目录&lt;/li>
&lt;/ul>
&lt;h3 id="7-expose---声明端口">7. EXPOSE - 声明端口
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">EXPOSE&lt;/span>&lt;span style="color:#5af78e"> 8000&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>声明容器运行时监听的端口&lt;/li>
&lt;li>这只是文档作用，实际端口映射需要在 &lt;code>docker run&lt;/code> 时用 &lt;code>-p&lt;/code> 参数指定&lt;/li>
&lt;/ul>
&lt;h3 id="8-cmd---指定容器启动命令">8. CMD - 指定容器启动命令
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;app.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>容器启动时执行的命令&lt;/li>
&lt;li>使用 &lt;strong>exec 形式&lt;/strong>（JSON 数组格式）而不是 shell 形式&lt;/li>
&lt;li>一个 Dockerfile 中只能有一个 CMD 指令&lt;/li>
&lt;/ul>
&lt;h2 id="高级用法">高级用法
&lt;/h2>&lt;h3 id="多阶段构建">多阶段构建
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 第一阶段：构建环境&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9 as builder&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> requirements.txt .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install --user -r requirements.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 第二阶段：运行环境&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 从builder阶段复制已安装的Python包&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> --from&lt;span style="color:#ff6ac1">=&lt;/span>builder /root/.local /root/.local&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 确保脚本能够找到用户安装的包&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> &lt;span style="color:#ff5c57">PATH&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>/root/.local/bin:&lt;span style="color:#ff5c57">$PATH&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;app.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用虚拟环境">使用虚拟环境
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> python -m venv /opt/venv&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> &lt;span style="color:#ff5c57">PATH&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;/opt/venv/bin:&lt;/span>&lt;span style="color:#ff5c57">$PATH&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> requirements.txt .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install -r requirements.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="针对开发环境的优化">针对开发环境的优化
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 开发专用环境变量&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">ENV&lt;/span> &lt;span style="color:#ff5c57">FLASK_ENV&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">ENV&lt;/span> &lt;span style="color:#ff5c57">FLASK_DEBUG&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 安装开发依赖&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> requirements-dev.txt .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install -r requirements-dev.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . .&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 使用flask run自动重载&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;flask&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;run&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;--host=0.0.0.0&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最佳实践">最佳实践
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>使用特定版本标签&lt;/strong>：避免使用 &lt;code>latest&lt;/code> 标签&lt;/li>
&lt;li>&lt;strong>最小化镜像&lt;/strong>：使用 &lt;code>-slim&lt;/code> 或 &lt;code>-alpine&lt;/code> 变体&lt;/li>
&lt;li>&lt;strong>利用缓存&lt;/strong>：将不常变化的指令放在前面&lt;/li>
&lt;li>&lt;strong>减少层数&lt;/strong>：合并 RUN 指令
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">RUN&lt;/span> apt-get update &lt;span style="color:#ff6ac1">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#5af78e">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5af78e">&lt;/span> apt-get install -y --no-install-recommends &lt;span style="color:#5af78e">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5af78e">&lt;/span> gcc &lt;span style="color:#5af78e">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5af78e">&lt;/span> python3-dev &lt;span style="color:#ff6ac1">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#5af78e">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5af78e">&lt;/span> rm -rf /var/lib/apt/lists/*&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>安全扫描&lt;/strong>：构建后使用 &lt;code>docker scan&lt;/code> 检查漏洞&lt;/li>
&lt;li>&lt;strong>使用 .dockerignore&lt;/strong>：避免复制不必要的文件&lt;/li>
&lt;/ol>
&lt;p>通过以上详细的 Dockerfile 编写指南，你可以为 Python 项目创建高效、安全的开发环境容器。&lt;/p></description></item><item><title>在 Windows 11 上使用 Docker 创建 Python 环境</title><link>https://muo123.github.io/articles/%E5%9C%A8-windows-11-%E4%B8%8A%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-python-%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 08 Jul 2025 19:50:03 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%9C%A8-windows-11-%E4%B8%8A%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-python-%E7%8E%AF%E5%A2%83/</guid><description>&lt;img src="https://muo123.github.io/images/Windows11%E4%BD%BF%E7%94%A8Docker%E5%88%9B%E5%BB%BAPython%E7%8E%AF%E5%A2%83.png" alt="Featured image of post 在 Windows 11 上使用 Docker 创建 Python 环境" />&lt;h1 id="在windows-11上使用docker创建python开发环境">在Windows 11上使用Docker创建Python开发环境
&lt;/h1>&lt;p>使用Docker创建Python开发环境可以确保开发环境的一致性，并避免&amp;quot;在我机器上能运行&amp;quot;的问题。以下是在Windows 11上设置Python开发环境的步骤：&lt;/p>
&lt;h2 id="前提条件">前提条件
&lt;/h2>&lt;ol>
&lt;li>Windows 11系统&lt;/li>
&lt;li>已安装Docker Desktop for Windows&lt;/li>
&lt;li>启用WSL 2（推荐）&lt;/li>
&lt;/ol>
&lt;h2 id="步骤1安装docker-desktop">步骤1：安装Docker Desktop
&lt;/h2>&lt;p>如果尚未安装：&lt;/p>
&lt;ol>
&lt;li>从&lt;a class="link" href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener"
>Docker官网&lt;/a>下载Docker Desktop&lt;/li>
&lt;li>安装并启动Docker Desktop&lt;/li>
&lt;li>确保在设置中启用WSL 2后端（Settings &amp;gt; General &amp;gt; Use WSL 2 based engine）&lt;/li>
&lt;/ol>
&lt;h2 id="步骤2创建项目目录">步骤2：创建项目目录
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>mkdir &lt;span style="color:#ff5c57">python-docker&lt;/span>-project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd python-docker&lt;/span>-project
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤3创建dockerfile">步骤3：创建Dockerfile
&lt;/h2>&lt;p>在项目目录中创建&lt;code>Dockerfile&lt;/code>文件（无扩展名），内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 使用官方Python镜像作为基础&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> python:3.9-slim&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 设置工作目录&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 复制当前目录内容到容器中的/app目录&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . /app&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 安装项目依赖&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#78787e"># 容器启动时运行的命令&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;your_script.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤4创建requirementstxt">步骤4：创建requirements.txt
&lt;/h2>&lt;p>在同一目录下创建&lt;code>requirements.txt&lt;/code>文件，列出你的Python依赖，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>flask==2.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numpy==1.21.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pandas==1.3.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤5创建docker-composeyml可选但推荐">步骤5：创建docker-compose.yml（可选但推荐）
&lt;/h2>&lt;p>对于更复杂的开发环境，使用docker-compose更方便：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;3.8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">build&lt;/span>: .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#5af78e">&amp;#34;5000:5000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - .:/app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - FLASK_ENV=development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">command&lt;/span>: python your_script.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="步骤6构建并运行容器">步骤6：构建并运行容器
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 构建镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker build -t &lt;span style="color:#ff5c57">python-dev&lt;/span> .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 运行容器（如果使用docker-compose则运行下面的命令）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -it --rm -p &lt;span style="color:#ff9f43">5000&lt;/span>&lt;span style="color:#ff5c57">:&lt;/span>&lt;span style="color:#ff9f43">5000&lt;/span> -v ${PWD}&lt;span style="color:#ff5c57">:&lt;/span>/app &lt;span style="color:#ff5c57">python-dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 或者使用docker-compose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">docker-compose&lt;/span> up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开发工作流程">开发工作流程
&lt;/h2>&lt;ol>
&lt;li>使用你喜欢的编辑器（如VS Code）编辑本地文件&lt;/li>
&lt;li>更改会自动同步到容器中（因为挂载了卷）&lt;/li>
&lt;li>测试和调试在容器环境中进行&lt;/li>
&lt;/ol>
&lt;h2 id="vs-code集成推荐">VS Code集成（推荐）
&lt;/h2>&lt;ol>
&lt;li>安装&amp;quot;Docker&amp;quot;和&amp;quot;Remote - Containers&amp;quot;扩展&lt;/li>
&lt;li>打开项目文件夹&lt;/li>
&lt;li>按F1，选择&amp;quot;Remote-Containers: Open Folder in Container&amp;quot;&lt;/li>
&lt;li>选择你的Dockerfile或docker-compose.yml&lt;/li>
&lt;/ol>
&lt;h2 id="常用命令">常用命令
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 查看运行中的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#ff5c57">ps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 进入运行中的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker exec -it &amp;lt;&lt;span style="color:#ff5c57">container-id&lt;/span>&amp;gt; bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 停止容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop &amp;lt;&lt;span style="color:#ff5c57">container-id&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 删除所有停止的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker container prune
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 删除未使用的镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker image prune
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="提示">提示
&lt;/h2>&lt;ul>
&lt;li>对于数据科学项目，可以考虑使用&lt;code>python:3.9-slim&lt;/code>或&lt;code>jupyter/datascience-notebook&lt;/code>镜像&lt;/li>
&lt;li>如果需要GUI支持，需要额外配置X11转发&lt;/li>
&lt;li>对于生产环境，使用多阶段构建以减少镜像大小&lt;/li>
&lt;/ul>
&lt;p>这样你就有了一个隔离的、可复制的Python开发环境，可以在任何支持Docker的机器上运行。&lt;/p></description></item><item><title>简单了解 Docker</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-docker/</link><pubDate>Tue, 08 Jul 2025 19:40:54 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-docker/</guid><description>&lt;img src="https://muo123.github.io/images/Docker%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D.jpg" alt="Featured image of post 简单了解 Docker" />&lt;h2 id="什么是docker">什么是Docker？
&lt;/h2>&lt;p>Docker是一个开源的容器化平台，用于开发、部署和运行应用程序。它允许开发者将应用程序及其依赖项打包到一个轻量级、可移植的容器中，然后可以在任何支持Docker的环境中运行。&lt;/p>
&lt;h2 id="docker的核心概念">Docker的核心概念
&lt;/h2>&lt;h3 id="1-容器container">1. 容器(Container)
&lt;/h3>&lt;ul>
&lt;li>轻量级的、可执行的软件包，包含运行应用程序所需的一切：代码、运行时、系统工具、系统库和设置&lt;/li>
&lt;li>与虚拟机不同，容器共享主机系统的内核，不需要单独的操作系统&lt;/li>
&lt;li>提供进程隔离，确保应用程序在不同环境中行为一致&lt;/li>
&lt;/ul>
&lt;h3 id="2-镜像image">2. 镜像(Image)
&lt;/h3>&lt;ul>
&lt;li>容器的模板，包含创建容器所需的指令&lt;/li>
&lt;li>由多层文件系统组成，每一层代表镜像构建过程中的一个指令&lt;/li>
&lt;li>镜像是只读的，当从镜像启动容器时，Docker会在镜像顶部添加一个可写层&lt;/li>
&lt;/ul>
&lt;h3 id="3-dockerfile">3. Dockerfile
&lt;/h3>&lt;ul>
&lt;li>文本文件，包含构建Docker镜像所需的所有命令&lt;/li>
&lt;li>每条指令都会在镜像中创建一个新层&lt;/li>
&lt;li>示例Dockerfile:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span>&lt;span style="color:#5af78e"> ubuntu:20.04&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">RUN&lt;/span> apt-get update &lt;span style="color:#ff6ac1">&amp;amp;&amp;amp;&lt;/span> apt-get install -y python3&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">COPY&lt;/span> . /app&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">WORKDIR&lt;/span>&lt;span style="color:#5af78e"> /app&lt;/span>&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">&lt;/span>&lt;span style="color:#ff6ac1">CMD&lt;/span> [&lt;span style="color:#5af78e">&amp;#34;python3&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;app.py&amp;#34;&lt;/span>]&lt;span style="color:#ff5c57">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="4-docker引擎">4. Docker引擎
&lt;/h3>&lt;ul>
&lt;li>Docker的核心组件，包括：
&lt;ul>
&lt;li>Docker守护进程(dockerd)：管理容器、镜像、网络和存储卷&lt;/li>
&lt;li>REST API：与守护进程交互的接口&lt;/li>
&lt;li>Docker CLI：用户与Docker交互的命令行工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="docker的主要优势">Docker的主要优势
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>一致性环境&lt;/strong>：开发、测试和生产环境一致&lt;/li>
&lt;li>&lt;strong>隔离性&lt;/strong>：应用程序在容器中相互隔离&lt;/li>
&lt;li>&lt;strong>轻量级&lt;/strong>：比传统虚拟机更高效，启动更快&lt;/li>
&lt;li>&lt;strong>可移植性&lt;/strong>：一次构建，随处运行&lt;/li>
&lt;li>&lt;strong>微服务友好&lt;/strong>：适合微服务架构部署&lt;/li>
&lt;li>&lt;strong>版本控制和组件重用&lt;/strong>：镜像可以版本化并重用&lt;/li>
&lt;/ol>
&lt;h2 id="docker基本命令">Docker基本命令
&lt;/h2>&lt;h3 id="镜像相关">镜像相关
&lt;/h3>&lt;ul>
&lt;li>&lt;code>docker pull &amp;lt;image&amp;gt;&lt;/code>：从仓库拉取镜像&lt;/li>
&lt;li>&lt;code>docker build -t &amp;lt;name&amp;gt; .&lt;/code>：根据Dockerfile构建镜像&lt;/li>
&lt;li>&lt;code>docker images&lt;/code>：列出本地镜像&lt;/li>
&lt;li>&lt;code>docker rmi &amp;lt;image&amp;gt;&lt;/code>：删除镜像&lt;/li>
&lt;/ul>
&lt;h3 id="容器相关">容器相关
&lt;/h3>&lt;ul>
&lt;li>&lt;code>docker run &amp;lt;image&amp;gt;&lt;/code>：从镜像创建并启动容器&lt;/li>
&lt;li>&lt;code>docker ps&lt;/code>：列出运行中的容器&lt;/li>
&lt;li>&lt;code>docker ps -a&lt;/code>：列出所有容器&lt;/li>
&lt;li>&lt;code>docker stop &amp;lt;container&amp;gt;&lt;/code>：停止容器&lt;/li>
&lt;li>&lt;code>docker start &amp;lt;container&amp;gt;&lt;/code>：启动已停止的容器&lt;/li>
&lt;li>&lt;code>docker rm &amp;lt;container&amp;gt;&lt;/code>：删除容器&lt;/li>
&lt;li>&lt;code>docker exec -it &amp;lt;container&amp;gt; /bin/bash&lt;/code>：进入运行中的容器&lt;/li>
&lt;/ul>
&lt;h3 id="网络相关">网络相关
&lt;/h3>&lt;ul>
&lt;li>&lt;code>docker network ls&lt;/code>：列出网络&lt;/li>
&lt;li>&lt;code>docker network create &amp;lt;name&amp;gt;&lt;/code>：创建网络&lt;/li>
&lt;li>&lt;code>docker network connect &amp;lt;network&amp;gt; &amp;lt;container&amp;gt;&lt;/code>：连接容器到网络&lt;/li>
&lt;/ul>
&lt;h2 id="docker架构">Docker架构
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>客户端-服务器架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Docker客户端与Docker守护进程通信&lt;/li>
&lt;li>守护进程负责构建、运行和分发容器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>主要组件&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Docker客户端(CLI)&lt;/li>
&lt;li>Docker主机(运行守护进程)&lt;/li>
&lt;li>注册表(Docker Hub等)存储镜像&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="docker使用场景">Docker使用场景
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>应用程序打包和部署&lt;/strong>&lt;/li>
&lt;li>&lt;strong>持续集成和持续部署(CI/CD)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>微服务架构&lt;/strong>&lt;/li>
&lt;li>&lt;strong>开发环境标准化&lt;/strong>&lt;/li>
&lt;li>&lt;strong>快速搭建测试环境&lt;/strong>&lt;/li>
&lt;li>&lt;strong>平台即服务(PaaS)部署&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="docker生态系统">Docker生态系统
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Docker Compose&lt;/strong>：用于定义和运行多容器应用程序&lt;/li>
&lt;li>&lt;strong>Docker Swarm&lt;/strong>：Docker原生的集群管理和编排工具&lt;/li>
&lt;li>&lt;strong>Kubernetes&lt;/strong>：流行的容器编排系统(虽然不专属于Docker，但常与Docker一起使用)&lt;/li>
&lt;li>&lt;strong>Docker Hub&lt;/strong>：公共镜像注册表&lt;/li>
&lt;li>&lt;strong>Docker Desktop&lt;/strong>：Mac和Windows上的Docker桌面应用&lt;/li>
&lt;/ul>
&lt;h2 id="docker与传统虚拟机的比较">Docker与传统虚拟机的比较
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>Docker容器&lt;/th>
&lt;th>传统虚拟机&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>启动时间&lt;/td>
&lt;td>秒级&lt;/td>
&lt;td>分钟级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>性能&lt;/td>
&lt;td>接近原生&lt;/td>
&lt;td>有损耗&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>硬盘使用&lt;/td>
&lt;td>一般为MB级&lt;/td>
&lt;td>一般为GB级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>系统支持量&lt;/td>
&lt;td>单机支持上千容器&lt;/td>
&lt;td>一般几十个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>隔离性&lt;/td>
&lt;td>进程级别&lt;/td>
&lt;td>系统级别&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>操作系统&lt;/td>
&lt;td>共享主机OS&lt;/td>
&lt;td>每个VM有独立OS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>Docker通过容器化技术彻底改变了软件开发和部署的方式，提供了轻量级、一致性和可移植性的解决方案。它已成为现代DevOps实践和云原生应用开发的核心工具之一。&lt;/p></description></item><item><title>Excel常用字符串函数</title><link>https://muo123.github.io/articles/excel%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 01 Jul 2025 19:28:38 +0800</pubDate><guid>https://muo123.github.io/articles/excel%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/</guid><description>&lt;img src="https://muo123.github.io/images/Excel%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.png" alt="Featured image of post Excel常用字符串函数" />&lt;h1 id="excel-常用字符串函数详解">Excel 常用字符串函数详解
&lt;/h1>&lt;p>Excel 提供了多种强大的字符串处理函数，以下是其中最常用的一些函数及其详细说明和示例：&lt;/p>
&lt;h2 id="1-len-函数">1. LEN 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：返回文本字符串中的字符数（长度）&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=LEN(text)&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=LEN(&amp;#34;Excel&amp;#34;) → 返回 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=LEN(&amp;#34;数据 分析&amp;#34;) → 返回 5 (空格也算一个字符)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-left-函数">2. LEFT 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：从文本字符串的左侧开始提取指定数量的字符&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=LEFT(text, [num_chars])&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=LEFT(&amp;#34;Microsoft&amp;#34;, 5) → 返回 &amp;#34;Micro&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=LEFT(A1, 3) → 返回A1单元格内容的前3个字符
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-right-函数">3. RIGHT 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：从文本字符串的右侧开始提取指定数量的字符&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=RIGHT(text, [num_chars])&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=RIGHT(&amp;#34;Excel&amp;#34;, 3) → 返回 &amp;#34;xel&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=RIGHT(B2, 2) → 返回B2单元格内容的最后2个字符
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-mid-函数">4. MID 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：从文本字符串的指定位置开始提取指定数量的字符&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=MID(text, start_num, num_chars)&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=MID(&amp;#34;abcdefg&amp;#34;, 3, 2) → 返回 &amp;#34;cd&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=MID(&amp;#34;2023-01-15&amp;#34;, 6, 2) → 返回 &amp;#34;01&amp;#34; (提取月份)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-find-和-search-函数">5. FIND 和 SEARCH 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：查找一个字符串在另一个字符串中的位置（区分大小写/不区分）&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>=FIND(find_text, within_text, [start_num])&lt;/code> (区分大小写)&lt;/li>
&lt;li>&lt;code>=SEARCH(find_text, within_text, [start_num])&lt;/code> (不区分大小写)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=FIND(&amp;#34;n&amp;#34;, &amp;#34;Excel&amp;#34;) → 返回 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=SEARCH(&amp;#34;e&amp;#34;, &amp;#34;Excel&amp;#34;) → 返回 1 (不区分大小写)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=FIND(&amp;#34;/&amp;#34;, A1) → 查找A1中&amp;#34;/&amp;#34;的位置
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-concatenate-和--运算符">6. CONCATENATE 和 &amp;amp; 运算符
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：将多个文本字符串合并为一个&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>=CONCATENATE(text1, [text2], ...)&lt;/code>&lt;/li>
&lt;li>&lt;code>=text1 &amp;amp; text2 &amp;amp; ...&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=CONCATENATE(&amp;#34;Hello&amp;#34;, &amp;#34; &amp;#34;, &amp;#34;World&amp;#34;) → 返回 &amp;#34;Hello World&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=A1 &amp;amp; &amp;#34;-&amp;#34; &amp;amp; B1 → 将A1和B1用&amp;#34;-&amp;#34;连接
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="7-trim-函数">7. TRIM 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：删除文本中多余的空格（只保留单词之间的单个空格）&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=TRIM(text)&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=TRIM(&amp;#34; Excel 函数 &amp;#34;) → 返回 &amp;#34;Excel 函数&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-upper-lower-和-proper-函数">8. UPPER, LOWER 和 PROPER 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：转换文本大小写&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>=UPPER(text)&lt;/code> → 全部大写&lt;/li>
&lt;li>&lt;code>=LOWER(text)&lt;/code> → 全部小写&lt;/li>
&lt;li>&lt;code>=PROPER(text)&lt;/code> → 首字母大写&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=UPPER(&amp;#34;excel&amp;#34;) → 返回 &amp;#34;EXCEL&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=PROPER(&amp;#34;john smith&amp;#34;) → 返回 &amp;#34;John Smith&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="9-substitute-函数">9. SUBSTITUTE 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：替换文本中的特定字符串&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=SUBSTITUTE(text, old_text, new_text, [instance_num])&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=SUBSTITUTE(&amp;#34;a-b-c&amp;#34;, &amp;#34;-&amp;#34;, &amp;#34;/&amp;#34;) → 返回 &amp;#34;a/b/c&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=SUBSTITUTE(A1, &amp;#34; &amp;#34;, &amp;#34;&amp;#34;, 1) → 只替换A1中第一个空格
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="10-text-函数">10. TEXT 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：将数值转换为指定格式的文本&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=TEXT(value, format_text)&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=TEXT(1234.567, &amp;#34;$#,##0.00&amp;#34;) → 返回 &amp;#34;$1,234.57&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=TEXT(TODAY(), &amp;#34;yyyy-mm-dd&amp;#34;) → 返回当前日期格式化为&amp;#34;年-月-日&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="11-textjoin-函数-excel-2016">11. TEXTJOIN 函数 (Excel 2016+)
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：使用分隔符连接多个文本字符串，可选择忽略空值&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=TEXTJOIN(delimiter, ignore_empty, text1, [text2], ...)&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=TEXTJOIN(&amp;#34;-&amp;#34;, TRUE, &amp;#34;2023&amp;#34;, &amp;#34;01&amp;#34;, &amp;#34;15&amp;#34;) → 返回 &amp;#34;2023-01-15&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=TEXTJOIN(&amp;#34;,&amp;#34;, FALSE, A1:A5) → 用逗号连接A1到A5的内容
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="12-rept-函数">12. REPT 函数
&lt;/h2>&lt;p>&lt;strong>功能&lt;/strong>：将文本重复指定次数&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>=REPT(text, number_times)&lt;/code>&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=REPT(&amp;#34;*&amp;#34;, 5) → 返回 &amp;#34;*****&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=REPT(&amp;#34;-&amp;#34;, LEN(A1)) → 返回与A1内容长度相同的横线
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实际应用示例">实际应用示例
&lt;/h2>&lt;p>&lt;strong>示例1：从完整姓名中提取姓氏和名字&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>A1: &amp;#34;张 三&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=LEFT(A1, FIND(&amp;#34; &amp;#34;, A1)-1) → 返回 &amp;#34;张&amp;#34; (姓氏)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=MID(A1, FIND(&amp;#34; &amp;#34;, A1)+1, LEN(A1)) → 返回 &amp;#34;三&amp;#34; (名字)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>示例2：格式化电话号码&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>A1: &amp;#34;13812345678&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=CONCATENATE(LEFT(A1,3), &amp;#34;-&amp;#34;, MID(A1,4,4), &amp;#34;-&amp;#34;, RIGHT(A1,4)) → 返回 &amp;#34;138-1234-5678&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>示例3：清理不规范的文本数据&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>A1: &amp;#34; Excel 函数 &amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=TRIM(A1) → 返回 &amp;#34;Excel 函数&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>=PROPER(TRIM(A1)) → 返回 &amp;#34;Excel 函数&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些字符串函数可以单独使用，也可以组合使用来解决复杂的数据处理问题。&lt;/p></description></item><item><title>简单了解 Excel 公式</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-excel-%E5%85%AC%E5%BC%8F/</link><pubDate>Tue, 01 Jul 2025 19:24:40 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-excel-%E5%85%AC%E5%BC%8F/</guid><description>&lt;img src="https://muo123.github.io/images/Excel%E5%85%AC%E5%BC%8F.png" alt="Featured image of post 简单了解 Excel 公式" />&lt;p>Excel 公式是用于计算、分析和处理数据的核心工具，由函数、运算符、单元格引用等组成。以下是详细分类和示例：&lt;/p>
&lt;hr>
&lt;h3 id="一公式基础结构">&lt;strong>一、公式基础结构&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>格式&lt;/strong>：以等号 &lt;code>=&lt;/code> 开头，例如 &lt;code>=A1+B1&lt;/code>。&lt;/li>
&lt;li>&lt;strong>运算符&lt;/strong>：
&lt;ul>
&lt;li>算术：&lt;code>+&lt;/code>, &lt;code>-&lt;/code>, &lt;code>*&lt;/code>, &lt;code>/&lt;/code>, &lt;code>^&lt;/code>（幂）&lt;/li>
&lt;li>比较：&lt;code>=&lt;/code>, &lt;code>&amp;gt;&lt;/code>, &lt;code>&amp;lt;&lt;/code>, &lt;code>&amp;lt;&amp;gt;&lt;/code>（不等于）&lt;/li>
&lt;li>文本连接：&lt;code>&amp;amp;&lt;/code>（如 &lt;code>=A1&amp;amp;&amp;quot; &amp;quot;&amp;amp;B1&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="二常用函数及示例">&lt;strong>二、常用函数及示例&lt;/strong>
&lt;/h3>&lt;h4 id="1-数学与统计">1. &lt;strong>数学与统计&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>SUM&lt;/strong>：求和&lt;br>
&lt;code>=SUM(A1:A10)&lt;/code> → 计算A1到A10的和。&lt;/li>
&lt;li>&lt;strong>AVERAGE&lt;/strong>：平均值&lt;br>
&lt;code>=AVERAGE(B2:B20)&lt;/code> → B2到B20的平均值。&lt;/li>
&lt;li>&lt;strong>COUNT&lt;/strong> / &lt;strong>COUNTA&lt;/strong>：计数&lt;br>
&lt;code>=COUNT(A1:A10)&lt;/code> → 统计数字单元格数量。&lt;/li>
&lt;/ul>
&lt;h4 id="2-逻辑函数">2. &lt;strong>逻辑函数&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>IF&lt;/strong>：条件判断&lt;br>
&lt;code>=IF(C1&amp;gt;60, &amp;quot;及格&amp;quot;, &amp;quot;不及格&amp;quot;)&lt;/code> → 若C1&amp;gt;60返回“及格”。&lt;/li>
&lt;li>&lt;strong>AND/OR&lt;/strong>：多条件判断&lt;br>
&lt;code>=IF(AND(A1&amp;gt;50, B1&amp;lt;100), &amp;quot;合格&amp;quot;, &amp;quot;&amp;quot;)&lt;/code> → 同时满足A1&amp;gt;50和B1&amp;lt;100时返回“合格”。&lt;/li>
&lt;/ul>
&lt;h4 id="3-文本处理">3. &lt;strong>文本处理&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>CONCATENATE&lt;/strong>（或&lt;code>&amp;amp;&lt;/code>）：文本合并&lt;br>
&lt;code>=A1&amp;amp;&amp;quot;-&amp;quot;&amp;amp;B1&lt;/code> → 合并A1和B1，用“-”连接。&lt;/li>
&lt;li>&lt;strong>LEFT/RIGHT/MID&lt;/strong>：截取文本&lt;br>
&lt;code>=LEFT(A1, 3)&lt;/code> → 取A1左侧3个字符。&lt;/li>
&lt;/ul>
&lt;h4 id="4-日期与时间">4. &lt;strong>日期与时间&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>TODAY/NOW&lt;/strong>：当前日期/时间&lt;br>
&lt;code>=TODAY()&lt;/code> → 返回当前日期。&lt;/li>
&lt;li>&lt;strong>DATEDIF&lt;/strong>：日期差&lt;br>
&lt;code>=DATEDIF(A1, B1, &amp;quot;d&amp;quot;)&lt;/code> → 计算A1和B1之间的天数。&lt;/li>
&lt;/ul>
&lt;h4 id="5-查找与引用">5. &lt;strong>查找与引用&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>VLOOKUP&lt;/strong>：垂直查找&lt;br>
&lt;code>=VLOOKUP(&amp;quot;苹果&amp;quot;, A1:B10, 2, FALSE)&lt;/code> → 在A1:B10区域查找“苹果”并返回对应B列值。&lt;/li>
&lt;li>&lt;strong>INDEX+MATCH&lt;/strong>：灵活查找&lt;br>
&lt;code>=INDEX(B1:B10, MATCH(&amp;quot;苹果&amp;quot;, A1:A10, 0))&lt;/code> → 效果类似VLOOKUP但更灵活。&lt;/li>
&lt;/ul>
&lt;h4 id="6-数组公式需按-ctrlshiftenter">6. &lt;strong>数组公式&lt;/strong>（需按 &lt;code>Ctrl+Shift+Enter&lt;/code>）
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>SUMIFS&lt;/strong>：多条件求和&lt;br>
&lt;code>=SUMIFS(C1:C10, A1:A10, &amp;quot;&amp;gt;50&amp;quot;, B1:B10, &amp;quot;&amp;lt;100&amp;quot;)&lt;/code> → 对A列&amp;gt;50且B列&amp;lt;100的C列求和。&lt;/li>
&lt;li>&lt;strong>SUMPRODUCT&lt;/strong>：加权求和&lt;br>
&lt;code>=SUMPRODUCT(A1:A10, B1:B10)&lt;/code> → A1:A10与B1:B10对应相乘后求和。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="三高级应用示例">&lt;strong>三、高级应用示例&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>嵌套IF&lt;/strong>：多条件判断
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=IF(A1&amp;gt;90, &amp;#34;优&amp;#34;, IF(A1&amp;gt;60, &amp;#34;良&amp;#34;, &amp;#34;差&amp;#34;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>动态求和&lt;/strong>（INDIRECT）：跨表引用&lt;br>
&lt;code>=SUM(INDIRECT(&amp;quot;Sheet2!A1:A10&amp;quot;))&lt;/code> → 汇总Sheet2的A1:A10。&lt;/li>
&lt;li>&lt;strong>条件格式公式&lt;/strong>：标记高于平均的值&lt;br>
&lt;code>=A1&amp;gt;AVERAGE(A$1:A$10)&lt;/code> → 应用于A1:A10的条件格式规则。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="四注意事项">&lt;strong>四、注意事项&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>相对/绝对引用&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>A1&lt;/code>（相对引用）：公式拖动时行列会变。&lt;/li>
&lt;li>&lt;code>$A$1&lt;/code>（绝对引用）：固定引用A1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>错误处理&lt;/strong>：
&lt;ul>
&lt;li>使用 &lt;code>IFERROR&lt;/code> 屏蔽错误：&lt;br>
&lt;code>=IFERROR(VLOOKUP(...), &amp;quot;未找到&amp;quot;)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="五实际案例">&lt;strong>五、实际案例&lt;/strong>
&lt;/h3>&lt;p>&lt;strong>场景&lt;/strong>：统计销售表中“产品A”在2023年的总销售额。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>=SUMIFS(Sales_Amount, Product_Column, &amp;#34;产品A&amp;#34;, Date_Column, &amp;#34;&amp;gt;=2023-1-1&amp;#34;, Date_Column, &amp;#34;&amp;lt;=2023-12-31&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>通过灵活组合函数和引用，Excel公式能解决从简单计算到复杂数据分析的各种需求。&lt;/p></description></item><item><title>OGSM 组织管理方式详解</title><link>https://muo123.github.io/articles/ogsm-%E7%BB%84%E7%BB%87%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 01 Jul 2025 19:17:46 +0800</pubDate><guid>https://muo123.github.io/articles/ogsm-%E7%BB%84%E7%BB%87%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/</guid><description>&lt;img src="https://muo123.github.io/images/OGSM.png" alt="Featured image of post OGSM 组织管理方式详解" />&lt;h1 id="ogsm组织管理方式详解">OGSM组织管理方式详解
&lt;/h1>&lt;p>OGSM（Objectives, Goals, Strategies, Measures）是一种结构化、系统化的战略规划与执行管理工具，广泛应用于企业战略管理和组织绩效管理。下面我将详细介绍OGSM的各个模块，并提供相应示例。&lt;/p>
&lt;h2 id="一ogsm概述">一、OGSM概述
&lt;/h2>&lt;p>OGSM是一种将组织的愿景转化为可执行计划的框架，它通过四个关键要素将战略与执行紧密连接：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Objectives（目标）&lt;/strong>：组织的长期愿景和方向&lt;/li>
&lt;li>&lt;strong>Goals（具体目标）&lt;/strong>：可量化的短期目标&lt;/li>
&lt;li>&lt;strong>Strategies（策略）&lt;/strong>：实现目标的方法和路径&lt;/li>
&lt;li>&lt;strong>Measures（衡量指标）&lt;/strong>：跟踪进展的关键绩效指标&lt;/li>
&lt;/ol>
&lt;h2 id="二ogsm各模块详解">二、OGSM各模块详解
&lt;/h2>&lt;h3 id="1-objectives目标">1. Objectives（目标）
&lt;/h3>&lt;p>&lt;strong>定义&lt;/strong>：组织的长期（通常3-5年）战略方向和愿景，是定性描述。&lt;/p>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>具有启发性&lt;/li>
&lt;li>简洁明了（通常1-2句话）&lt;/li>
&lt;li>与组织使命和愿景一致&lt;/li>
&lt;li>不包含具体数字&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>消费品公司：&amp;ldquo;成为亚洲领先的健康食品品牌&amp;rdquo;&lt;/li>
&lt;li>科技公司：&amp;ldquo;打造全球最值得信赖的人工智能解决方案提供商&amp;rdquo;&lt;/li>
&lt;li>零售企业：&amp;ldquo;重新定义顾客的购物体验&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h3 id="2-goals具体目标">2. Goals（具体目标）
&lt;/h3>&lt;p>&lt;strong>定义&lt;/strong>：支持Objectives达成的具体、可量化的短期（通常1年）目标。&lt;/p>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>SMART原则（具体、可衡量、可实现、相关性、时限性）&lt;/li>
&lt;li>通常3-5个关键目标&lt;/li>
&lt;li>涵盖财务和非财务指标&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：
针对&amp;quot;成为亚洲领先的健康食品品牌&amp;quot;这一Objective，Goals可能是：&lt;/p>
&lt;ol>
&lt;li>2023年亚洲市场份额达到15%（目前10%）&lt;/li>
&lt;li>产品复购率提升至40%（目前30%）&lt;/li>
&lt;li>品牌健康度指数达到80分（目前70分）&lt;/li>
&lt;li>推出5款符合亚洲消费者需求的新产品&lt;/li>
&lt;/ol>
&lt;h3 id="3-strategies策略">3. Strategies（策略）
&lt;/h3>&lt;p>&lt;strong>定义&lt;/strong>：为实现Goals而采取的关键方法和路径。&lt;/p>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通常3-5个主要策略&lt;/li>
&lt;li>回答&amp;quot;如何实现&amp;quot;的问题&lt;/li>
&lt;li>聚焦关键杠杆点&lt;/li>
&lt;li>避免过于战术性的描述&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：
针对上述Goals，Strategies可能是：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>产品创新&lt;/strong>：建立亚洲消费者洞察团队，开发符合本地口味和健康需求的产品&lt;/li>
&lt;li>&lt;strong>渠道拓展&lt;/strong>：与亚洲主要电商平台建立战略合作，扩大线上分销&lt;/li>
&lt;li>&lt;strong>品牌建设&lt;/strong>：开展以&amp;quot;亚洲健康饮食文化&amp;quot;为主题的整合营销活动&lt;/li>
&lt;li>&lt;strong>供应链优化&lt;/strong>：在东南亚建立区域生产基地，缩短交货周期&lt;/li>
&lt;/ol>
&lt;h3 id="4-measures衡量指标">4. Measures（衡量指标）
&lt;/h3>&lt;p>&lt;strong>定义&lt;/strong>：用于监控各Strategy执行效果的关键绩效指标。&lt;/p>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>每个Strategy对应1-3个Measure&lt;/li>
&lt;li>明确目标值和数据来源&lt;/li>
&lt;li>包含领先指标和滞后指标&lt;/li>
&lt;li>定期（通常月度/季度）回顾&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例&lt;/strong>：
针对上述Strategies，Measures可能是：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>策略&lt;/th>
&lt;th>衡量指标&lt;/th>
&lt;th>目标值&lt;/th>
&lt;th>数据来源&lt;/th>
&lt;th>回顾频率&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>产品创新&lt;/td>
&lt;td>新产品贡献率&lt;/td>
&lt;td>25%&lt;/td>
&lt;td>销售系统&lt;/td>
&lt;td>季度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>产品概念测试通过率&lt;/td>
&lt;td>80%&lt;/td>
&lt;td>市场调研&lt;/td>
&lt;td>月度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>渠道拓展&lt;/td>
&lt;td>电商渠道销售额占比&lt;/td>
&lt;td>40%&lt;/td>
&lt;td>销售报告&lt;/td>
&lt;td>月度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>新开发分销商数量&lt;/td>
&lt;td>50家&lt;/td>
&lt;td>销售部门记录&lt;/td>
&lt;td>季度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>品牌建设&lt;/td>
&lt;td>品牌认知度&lt;/td>
&lt;td>+15%&lt;/td>
&lt;td>品牌跟踪研究&lt;/td>
&lt;td>半年&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>社交媒体互动率&lt;/td>
&lt;td>5%&lt;/td>
&lt;td>社交媒体平台&lt;/td>
&lt;td>月度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>供应链优化&lt;/td>
&lt;td>平均交货周期&lt;/td>
&lt;td>缩短20%&lt;/td>
&lt;td>物流系统&lt;/td>
&lt;td>月度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>区域采购比例&lt;/td>
&lt;td>60%&lt;/td>
&lt;td>采购部门报告&lt;/td>
&lt;td>季度&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="三ogsm实施流程">三、OGSM实施流程
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>制定阶段&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>高层确定Objectives&lt;/li>
&lt;li>跨部门协作制定Goals&lt;/li>
&lt;li>各职能部门提出Strategies&lt;/li>
&lt;li>确定Measures和数据收集机制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分解阶段&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将公司级OGSM分解为部门级OGSM&lt;/li>
&lt;li>部门OGSM再分解为个人绩效目标&lt;/li>
&lt;li>确保纵向对齐和横向协同&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>执行阶段&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>制定详细的行动计划&lt;/li>
&lt;li>分配资源和责任&lt;/li>
&lt;li>建立定期回顾机制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>回顾阶段&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定期（月度/季度）评估进展&lt;/li>
&lt;li>分析偏差原因&lt;/li>
&lt;li>调整策略或行动计划&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="四ogsm完整示例某快消品公司">四、OGSM完整示例（某快消品公司）
&lt;/h2>&lt;p>&lt;strong>Objective&lt;/strong>：成为亚洲领先的健康食品品牌&lt;/p>
&lt;p>&lt;strong>Goals&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>2023年亚洲市场份额达到15%（目前10%）&lt;/li>
&lt;li>产品复购率提升至40%（目前30%）&lt;/li>
&lt;li>品牌健康度指数达到80分（目前70分）&lt;/li>
&lt;li>推出5款符合亚洲消费者需求的新产品&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Strategies &amp;amp; Measures&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>产品创新&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Measure 1：新产品贡献率 - 25%&lt;/li>
&lt;li>Measure 2：产品概念测试通过率 - 80%&lt;/li>
&lt;li>Measure 3：新产品上市成功率 - 70%&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>渠道拓展&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Measure 1：电商渠道销售额占比 - 40%&lt;/li>
&lt;li>Measure 2：新开发分销商数量 - 50家&lt;/li>
&lt;li>Measure 3：重点城市铺货率 - 90%&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>品牌建设&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Measure 1：品牌认知度提升 - +15%&lt;/li>
&lt;li>Measure 2：社交媒体互动率 - 5%&lt;/li>
&lt;li>Measure 3：品牌推荐率 - 30%&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>供应链优化&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Measure 1：平均交货周期缩短 - 20%&lt;/li>
&lt;li>Measure 2：区域采购比例 - 60%&lt;/li>
&lt;li>Measure 3：库存周转率提升 - 15%&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="五ogsm的优势">五、OGSM的优势
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>战略聚焦&lt;/strong>：帮助组织集中资源于最关键的目标&lt;/li>
&lt;li>&lt;strong>对齐一致&lt;/strong>：确保各层级目标与公司战略一致&lt;/li>
&lt;li>&lt;strong>可衡量性&lt;/strong>：将定性目标转化为可衡量的指标&lt;/li>
&lt;li>&lt;strong>执行力提升&lt;/strong>：明确策略与行动计划的连接&lt;/li>
&lt;li>&lt;strong>透明沟通&lt;/strong>：为组织提供共同的战略语言&lt;/li>
&lt;/ol>
&lt;h2 id="六ogsm成功实施的关键因素">六、OGSM成功实施的关键因素
&lt;/h2>&lt;ol>
&lt;li>高层领导的承诺和参与&lt;/li>
&lt;li>跨职能部门的协作&lt;/li>
&lt;li>与预算和资源分配的衔接&lt;/li>
&lt;li>定期的进度回顾和灵活调整&lt;/li>
&lt;li>简单易用的可视化工具&lt;/li>
&lt;li>与绩效管理系统的整合&lt;/li>
&lt;/ol>
&lt;p>通过系统化地应用OGSM框架，组织能够更有效地将战略转化为可执行的行动计划，并在实施过程中保持战略的一致性和灵活性。&lt;/p></description></item><item><title>二进制 1 的个数 C++ 实现</title><link>https://muo123.github.io/articles/%E4%BA%8C%E8%BF%9B%E5%88%B6-1-%E7%9A%84%E4%B8%AA%E6%95%B0-c-%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 27 Jun 2025 21:23:57 +0800</pubDate><guid>https://muo123.github.io/articles/%E4%BA%8C%E8%BF%9B%E5%88%B6-1-%E7%9A%84%E4%B8%AA%E6%95%B0-c-%E5%AE%9E%E7%8E%B0/</guid><description>&lt;h3 id="题目">题目
&lt;/h3>&lt;p>&lt;strong>题目名称&lt;/strong>：二进制中1的个数&lt;br>
&lt;strong>题目描述&lt;/strong>：&lt;br>
给定若干个整数（可能包含正数、负数和零），计算每个整数在32位二进制补码表示中1的个数。输入包含多组测试数据，每行一个整数，输出对应整数的二进制中1的个数。&lt;/p>
&lt;h3 id="算法思路">算法思路
&lt;/h3>&lt;p>&lt;strong>核心算法&lt;/strong>：&lt;code>x = x &amp;amp; (x - 1)&lt;/code>&lt;br>
该操作会将整数 &lt;code>x&lt;/code> 的最低位1置为0，其他位保持不变。重复此操作直到 &lt;code>x&lt;/code> 变为0，操作次数即为1的个数。&lt;/p>
&lt;p>&lt;strong>算法步骤&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>初始化计数器 &lt;code>cnt = 0&lt;/code>。&lt;/li>
&lt;li>当 &lt;code>x ≠ 0&lt;/code> 时循环：
&lt;ul>
&lt;li>&lt;code>cnt++&lt;/code>&lt;/li>
&lt;li>执行 &lt;code>x &amp;amp;= (x - 1)&lt;/code>（等价于 &lt;code>x = x &amp;amp; (x - 1)&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>返回 &lt;code>cnt&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>算法优势&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>高效性&lt;/strong>：循环次数 = 1的个数（时间复杂度 O(k)，k为1的个数）。&lt;/li>
&lt;li>&lt;strong>通用性&lt;/strong>：直接处理负数（利用补码特性），无需额外转换。&lt;/li>
&lt;li>&lt;strong>简洁性&lt;/strong>：代码简洁，无复杂边界判断。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>关键原理&lt;/strong>（以8位整数为例）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作步骤&lt;/th>
&lt;th>x（十进制）&lt;/th>
&lt;th>x（二进制）&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>初始值&lt;/td>
&lt;td>-2&lt;/td>
&lt;td>&lt;code>11111110&lt;/code>&lt;/td>
&lt;td>最低位1在倒数第2位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x &amp;amp;= (x-1)&lt;/code>&lt;/td>
&lt;td>-4&lt;/td>
&lt;td>&lt;code>11111100&lt;/code>&lt;/td>
&lt;td>清除最低位1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x &amp;amp;= (x-1)&lt;/code>&lt;/td>
&lt;td>-8&lt;/td>
&lt;td>&lt;code>11111000&lt;/code>&lt;/td>
&lt;td>清除下一个最低位1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;继续直到 &lt;code>x=0&lt;/code>&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>共清除31次（32位系统）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="样例测试">样例测试
&lt;/h3>&lt;h4 id="样例1正数">样例1：正数
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>输入&lt;/strong>：&lt;code>5&lt;/code>（二进制 &lt;code>0000...0101&lt;/code>）&lt;br>
&lt;strong>输出&lt;/strong>：&lt;code>2&lt;/code>&lt;br>
&lt;strong>步骤&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>x=5 (0000...0101) -&amp;gt; cnt=1, x=5&amp;amp;4=4 (0000...0100)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x=4 (0000...0100) -&amp;gt; cnt=2, x=4&amp;amp;3=0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>返回2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="样例2负数">样例2：负数
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>输入&lt;/strong>：&lt;code>-1&lt;/code>（二进制 &lt;code>1111...1111&lt;/code>）&lt;br>
&lt;strong>输出&lt;/strong>：&lt;code>32&lt;/code>（32位系统）&lt;br>
&lt;strong>步骤&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>需执行32次 x &amp;amp;= (x-1) 才变为0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="样例3零">样例3：零
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>输入&lt;/strong>：&lt;code>0&lt;/code>（二进制 &lt;code>0000...0000&lt;/code>）&lt;br>
&lt;strong>输出&lt;/strong>：&lt;code>0&lt;/code>&lt;br>
&lt;strong>步骤&lt;/strong>：直接跳过循环。&lt;/li>
&lt;/ul>
&lt;h4 id="样例4边界值">样例4：边界值
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>输入&lt;/strong>：&lt;code>2147483647&lt;/code>（&lt;code>INT_MAX&lt;/code>，二进制 &lt;code>0111...1111&lt;/code>）&lt;br>
&lt;strong>输出&lt;/strong>：&lt;code>31&lt;/code>&lt;/li>
&lt;li>&lt;strong>输入&lt;/strong>：&lt;code>-2147483648&lt;/code>（&lt;code>INT_MIN&lt;/code>，二进制 &lt;code>1000...0000&lt;/code>）&lt;br>
&lt;strong>输出&lt;/strong>：&lt;code>1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="代码说明">代码说明
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">using&lt;/span> &lt;span style="color:#ff6ac1">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">bit_count&lt;/span>(&lt;span style="color:#9aedfe">int&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">int&lt;/span> cnt &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">while&lt;/span> (x) { &lt;span style="color:#78787e">// 当x非0时循环
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> cnt&lt;span style="color:#ff6ac1">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff6ac1">&amp;amp;=&lt;/span> (x &lt;span style="color:#ff6ac1">-&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>); &lt;span style="color:#78787e">// 清除最低位的1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> cnt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">int&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">while&lt;/span> (cin &lt;span style="color:#ff6ac1">&amp;gt;&amp;gt;&lt;/span> n) { &lt;span style="color:#78787e">// 循环读取多组输入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> bit_count(n) &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关键点解释&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>负数处理&lt;/strong>：&lt;br>
计算机中负数用补码表示，&lt;code>x - 1&lt;/code> 会从最低位1开始“借位”（如 &lt;code>11111110 → 11111101&lt;/code>），&lt;code>x &amp;amp; (x - 1)&lt;/code> 能正确清除最低位1。&lt;/li>
&lt;li>&lt;strong>循环终止&lt;/strong>：&lt;br>
当所有1被清除后，&lt;code>x&lt;/code> 变为0，循环结束。&lt;/li>
&lt;li>&lt;strong>时间复杂度&lt;/strong>：&lt;br>
最优 O(1)（如 &lt;code>x=0&lt;/code>），最坏 O(32)（如 &lt;code>x=-1&lt;/code>），平均高效。&lt;/li>
&lt;/ol>
&lt;h3 id="总结">总结
&lt;/h3>&lt;p>该算法以简洁高效的方式解决了二进制中1的计数问题，巧妙利用位运算特性，统一处理正负数，适合嵌入式系统或高性能场景。&lt;/p></description></item><item><title>C++ 输入输出</title><link>https://muo123.github.io/articles/c-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link><pubDate>Wed, 25 Jun 2025 20:47:13 +0800</pubDate><guid>https://muo123.github.io/articles/c-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid><description>&lt;img src="https://muo123.github.io/images/C++%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.png" alt="Featured image of post C++ 输入输出" />&lt;p>在 C++ 中，输入输出（I/O）主要通过标准库 &lt;code>&amp;lt;iostream&amp;gt;&lt;/code> 和相关库实现。以下是详细说明及对比分析：&lt;/p>
&lt;hr>
&lt;h3 id="一核心组件">&lt;strong>一、核心组件&lt;/strong>
&lt;/h3>&lt;h4 id="1-标准流对象">1. &lt;strong>标准流对象&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>&lt;code>cin&lt;/code>&lt;/strong>：标准输入流（&lt;code>istream&lt;/code> 类型），通常关联键盘。&lt;/li>
&lt;li>&lt;strong>&lt;code>cout&lt;/code>&lt;/strong>：标准输出流（&lt;code>ostream&lt;/code> 类型），通常关联屏幕。&lt;/li>
&lt;li>&lt;strong>&lt;code>cerr&lt;/code>&lt;/strong>：无缓冲的错误输出流，立即显示错误信息。&lt;/li>
&lt;li>&lt;strong>&lt;code>clog&lt;/code>&lt;/strong>：带缓冲的错误输出流（效率更高）。&lt;/li>
&lt;/ul>
&lt;h4 id="2-操作符">2. &lt;strong>操作符&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/strong>：插入运算符（输出），如 &lt;code>cout &amp;lt;&amp;lt; data&lt;/code>。&lt;/li>
&lt;li>&lt;strong>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/strong>：提取运算符（输入），如 &lt;code>cin &amp;gt;&amp;gt; variable&lt;/code>。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="二基本-io-操作">&lt;strong>二、基本 I/O 操作&lt;/strong>
&lt;/h3>&lt;h4 id="1-输出示例">1. &lt;strong>输出示例&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">int&lt;/span> num &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Value: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> num &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 输出字符串和变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cerr &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Error message!&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 错误输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-输入示例">2. &lt;strong>输入示例&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">int&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Enter your age: &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>cin &lt;span style="color:#ff6ac1">&amp;gt;&amp;gt;&lt;/span> age; &lt;span style="color:#78787e">// 从键盘读取整数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Age: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> age &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="三格式化-io">&lt;strong>三、格式化 I/O&lt;/strong>
&lt;/h3>&lt;p>使用 &lt;code>&amp;lt;iomanip&amp;gt;&lt;/code> 库控制格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iomanip&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">double&lt;/span> pi &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">3.1415926535&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 设置精度为2位小数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>fixed &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>setprecision(&lt;span style="color:#ff9f43">2&lt;/span>) &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> pi &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 输出 3.14
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#78787e">// 设置宽度为10字符，右对齐
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>setw(&lt;span style="color:#ff9f43">10&lt;/span>) &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="四文件-io">&lt;strong>四、文件 I/O&lt;/strong>
&lt;/h3>&lt;p>使用 &lt;code>&amp;lt;fstream&amp;gt;&lt;/code> 库操作文件：&lt;/p>
&lt;h4 id="1-写入文件">1. &lt;strong>写入文件&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;fstream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>ofstream outfile(&lt;span style="color:#5af78e">&amp;#34;data.txt&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outfile &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Hello, File!&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 写入数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> outfile.close();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-读取文件">2. &lt;strong>读取文件&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;fstream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>ifstream infile(&lt;span style="color:#5af78e">&amp;#34;data.txt&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>string line;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">while&lt;/span> (std&lt;span style="color:#ff6ac1">::&lt;/span>getline(infile, line)) { &lt;span style="color:#78787e">// 逐行读取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> line &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infile.close();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="五字符串流">&lt;strong>五、字符串流&lt;/strong>
&lt;/h3>&lt;p>使用 &lt;code>&amp;lt;sstream&amp;gt;&lt;/code> 处理字符串：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;sstream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>stringstream ss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Price: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ff9f43">99.9&lt;/span>; &lt;span style="color:#78787e">// 写入字符串流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>string data &lt;span style="color:#ff6ac1">=&lt;/span> ss.str(); &lt;span style="color:#78787e">// 转换为字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> data &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;&lt;/span>&lt;span style="color:#5af78e">\n&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>; &lt;span style="color:#78787e">// 输出 &amp;#34;Price: 99.9&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="六对比分析">&lt;strong>六、对比分析&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>特性&lt;/strong>&lt;/th>
&lt;th>&lt;strong>控制台 I/O&lt;/strong> (&lt;code>cin&lt;/code>/&lt;code>cout&lt;/code>)&lt;/th>
&lt;th>&lt;strong>文件 I/O&lt;/strong> (&lt;code>fstream&lt;/code>)&lt;/th>
&lt;th>&lt;strong>字符串流&lt;/strong> (&lt;code>sstream&lt;/code>)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>用途&lt;/strong>&lt;/td>
&lt;td>用户交互&lt;/td>
&lt;td>读写磁盘文件&lt;/td>
&lt;td>内存字符串处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>速度&lt;/strong>&lt;/td>
&lt;td>中等&lt;/td>
&lt;td>较慢（涉及磁盘操作）&lt;/td>
&lt;td>快速（内存操作）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>缓冲机制&lt;/strong>&lt;/td>
&lt;td>有缓冲（&lt;code>cout&lt;/code> 可刷新）&lt;/td>
&lt;td>可控制缓冲&lt;/td>
&lt;td>无外部缓冲&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>错误处理&lt;/strong>&lt;/td>
&lt;td>&lt;code>cin.fail()&lt;/code> 检查输入错误&lt;/td>
&lt;td>&lt;code>is_open()&lt;/code> 检查文件状态&lt;/td>
&lt;td>类似标准流&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>适用场景&lt;/strong>&lt;/td>
&lt;td>简单输入/输出&lt;/td>
&lt;td>持久化存储&lt;/td>
&lt;td>字符串解析/格式化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>头文件&lt;/strong>&lt;/td>
&lt;td>&lt;code>&amp;lt;iostream&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;fstream&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;sstream&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="七关键注意事项">&lt;strong>七、关键注意事项&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>输入验证&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> num;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">while&lt;/span> (&lt;span style="color:#ff6ac1">!&lt;/span>(std&lt;span style="color:#ff6ac1">::&lt;/span>cin &lt;span style="color:#ff6ac1">&amp;gt;&amp;gt;&lt;/span> num)) { &lt;span style="color:#78787e">// 检查输入是否有效
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cin.clear(); &lt;span style="color:#78787e">// 清除错误标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cin.ignore(&lt;span style="color:#ff9f43">1000&lt;/span>, &lt;span style="color:#5af78e">&amp;#39;\n&amp;#39;&lt;/span>); &lt;span style="color:#78787e">// 忽略错误输入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Invalid input! Try again: &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓冲机制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>cout&lt;/code> 默认缓冲，使用 &lt;code>std::endl&lt;/code> 刷新缓冲区（如 &lt;code>cout &amp;lt;&amp;lt; &amp;quot;Hi&amp;quot; &amp;lt;&amp;lt; endl&lt;/code>）。&lt;/li>
&lt;li>&lt;code>cerr&lt;/code> 无缓冲，立即输出（适合错误信息）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>减少 &lt;code>endl&lt;/code> 使用（频繁刷新降低性能），用 &lt;code>'\n'&lt;/code> 替代。&lt;/li>
&lt;li>文件 I/O 比内存操作慢，避免频繁开关文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="八总结">&lt;strong>八、总结&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>控制台 I/O&lt;/strong>：适合交互式程序。&lt;/li>
&lt;li>&lt;strong>文件 I/O&lt;/strong>：适合数据持久化。&lt;/li>
&lt;li>&lt;strong>字符串流&lt;/strong>：高效处理字符串格式转换。&lt;/li>
&lt;li>&lt;strong>选择建议&lt;/strong>：
&lt;ul>
&lt;li>简单交互 → &lt;code>cin&lt;/code>/&lt;code>cout&lt;/code>。&lt;/li>
&lt;li>读写文件 → &lt;code>fstream&lt;/code>。&lt;/li>
&lt;li>复杂字符串处理 → &lt;code>sstream&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过灵活组合这些工具，可高效处理 C++ 中的各类 I/O 需求。&lt;/p></description></item><item><title>C++智能指针</title><link>https://muo123.github.io/articles/c-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Tue, 24 Jun 2025 20:44:29 +0800</pubDate><guid>https://muo123.github.io/articles/c-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>&lt;h3 id="c-智能指针详解">C++ 智能指针详解
&lt;/h3>&lt;p>C++ 智能指针是管理动态内存的现代化工具，通过自动内存释放避免内存泄漏。它们定义在 &lt;code>&amp;lt;memory&amp;gt;&lt;/code> 头文件中，遵循 RAII（资源获取即初始化）原则。以下是三种主要智能指针的详细说明和代码示例：&lt;/p>
&lt;hr>
&lt;h4 id="1-stdunique_ptr独占所有权指针">1. &lt;code>std::unique_ptr&lt;/code>（独占所有权指针）
&lt;/h4>&lt;p>&lt;code>std::unique_ptr&lt;/code>是一种独占所有权的智能指针。同一时间只能有一个&lt;code>unique_ptr&lt;/code>指向一个给定的对象。当&lt;code>unique_ptr&lt;/code>被销毁（例如离开作用域）时，它所指向的对象也会被自动删除。
&lt;strong>特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>独占资源所有权（不可复制）&lt;/li>
&lt;li>支持移动语义（所有权可转移）&lt;/li>
&lt;li>可管理数组（&lt;code>unique_ptr&amp;lt;T[]&amp;gt;&lt;/code>）&lt;/li>
&lt;li>自定义删除器支持&lt;/li>
&lt;li>零运行时开销（与裸指针性能相当）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>代码示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">using&lt;/span> &lt;span style="color:#ff6ac1">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 创建 unique_ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> unique_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> ptr1(&lt;span style="color:#ff6ac1">new&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span>(&lt;span style="color:#ff9f43">42&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ff6ac1">*&lt;/span>ptr1 &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: 42
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 移动所有权（转移后 ptr1 为空）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> unique_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> ptr2 &lt;span style="color:#ff6ac1">=&lt;/span> move(ptr1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> (ptr1 &lt;span style="color:#ff6ac1">?&lt;/span> &lt;span style="color:#5af78e">&amp;#34;非空&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#5af78e">&amp;#34;空&amp;#34;&lt;/span>) &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: 空
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 管理数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> unique_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span>[]&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> arr(&lt;span style="color:#ff6ac1">new&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span>[&lt;span style="color:#ff9f43">3&lt;/span>]{&lt;span style="color:#ff9f43">1&lt;/span>, &lt;span style="color:#ff9f43">2&lt;/span>, &lt;span style="color:#ff9f43">3&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> arr[&lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 自定义删除器（示例：文件指针）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">auto&lt;/span> fileDeleter &lt;span style="color:#ff6ac1">=&lt;/span> [](FILE&lt;span style="color:#ff6ac1">*&lt;/span> f) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span>(f) fclose(f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;文件已关闭&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unique_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>FILE, &lt;span style="color:#ff6ac1">decltype&lt;/span>(fileDeleter)&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> filePtr(fopen(&lt;span style="color:#5af78e">&amp;#34;test.txt&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;w&amp;#34;&lt;/span>), fileDeleter);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>; &lt;span style="color:#78787e">// 自动释放所有资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h4 id="2-stdshared_ptr共享所有权指针">2. &lt;code>std::shared_ptr&lt;/code>（共享所有权指针）
&lt;/h4>&lt;p>&lt;code>std::shared_ptr&lt;/code>是一种共享所有权的智能指针。多个&lt;code>shared_ptr&lt;/code>可以指向同一个对象，并通过引用计数来管理对象的生命周期。当最后一个&lt;code>shared_ptr&lt;/code>被销毁时，对象才会被删除。
&lt;strong>特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>多个指针共享同一对象&lt;/li>
&lt;li>基于引用计数（自动归零时销毁对象）&lt;/li>
&lt;li>支持自定义删除器&lt;/li>
&lt;li>线程安全（引用计数原子操作）&lt;/li>
&lt;li>使用 &lt;code>make_shared&lt;/code> 更高效（单次内存分配）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>代码示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">using&lt;/span> &lt;span style="color:#ff6ac1">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">class&lt;/span> &lt;span style="color:#f3f99d">MyClass&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">public&lt;/span>&lt;span style="color:#ff6ac1">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyClass() { cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;构造函数&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">~&lt;/span>MyClass() { cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;析构函数&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">void&lt;/span> &lt;span style="color:#57c7ff">greet&lt;/span>() { cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Hello!&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 推荐创建方式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> shared_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> ptr1 &lt;span style="color:#ff6ac1">=&lt;/span> make_shared&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ptr1&lt;span style="color:#ff6ac1">-&amp;gt;&lt;/span>greet(); &lt;span style="color:#78787e">// 输出: Hello!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 共享所有权（引用计数+1）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> shared_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> ptr2 &lt;span style="color:#ff6ac1">=&lt;/span> ptr1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;引用计数: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> ptr1.use_count() &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> } &lt;span style="color:#78787e">// ptr2 析构，引用计数-1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;引用计数: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> ptr1.use_count() &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 自定义删除器示例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> shared_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> customDel(&lt;span style="color:#ff6ac1">new&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span>[&lt;span style="color:#ff9f43">5&lt;/span>], [](&lt;span style="color:#9aedfe">int&lt;/span>&lt;span style="color:#ff6ac1">*&lt;/span> p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">delete&lt;/span>[] p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;自定义释放数组&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>; &lt;span style="color:#78787e">// 自动释放所有资源（输出析构函数）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h4 id="3-stdweak_ptr弱引用指针">3. &lt;code>std::weak_ptr&lt;/code>（弱引用指针）
&lt;/h4>&lt;p>&lt;code>std::weak_ptr&lt;/code>是一种不控制对象生命周期的智能指针，它指向一个由&lt;code>shared_ptr&lt;/code>管理的对象。&lt;code>weak_ptr&lt;/code>不会增加引用计数，因此它不会影响对象的生命周期。主要用于解决&lt;code>shared_ptr&lt;/code>的循环引用问题。
&lt;strong>特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>解决 &lt;code>shared_ptr&lt;/code> 循环引用问题&lt;/li>
&lt;li>不增加引用计数&lt;/li>
&lt;li>需通过 &lt;code>lock()&lt;/code> 转为 &lt;code>shared_ptr&lt;/code> 访问对象&lt;/li>
&lt;li>检查资源是否有效&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>代码示例（含循环引用解决方案）&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">using&lt;/span> &lt;span style="color:#ff6ac1">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">class&lt;/span> &lt;span style="color:#f3f99d">Node&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">public&lt;/span>&lt;span style="color:#ff6ac1">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> weak_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>Node&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> partner; &lt;span style="color:#78787e">// 关键：使用 weak_ptr 打破循环
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node(string n) &lt;span style="color:#ff6ac1">:&lt;/span> name(move(n)) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">~&lt;/span>Node() { cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> name &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34; 被销毁&amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shared_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>Node&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> alice &lt;span style="color:#ff6ac1">=&lt;/span> make_shared&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>Node&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span>(&lt;span style="color:#5af78e">&amp;#34;Alice&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shared_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>Node&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> bob &lt;span style="color:#ff6ac1">=&lt;/span> make_shared&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>Node&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span>(&lt;span style="color:#5af78e">&amp;#34;Bob&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 建立双向关联（不会导致循环引用）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> alice&lt;span style="color:#ff6ac1">-&amp;gt;&lt;/span>partner &lt;span style="color:#ff6ac1">=&lt;/span> bob;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bob&lt;span style="color:#ff6ac1">-&amp;gt;&lt;/span>partner &lt;span style="color:#ff6ac1">=&lt;/span> alice;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 访问对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">if&lt;/span> (&lt;span style="color:#ff6ac1">auto&lt;/span> ptr &lt;span style="color:#ff6ac1">=&lt;/span> alice&lt;span style="color:#ff6ac1">-&amp;gt;&lt;/span>partner.lock()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Alice 的伙伴: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> ptr&lt;span style="color:#ff6ac1">-&amp;gt;&lt;/span>name &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: Bob
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;Alice 引用计数: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> alice.use_count() &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> endl; &lt;span style="color:#78787e">// 输出: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>; &lt;span style="color:#78787e">// 正确销毁两个对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="关键特性对比表">关键特性对比表
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>&lt;code>unique_ptr&lt;/code>&lt;/th>
&lt;th>&lt;code>shared_ptr&lt;/code>&lt;/th>
&lt;th>&lt;code>weak_ptr&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>所有权&lt;/strong>&lt;/td>
&lt;td>独占&lt;/td>
&lt;td>共享&lt;/td>
&lt;td>无所有权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>复制语义&lt;/strong>&lt;/td>
&lt;td>❌ 禁止&lt;/td>
&lt;td>✅ 允许&lt;/td>
&lt;td>✅ 允许&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>移动语义&lt;/strong>&lt;/td>
&lt;td>✅ 支持&lt;/td>
&lt;td>✅ 支持&lt;/td>
&lt;td>✅ 支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>引用计数&lt;/strong>&lt;/td>
&lt;td>无&lt;/td>
&lt;td>✅ 有&lt;/td>
&lt;td>不增加计数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>释放时机&lt;/strong>&lt;/td>
&lt;td>指针析构时&lt;/td>
&lt;td>引用计数归零时&lt;/td>
&lt;td>不管理释放&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>数组支持&lt;/strong>&lt;/td>
&lt;td>&lt;code>unique_ptr&amp;lt;T[]&amp;gt;&lt;/code>&lt;/td>
&lt;td>需自定义删除器&lt;/td>
&lt;td>❌ 不支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>线程安全&lt;/strong>&lt;/td>
&lt;td>非原子操作&lt;/td>
&lt;td>引用计数原子操作&lt;/td>
&lt;td>依赖关联的 shared_ptr&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>典型用途&lt;/strong>&lt;/td>
&lt;td>独占资源管理&lt;/td>
&lt;td>共享资源&lt;/td>
&lt;td>打破循环引用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="最佳实践">最佳实践
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>优先使用 &lt;code>make_shared&lt;/code>/&lt;code>make_unique&lt;/code>&lt;/strong>（C++14+）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">auto&lt;/span> ptr &lt;span style="color:#ff6ac1">=&lt;/span> make_shared&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span>(); &lt;span style="color:#78787e">// 替代 shared_ptr(new MyClass)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>单次内存分配（提升性能）&lt;/li>
&lt;li>避免裸指针异常导致的内存泄漏&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免混用智能指针和裸指针&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span>&lt;span style="color:#ff6ac1">*&lt;/span> raw &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">new&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span>(&lt;span style="color:#ff9f43">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shared_ptr&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> p1(raw);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// shared_ptr&amp;lt;int&amp;gt; p2(raw); // 灾难性错误：重复释放
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>循环引用解决方案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>weak_ptr&lt;/code> 替代 &lt;code>shared_ptr&lt;/code> 作为非拥有性引用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能敏感场景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>优先使用 &lt;code>unique_ptr&lt;/code>（零开销抽象）&lt;/li>
&lt;li>避免频繁复制 &lt;code>shared_ptr&lt;/code>（原子操作开销）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源释放验证&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在删除器中添加调试输出&lt;/li>
&lt;li>使用 Valgrind 或 AddressSanitizer 检查内存泄漏&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过合理使用智能指针，可消除 90% 以上的内存管理错误，是现代 C++ 资源管理的核心工具。&lt;/p></description></item><item><title>快速排序 C++ 实现</title><link>https://muo123.github.io/articles/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-c-%E5%AE%9E%E7%8E%B0/</link><pubDate>Sun, 22 Jun 2025 19:51:01 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-c-%E5%AE%9E%E7%8E%B0/</guid><description>&lt;p>快速排序（Quick Sort）是一种高效的排序算法，采用分治法（Divide and Conquer）策略。它的基本思想是：选择一个基准元素（pivot），通过一趟排序将待排序的数据分割成独立的两部分，其中一部分的所有元素都比基准元素小，另一部分的所有元素都比基准元素大，然后再按此方法对这两部分数据分别进行快速排序，整个过程递归进行，直到整个数据变成有序序列。&lt;/p>
&lt;h3 id="算法步骤">算法步骤：
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>选择基准（Pivot Selection）&lt;/strong>：从数组中选择一个元素作为基准（pivot）。选择方式有多种，例如可以选择第一个元素、最后一个元素、中间元素或随机元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分区（Partitioning）&lt;/strong>：重新排列数组，使得所有小于基准的元素都放在基准前面，所有大于基准的元素都放在基准后面（相等的数可以到任一边）。在这个分区结束之后，该基准就处于数组的中间位置。这个称为分区操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>递归排序（Recursion）&lt;/strong>：递归地将小于基准元素的子数组和大于基准元素的子数组排序。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="算法实现">算法实现
&lt;/h3>&lt;h4 id="核心思路">核心思路
&lt;/h4>&lt;ol>
&lt;li>&lt;strong>基准选择&lt;/strong>：选择中间元素作为基准值（&lt;code>x = a[l + r &amp;gt;&amp;gt; 1]&lt;/code>）&lt;/li>
&lt;li>&lt;strong>双指针扫描&lt;/strong>：使用左右指针&lt;code>i&lt;/code>和&lt;code>j&lt;/code>分别从两端向中间扫描&lt;/li>
&lt;li>&lt;strong>元素交换&lt;/strong>：交换不符合分区规则的逆序对&lt;/li>
&lt;li>&lt;strong>递归分区&lt;/strong>：将数组分成两个子数组递归处理&lt;/li>
&lt;/ol>
&lt;h4 id="代码逐行解析">代码逐行解析
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">void&lt;/span> &lt;span style="color:#57c7ff">quick_sort&lt;/span>(&lt;span style="color:#9aedfe">int&lt;/span> a[], &lt;span style="color:#9aedfe">int&lt;/span> l, &lt;span style="color:#9aedfe">int&lt;/span> r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span>(l &lt;span style="color:#ff6ac1">&amp;gt;=&lt;/span> r) &lt;span style="color:#ff6ac1">return&lt;/span>; &lt;span style="color:#78787e">// 递归终止条件：子数组长度≤1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 初始化指针（扩大边界）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span> i &lt;span style="color:#ff6ac1">=&lt;/span> l&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>, j &lt;span style="color:#ff6ac1">=&lt;/span> r&lt;span style="color:#ff6ac1">+&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 选择中间元素作为基准（位运算等价于(l+r)/2）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#9aedfe">int&lt;/span> x &lt;span style="color:#ff6ac1">=&lt;/span> a[l&lt;span style="color:#ff6ac1">+&lt;/span>r&lt;span style="color:#ff6ac1">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">while&lt;/span>(i &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 左指针向右找到≥基准的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">do&lt;/span> i&lt;span style="color:#ff6ac1">++&lt;/span>; &lt;span style="color:#ff6ac1">while&lt;/span>(a[i] &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 右指针向左找到≤基准的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">do&lt;/span> j&lt;span style="color:#ff6ac1">--&lt;/span>; &lt;span style="color:#ff6ac1">while&lt;/span>(a[j] &lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 交换逆序元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">if&lt;/span>(i &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> j) swap(a[i], a[j]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 递归处理子数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> quick_sort(a, l, j); &lt;span style="color:#78787e">// 左子数组[l, j]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> quick_sort(a, j&lt;span style="color:#ff6ac1">+&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>, r); &lt;span style="color:#78787e">// 右子数组[j+1, r]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="分区过程详解以数组311142857为例">分区过程详解（以数组{3,11,14,2,8,5,7}为例）
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>初始状态&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>l=0, r=6, x=a[3]=2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i=-1, j=7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[3, 11, 14, 2, 8, 5, 7]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>第一轮扫描&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>i++&lt;/code>直到a[i]≥2 → i=0 (3≥2)&lt;/li>
&lt;li>&lt;code>j--&lt;/code>直到a[j]≤2 → j=3 (2≤2)&lt;/li>
&lt;li>交换a[0]和a[3] → [2, 11, 14, 3, 8, 5, 7]&lt;/li>
&lt;li>继续扫描：i=1(11), j=2(14) → 交换 → [2, 14, 11, 3, 8, 5, 7]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第二轮扫描&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>i→2(11), j→1(14) → i&amp;gt;j 循环结束&lt;/li>
&lt;li>当前分区：[2] 和 [14,11,3,8,5,7]&lt;/li>
&lt;li>j=1 (分区点)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>递归排序&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>quick_sort(a, &lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">1&lt;/span>); &lt;span style="color:#78787e">// [2] (已有序)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>quick_sort(a, &lt;span style="color:#ff9f43">2&lt;/span>, &lt;span style="color:#ff9f43">6&lt;/span>); &lt;span style="color:#78787e">// 排序[14,11,3,8,5,7]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>后续递归&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>右子数组选择基准x=a[4]=8&lt;/li>
&lt;li>分区过程：
&lt;ul>
&lt;li>交换14↔7 → [7,11,3,8,5,14]&lt;/li>
&lt;li>交换11↔5 → [7,5,3,8,11,14]&lt;/li>
&lt;li>最终分区：[7,5,3] 和 [8,11,14]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="算法特点">算法特点
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>高效分区&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>双指针同时扫描，平均交换次数更少&lt;/li>
&lt;li>&lt;code>do-while&lt;/code>确保至少移动一次指针，避免死循环&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>基准选择&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>中位数基准 (&lt;code>l+r&amp;gt;&amp;gt;1&lt;/code>) 避免已排序数组的最坏情况&lt;/li>
&lt;li>无需随机化（已满足平均O(n log n)）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>边界处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>初始化&lt;code>i=l-1&lt;/code>, &lt;code>j=r+1&lt;/code>保证扫描全覆盖&lt;/li>
&lt;li>递归使用&lt;code>j&lt;/code>和&lt;code>j+1&lt;/code>作为分割点，确保分区不重叠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="时间复杂度分析">时间复杂度分析
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>情况&lt;/th>
&lt;th>时间复杂度&lt;/th>
&lt;th>发生条件&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>最佳&lt;/td>
&lt;td>O(n log n)&lt;/td>
&lt;td>每次均匀分区&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>平均&lt;/td>
&lt;td>O(n log n)&lt;/td>
&lt;td>随机数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>最差&lt;/td>
&lt;td>O(n²)&lt;/td>
&lt;td>每次极不平衡分区&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>空间复杂度&lt;/td>
&lt;td>O(log n)&lt;/td>
&lt;td>递归栈深度&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="执行流程示意图">执行流程示意图
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>原始: [3,11,14,2,8,5,7]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>基准: 2 (index3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>分区: [2] [14,11,3,8,5,7] // j=1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>右子数组: [14,11,3,8,5,7]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>基准: 8 (index4)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>分区: [7,5,3] [8,11,14] // j=4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>左子数组: [7,5,3]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>基准: 5 (index1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>分区: [3] [5,7] // j=1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>最终合并: [2,3,5,7,8,11,14]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="注意事项">注意事项
&lt;/h4>&lt;ol>
&lt;li>&lt;strong>稳定性&lt;/strong>：快速排序是不稳定排序（等值元素可能交换位置）&lt;/li>
&lt;li>&lt;strong>递归深度&lt;/strong>：最坏情况递归深度O(n)，可通过尾递归优化&lt;/li>
&lt;li>&lt;strong>重复元素&lt;/strong>：当有大量重复元素时，可优化为三路快排&lt;/li>
&lt;/ol></description></item><item><title>C++ 中怎么给 map 自定义比较规则</title><link>https://muo123.github.io/articles/c-%E4%B8%AD%E6%80%8E%E4%B9%88%E7%BB%99-map-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/</link><pubDate>Sun, 22 Jun 2025 19:29:57 +0800</pubDate><guid>https://muo123.github.io/articles/c-%E4%B8%AD%E6%80%8E%E4%B9%88%E7%BB%99-map-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/</guid><description>&lt;p>在 C++ 中，&lt;code>std::map&lt;/code> 默认使用 &lt;code>std::less&amp;lt;Key&amp;gt;&lt;/code> 进行排序（升序）。若需自定义排序规则，可通过以下三种方式实现：&lt;/p>
&lt;h3 id="1-使用函数对象仿函数">1. 使用函数对象（仿函数）
&lt;/h3>&lt;p>定义包含 &lt;code>operator()&lt;/code> 的结构体/类，实现严格弱序比较：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">struct&lt;/span> &lt;span style="color:#f3f99d">CaseInsensitiveCompare&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">bool&lt;/span> &lt;span style="color:#57c7ff">operator&lt;/span>()(&lt;span style="color:#ff6ac1">const&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>string&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> a, &lt;span style="color:#ff6ac1">const&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>string&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> b) &lt;span style="color:#ff6ac1">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 不区分大小写比较
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#ff6ac1">return&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>lexicographical_compare(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a.begin(), a.end(), b.begin(), b.end(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#9aedfe">char&lt;/span> c1, &lt;span style="color:#9aedfe">char&lt;/span> c2) { &lt;span style="color:#ff6ac1">return&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>tolower(c1) &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>tolower(c2); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>map&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>std&lt;span style="color:#ff6ac1">::&lt;/span>string, &lt;span style="color:#9aedfe">int&lt;/span>, CaseInsensitiveCompare&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> myMap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#5af78e">&amp;#34;Apple&amp;#34;&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#5af78e">&amp;#34;banana&amp;#34;&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#5af78e">&amp;#34;apple&amp;#34;&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">3&lt;/span>; &lt;span style="color:#78787e">// 覆盖 &amp;#34;Apple&amp;#34;（不区分大小写）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> (&lt;span style="color:#ff6ac1">const&lt;/span> &lt;span style="color:#ff6ac1">auto&lt;/span>&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> &lt;span style="color:#ff5c57">kv&lt;/span> : myMap) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> kv.first &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> kv.second &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 输出: apple: 3, banana: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-使用函数指针适用于简单规则">2. 使用函数指针（适用于简单规则）
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">bool&lt;/span> &lt;span style="color:#57c7ff">reverseCompare&lt;/span>(&lt;span style="color:#9aedfe">int&lt;/span> a, &lt;span style="color:#9aedfe">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> a &lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> b; &lt;span style="color:#78787e">// 降序排列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 模板参数传入函数指针类型，构造函数传入函数指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>map&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>&lt;span style="color:#9aedfe">int&lt;/span>, std&lt;span style="color:#ff6ac1">::&lt;/span>string, &lt;span style="color:#ff6ac1">decltype&lt;/span>(&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span>reverseCompare)&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> myMap(reverseCompare);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;one&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#ff9f43">3&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;three&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#ff9f43">2&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#34;two&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> (&lt;span style="color:#ff6ac1">const&lt;/span> &lt;span style="color:#ff6ac1">auto&lt;/span>&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> &lt;span style="color:#ff5c57">kv&lt;/span> : myMap) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> kv.first &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> kv.second &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 输出: 3: three, 2: two, 1: one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-使用-lambda-表达式c11-起">3. 使用 Lambda 表达式（C++11 起）
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#78787e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">#include&lt;/span> &lt;span style="color:#78787e">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#78787e"> &lt;/span>&lt;span style="color:#78787e">// 需包含 std::function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">int&lt;/span> &lt;span style="color:#57c7ff">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">auto&lt;/span> comp &lt;span style="color:#ff6ac1">=&lt;/span> [](&lt;span style="color:#ff6ac1">const&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>string&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> a, &lt;span style="color:#ff6ac1">const&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>string&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> a.length() &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> b.length(); &lt;span style="color:#78787e">// 按字符串长度排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 使用 decltype 推导 Lambda 类型，构造时传入 Lambda 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>map&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>std&lt;span style="color:#ff6ac1">::&lt;/span>string, &lt;span style="color:#9aedfe">int&lt;/span>, &lt;span style="color:#ff6ac1">decltype&lt;/span>(comp)&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> myMap(comp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#5af78e">&amp;#34;dog&amp;#34;&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#5af78e">&amp;#34;elephant&amp;#34;&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myMap[&lt;span style="color:#5af78e">&amp;#34;cat&amp;#34;&lt;/span>] &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> (&lt;span style="color:#ff6ac1">const&lt;/span> &lt;span style="color:#ff6ac1">auto&lt;/span>&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> &lt;span style="color:#ff5c57">kv&lt;/span> : myMap) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#ff6ac1">::&lt;/span>cout &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> kv.first &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> kv.second &lt;span style="color:#ff6ac1">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#5af78e">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e">// 输出（按长度升序）:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#78787e">// cat: 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#78787e">// dog: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> &lt;span style="color:#78787e">// elephant: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="关键注意事项">关键注意事项：
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>严格弱序要求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>必须满足：&lt;code>!comp(a, a)&lt;/code>（反自反）&lt;/li>
&lt;li>若 &lt;code>comp(a, b) == true&lt;/code>，则 &lt;code>comp(b, a) == false&lt;/code>（非对称）&lt;/li>
&lt;li>若 &lt;code>comp(a, b) &amp;amp;&amp;amp; comp(b, c)&lt;/code>，则 &lt;code>comp(a, c)&lt;/code>（传递性）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自定义类型作为 Key&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">struct&lt;/span> &lt;span style="color:#f3f99d">Point&lt;/span> { &lt;span style="color:#9aedfe">int&lt;/span> x; &lt;span style="color:#9aedfe">int&lt;/span> y; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">struct&lt;/span> &lt;span style="color:#f3f99d">PointCompare&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#9aedfe">bool&lt;/span> &lt;span style="color:#57c7ff">operator&lt;/span>()(&lt;span style="color:#ff6ac1">const&lt;/span> Point&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> a, &lt;span style="color:#ff6ac1">const&lt;/span> Point&lt;span style="color:#ff6ac1">&amp;amp;&lt;/span> b) &lt;span style="color:#ff6ac1">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>tie(a.x, a.y) &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> std&lt;span style="color:#ff6ac1">::&lt;/span>tie(b.x, b.y); &lt;span style="color:#78787e">// 先比较x，后比较y
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#ff6ac1">::&lt;/span>map&lt;span style="color:#ff6ac1">&amp;lt;&lt;/span>Point, &lt;span style="color:#9aedfe">int&lt;/span>, PointCompare&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> pointMap;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>比较函数应尽量简单高效（频繁调用）&lt;/li>
&lt;li>避免在比较函数中修改状态（应为无状态的）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与 &lt;code>unordered_map&lt;/code> 区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>std::map&lt;/code> 使用比较器确定红黑树中的顺序&lt;/li>
&lt;li>&lt;code>std::unordered_map&lt;/code> 自定义排序需特化 &lt;code>std::hash&lt;/code> 并提供相等比较函数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过自定义比较规则，可以灵活控制 &lt;code>std::map&lt;/code> 中元素的排序行为，适应不同场景需求。&lt;/p></description></item><item><title>判断质数 C++ 实现</title><link>https://muo123.github.io/articles/%E5%88%A4%E6%96%AD%E8%B4%A8%E6%95%B0-c-%E5%AE%9E%E7%8E%B0/</link><pubDate>Sat, 21 Jun 2025 18:59:18 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%88%A4%E6%96%AD%E8%B4%A8%E6%95%B0-c-%E5%AE%9E%E7%8E%B0/</guid><description>&lt;p>要判断一个数是否为质数，可以遵循以下思路：质数是大于1且只能被1和自身整除的自然数。算法关键在于高效地检查该数是否有除1和自身外的其他因数。&lt;/p>
&lt;h3 id="算法思路">算法思路
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>处理边界情况&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>若数字小于2，则不是质数（质数定义要求大于1）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查奇数因子&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>只需检查从2开始的奇数因子。&lt;/li>
&lt;li>检查范围上限为 $\sqrt{n}$（数学原理：若 $n$ 有因子 $a$，则必有因子 $b = n/a$，其中一个因子必小于等于 $\sqrt{n}$。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="时间复杂度">时间复杂度
&lt;/h3>&lt;ul>
&lt;li>最优情况：$O(1)$（如偶数或小质数）。&lt;/li>
&lt;li>最坏情况：$O(\sqrt{n})$（需遍历到 $\sqrt{n}$。&lt;/li>
&lt;/ul>
&lt;h3 id="c-代码实现">C++ 代码实现
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9aedfe">bool&lt;/span> &lt;span style="color:#57c7ff">is_prime&lt;/span>(&lt;span style="color:#9aedfe">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span>(n &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> &lt;span style="color:#ff9f43">2&lt;/span>) &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff5c57">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span>(&lt;span style="color:#9aedfe">int&lt;/span> i &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">2&lt;/span>; i &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> n&lt;span style="color:#ff6ac1">/&lt;/span>i; i&lt;span style="color:#ff6ac1">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span>(n &lt;span style="color:#ff6ac1">%&lt;/span> i &lt;span style="color:#ff6ac1">==&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>) &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff5c57">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff5c57">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="代码解释">代码解释
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>边界处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>n &amp;lt; 2&lt;/code>：直接返回 &lt;code>false&lt;/code>。&lt;/li>
&lt;li>&lt;code>n == 2&lt;/code>：唯一偶质数，返回 &lt;code>true&lt;/code>。&lt;/li>
&lt;li>&lt;code>n % 2 == 0&lt;/code>：除2外的偶数均不是质数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>因子检查&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算上限&lt;/strong>：&lt;code>i &amp;lt;= n/i&lt;/code> 确保覆盖所有可能因子。&lt;/li>
&lt;li>&lt;strong>找到因子&lt;/strong>：若整除成立，则 &lt;code>n&lt;/code> 不是质数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>返回结果&lt;/strong>：若循环结束未找到因子，则 &lt;code>n&lt;/code> 是质数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="示例测试">示例测试
&lt;/h3>&lt;ul>
&lt;li>&lt;code>isPrime(2) → true&lt;/code>&lt;/li>
&lt;li>&lt;code>isPrime(17) → true&lt;/code>&lt;/li>
&lt;li>&lt;code>isPrime(9) → false&lt;/code>&lt;/li>
&lt;li>&lt;code>isPrime(1) → false&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>此算法平衡了效率与简洁性，适用于大多数场景。对于极大数字（如密码学应用），可采用更高级算法（如Miller-Rabin测试）。&lt;/p></description></item><item><title>应聘者与 HR 沟通有哪些要点</title><link>https://muo123.github.io/articles/%E5%BA%94%E8%81%98%E8%80%85%E4%B8%8E-hr-%E6%B2%9F%E9%80%9A%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E7%82%B9/</link><pubDate>Fri, 20 Jun 2025 18:34:49 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%BA%94%E8%81%98%E8%80%85%E4%B8%8E-hr-%E6%B2%9F%E9%80%9A%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E7%82%B9/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250620/vWXV/1920X1080/image.png" alt="Featured image of post 应聘者与 HR 沟通有哪些要点" />&lt;p>作为应聘者与HR沟通时，每一次对话都是展示你专业素养、了解公司真相的宝贵机会。你需要像侦探一样敏锐，像外交官一样得体。以下是你需要重点关注的内容及沟通建议：&lt;/p>
&lt;h2 id="-一核心信息确认与澄清">🔍 一、核心信息确认与澄清
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>岗位核心职责：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 具体做什么？日常工作内容占比最大的部分是什么？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> 请HR描述一个典型的工作日/工作周。问：“这个岗位最重要的三项核心KPI/目标是什么？” “您期望入职后3-6个月内达成什么具体成果？”&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 确保你的理解与岗位实际需求一致，避免入职后出现巨大落差。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>汇报关系与团队构成：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 直接汇报给谁？团队成员有多少人？他们的背景如何？团队在公司中的定位？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> “这个岗位在组织架构中的具体位置是怎样的？” “团队目前的规模、分工和主要挑战是什么？”&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 了解工作环境和协作模式，判断是否能融入团队文化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>薪资福利：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 薪资结构（基本工资、绩效奖金、提成比例、年终奖等）、发放时间、社保公积金缴纳基数和比例、补贴、福利（餐补、交通、通讯、年假、体检、商业保险等）。&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> 在面试后期或收到意向后清晰询问：“能否详细介绍下这个岗位的薪资结构和福利待遇？” 问清绩效奖金的具体计算方式和发放条件。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 保障自身权益，进行客观比较。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工作地点与时间：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 具体办公地点（精确到楼层或区域）、是否需要出差（频率和目的地）、工作时间（是否弹性、核心工作时间）、加班文化（是否普遍，是否有补偿）。&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> “这个岗位是否需要出差？频率和时长大概怎样？” “团队目前的加班情况如何？公司对加班有什么政策或文化？”&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 评估工作与生活的平衡度及通勤成本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-二公司团队与职位发展">📈 二、公司、团队与职位发展
&lt;/h2>&lt;ol start="5">
&lt;li>
&lt;p>&lt;strong>职位产生的原因：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 是新设岗位还是替补？如果是替补，前任离职原因是什么？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> “这个岗位是新开设的吗？还是接替之前的同事？”（如果是接替）“方便了解一下前任离开的原因吗？”（注意HR可能不会完全透露，但可以观察其回答方式）。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 判断岗位稳定性及潜在挑战。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队/公司文化与氛围：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 部门/公司的核心价值观是什么？工作氛围是紧张高效还是轻松灵活？沟通方式是直接还是委婉？团队合作模式？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> “您如何描述我们团队/部门的文化和氛围？” “团队内部通常如何沟通和协作？” “您最喜欢在这里工作的哪一点？”&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 评估文化匹配度，看是否是你喜欢和适应的环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>职业发展与培训：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 公司为员工提供哪些学习和成长机会（培训、 mentorship、轮岗等）？这个岗位的晋升路径通常是怎样的？公司如何评估绩效并决定晋升/调薪？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> “公司对这个岗位的长期发展期望是什么？” “对于表现优秀的员工，通常有哪些发展通道？” “公司提供哪些类型的培训或学习资源？”&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 了解未来成长空间和公司对人才发展的投入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-三流程与后续安排">⏳ 三、流程与后续安排
&lt;/h2>&lt;ol start="8">
&lt;li>
&lt;p>&lt;strong>招聘流程与时间线：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 整个面试有几轮？分别是什么形式（电话、视频、现场）？涉及哪些人（HR、直属经理、同事、高管）？大概需要多长时间？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> 在初面后询问：“能否介绍一下后续的面试流程和时间安排？” “您预计整个招聘过程大概需要多久？”&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 管理自己的期望，合理安排时间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>下一步安排：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 当前面试结束后，下一步是什么？何时能得到反馈？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> 每次面试结束时主动问：“请问接下来是什么流程？” “大概什么时候会有下一步的反馈？” 即使HR说“我们会通知你”，也可以问一个大概的时限。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 展现积极主动的态度，避免盲目等待。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>联系方式与信息更新：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 如果有问题，如何联系HR？如果个人情况有更新（如收到其他offer），应告知谁？&lt;/li>
&lt;li>&lt;strong>沟通建议：&lt;/strong> “如果在等待期间我有问题或情况更新，最好联系哪位？” “方便留下您的联系方式（邮箱/微信）以便后续沟通吗？”（视情况而定，有些公司有规定）。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 确保沟通渠道畅通。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-四沟通中的软性关注点">🧠 四、沟通中的软性关注点
&lt;/h2>&lt;ol start="11">
&lt;li>
&lt;p>&lt;strong>HR的沟通风格与专业性：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> HR是否尊重你的时间？回复是否及时？沟通是否清晰、专业、友好？是否耐心解答你的问题？&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> HR是公司形象的第一窗口，其表现能在一定程度上反映公司文化和效率。如果你感到不被尊重或沟通困难，这可能是一个预警信号。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>倾听与观察：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关注点：&lt;/strong> 不仅听HR说什么，也要注意其语气、措辞和肢体语言（如果是视频/现场）。对某些问题的回避或含糊其辞可能暗示潜在问题。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 获取更全面和真实的信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提问的艺术：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>建议：&lt;/strong> 问题要&lt;strong>具体、有针对性、体现你的思考和准备&lt;/strong>。避免问网上轻易能查到的基础信息。将问题融入对话中，显得自然。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 通过提问展示你的能力、兴趣和诚意。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>诚实与透明：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>建议：&lt;/strong> 清晰表达你的期望（薪资范围、职业目标、入职时间等），但注意策略和时机（如薪资可在后期详谈）。对简历和经历务必诚实。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 建立信任基础，避免后期因关键信息不匹配而失败。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>专业性与礼仪：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>建议：&lt;/strong> 准时（线上提前测试设备）、着装得体（根据公司文化调整）、表达清晰简洁、态度积极自信有礼貌、面试后发送感谢邮件（简短即可）。&lt;/li>
&lt;li>&lt;strong>目的：&lt;/strong> 在所有接触点都留下良好、专业的印象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-关键总结与提醒">📌 关键总结与提醒
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>准备充分：&lt;/strong> 研究公司、职位要求，准备好自己的问题和答案。&lt;/li>
&lt;li>&lt;strong>双向选择：&lt;/strong> 面试不仅是公司考察你，也是你考察公司。大胆提问，获取你需要的信息来做决策。&lt;/li>
&lt;li>&lt;strong>记录信息：&lt;/strong> 沟通后及时记录关键信息（如薪资细节、工作内容、流程节点、反馈时间等），方便后续比较和跟进。&lt;/li>
&lt;li>&lt;strong>保持跟进但不过度：&lt;/strong> 在约定的反馈时间后，可以礼貌地发邮件或电话询问进展。避免过于频繁地催促。&lt;/li>
&lt;li>&lt;strong>信任直觉：&lt;/strong> 如果在沟通过程中感到明显的不适、不专业或不透明，要重视这些信号，它们可能反映了公司真实的一面。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>每一次面试都是职业道路上的探照灯——既照亮对方公司的真实轮廓，也映射出你自身专业价值的边界。&lt;/strong> 提出那些让你夜不能寐的问题，因为答案的缺失远比拒绝更令人遗憾。保持这份清醒与勇气，你终会在职场的迷雾中找到真正值得停靠的港湾。祝你求职顺利！&lt;/p></description></item><item><title>简单了解跨境电商运营需要关注哪些指标</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E8%B7%A8%E5%A2%83%E7%94%B5%E5%95%86%E8%BF%90%E8%90%A5%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E6%8C%87%E6%A0%87/</link><pubDate>Wed, 18 Jun 2025 21:59:45 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E8%B7%A8%E5%A2%83%E7%94%B5%E5%95%86%E8%BF%90%E8%90%A5%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E6%8C%87%E6%A0%87/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250618/wq00/434X197/image.png" alt="Featured image of post 简单了解跨境电商运营需要关注哪些指标" />&lt;p>以下是跨境电商运营需重点监控的指标体系，按业务模块分类整理，并附计算逻辑与优化策略：&lt;/p>
&lt;hr>
&lt;h3 id="-一物流履约指标">📦 &lt;strong>一、物流履约指标&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>有效追踪率（VTR）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>有效追踪包裹数 ÷ 总发货包裹数 × 100%&lt;/code>&lt;/li>
&lt;li>&lt;strong>目标值&lt;/strong>：≥95%（亚马逊硬性要求）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>仅合作亚马逊官方物流或集成服务商（如UPS、DHL），避免虚假单号；&lt;/li>
&lt;li>发货后24小时内上传追踪号，每日核对物流商数据同步状态；&lt;/li>
&lt;li>欧洲订单（除&amp;lt;20欧元信件）100%纳入追踪范围，需特别关注。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>订单履约时效&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>平均发货时间 = Σ(订单发货时间 - 订单确认时间) ÷ 总订单数&lt;/code>&lt;/li>
&lt;li>&lt;strong>目标值&lt;/strong>：&amp;lt;48小时（平台推荐）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>采用FBA或第三方海外仓缩短链路；&lt;/li>
&lt;li>预售商品需明确标注发货周期，避免客户预期落差。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-二销售与客户满意度指标">🌟 &lt;strong>二、销售与客户满意度指标&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>差评率（POR）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>(1-2星评价订单数 ÷ 总完成订单数) × 100%&lt;/code>&lt;/li>
&lt;li>&lt;strong>风险阈值&lt;/strong>：≥20%（Shopee越南站强制下架线）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>根源治理&lt;/strong>：实物拍摄避免过度美化，标注精确尺寸/材质；&lt;/li>
&lt;li>&lt;strong>主动干预&lt;/strong>：物流延迟时主动补偿$1-$3优惠券；&lt;/li>
&lt;li>&lt;strong>文化适配&lt;/strong>：宗教敏感市场（如中东）避免猪肉/暴露设计。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户终身价值（CLV）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>客均利润 × 年均购买频次 × 平均留存年限&lt;/code>&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>高复购品类（美妆、母婴）推行订阅制（如满3单赠1）；&lt;/li>
&lt;li>分层运营：VIP客户提供专属客服通道。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-三广告与流量转化指标">📊 &lt;strong>三、广告与流量转化指标&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>广告投入回报率（ROAS）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>广告带来利润 ÷ 广告花费 × 100%&lt;/code>&lt;/li>
&lt;li>&lt;strong>健康值&lt;/strong>：&amp;gt;200%（服装/家居类目基准）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>低ROAS商品（&amp;lt;150%）暂停投放，优化主图及评论；&lt;/li>
&lt;li>欧洲市场采用动态出价，设置CPA上限（如$8）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>转化率（CVR）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>成交订单数 ÷ 独立访客数 × 100%&lt;/code>&lt;/li>
&lt;li>&lt;strong>行业均值&lt;/strong>：1.5%-3.5%（电子产品类）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>A/B测试落地页：添加视频展示转化率可提升18%；&lt;/li>
&lt;li>支付环节简化：支持Apple Pay/本地钱包（如巴西Pix）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-四财务与盈利指标">💰 &lt;strong>四、财务与盈利指标&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>毛利率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>(总收入 - 产品成本 - 物流费 - 平台佣金) ÷ 总收入 × 100%&lt;/code>&lt;/li>
&lt;li>&lt;strong>建议值&lt;/strong>：&amp;gt;40%（规避关税冲击）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>巴西等高关税国家（&amp;gt;50%）采用本土仓或与华商合作；&lt;/li>
&lt;li>使用月末加权平均法核算成本（公式见下表），避免利润失真。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资金周转天数&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>应收账款周转天数 + 库存周转天数 - 应付账款周转天数&lt;/code>&lt;/li>
&lt;li>&lt;strong>健康范围&lt;/strong>：&amp;lt;60天（快消品类）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>压降库存：慢周转品（周转率&amp;lt;2）限时清仓；&lt;/li>
&lt;li>账期谈判：与供应商争取30天以上账期。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>月末加权平均成本法示例&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>日期&lt;/th>
&lt;th>入库数量&lt;/th>
&lt;th>单价（元）&lt;/th>
&lt;th>总成本（元）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>期初库存&lt;/td>
&lt;td>10&lt;/td>
&lt;td>10&lt;/td>
&lt;td>100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4月10日&lt;/td>
&lt;td>5&lt;/td>
&lt;td>9&lt;/td>
&lt;td>45&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4月20日&lt;/td>
&lt;td>10&lt;/td>
&lt;td>11&lt;/td>
&lt;td>110&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>全月均价&lt;/strong>&lt;/td>
&lt;td>&lt;strong>（100+45+110）÷（10+5+10） = 10.2元&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="-五库存与供应链指标">📦 &lt;strong>五、库存与供应链指标&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>库存周转率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>销售成本 ÷ [(期初库存额 + 期末库存额) ÷ 2]&lt;/code>&lt;/li>
&lt;li>&lt;strong>优秀值&lt;/strong>：&amp;gt;6次/年（消费电子类）&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>积压SKU（周转率&amp;lt;2）捆绑促销（如买A送B）；&lt;/li>
&lt;li>备货公式：&lt;code>安全库存 = 日均销量 × 采购周期 × 1.5&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>断货率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算方式&lt;/strong>：&lt;code>断货SKU数 ÷ 总在线SKU数 × 100%&lt;/code>&lt;/li>
&lt;li>&lt;strong>警戒线&lt;/strong>：&amp;gt;10%导致流量下滑30%+&lt;/li>
&lt;li>&lt;strong>优化建议&lt;/strong>：
&lt;ul>
&lt;li>设置ERP预警：库存低于15天销量时自动补货；&lt;/li>
&lt;li>多仓协同：欧洲可用中欧仓（波兰）+南欧仓（西班牙）覆盖全境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-政策合规与风控要点">⚠️ &lt;strong>政策合规与风控要点&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>IP属地真实性&lt;/strong>：欧洲平台强制匹配账号注册地与登录IP，需用防关联浏览器（如候鸟）配置动态指纹；&lt;/li>
&lt;li>&lt;strong>数据本地化&lt;/strong>：用户日志需加密存储180天以上，避免封号风险；&lt;/li>
&lt;li>&lt;strong>关税新政&lt;/strong>：美国$800以下包裹取消免税（6月起每单+$200），建议转向欧洲/拉美市场。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="总结优先级矩阵">&lt;strong>总结：优先级矩阵&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>指标类型&lt;/strong>&lt;/th>
&lt;th>&lt;strong>核心监控指标&lt;/strong>&lt;/th>
&lt;th>&lt;strong>优化紧急度&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>物流履约&lt;/td>
&lt;td>VTR、履约时效&lt;/td>
&lt;td>⭐⭐⭐⭐⭐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>客户体验&lt;/td>
&lt;td>POR、CLV&lt;/td>
&lt;td>⭐⭐⭐⭐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>流量效率&lt;/td>
&lt;td>ROAS、CVR&lt;/td>
&lt;td>⭐⭐⭐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>成本健康度&lt;/td>
&lt;td>毛利率、周转天数&lt;/td>
&lt;td>⭐⭐⭐⭐&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>注：数据驱动需结合工具落地，推荐 &lt;strong>数跨境BI&lt;/strong>（自动化预警） + &lt;strong>积加ERP&lt;/strong>（成本核算），实现指标闭环管理。政策多变期（如欧美关税）建议周度复盘，动态调整区域资源配比。&lt;/p>&lt;/blockquote></description></item><item><title>简单了解电商运营</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E7%94%B5%E5%95%86%E8%BF%90%E8%90%A5/</link><pubDate>Tue, 17 Jun 2025 16:21:12 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E7%94%B5%E5%95%86%E8%BF%90%E8%90%A5/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250617/wCxo/834X528/image.png" alt="Featured image of post 简单了解电商运营" />&lt;p>电商运营是&lt;strong>负责在线销售平台（如淘宝、京东、拼多多、抖音小店、独立站等）日常运作和销售增长的核心岗位&lt;/strong>。它像“线上店铺的操盘手”，需要精通平台规则、用户心理、数据分析和营销策略，最终实现商品高效曝光、转化和盈利。&lt;/p>
&lt;hr>
&lt;h3 id="一电商运营的核心目标">&lt;strong>一、电商运营的核心目标&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>提升销售额&lt;/strong>：通过流量获取、转化率优化、客单价提升达成。&lt;/li>
&lt;li>&lt;strong>控制成本&lt;/strong>：合理分配广告预算、降低退货率、优化供应链。&lt;/li>
&lt;li>&lt;strong>维护品牌形象&lt;/strong>：管理商品展示、客服质量、用户评价。&lt;/li>
&lt;li>&lt;strong>用户沉淀&lt;/strong>：引导复购、建立私域流量（如微信群、会员体系）。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="二岗位具体工作内容因平台公司规模差异较大">&lt;strong>二、岗位具体工作内容（因平台/公司规模差异较大）&lt;/strong>
&lt;/h3>&lt;h4 id="1-店铺基础运维">&lt;strong>1. 店铺基础运维&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>商品上架：优化标题、主图、详情页（突出卖点+转化逻辑）。&lt;/li>
&lt;li>页面装修：设计首页、活动页，确保视觉统一和用户体验。&lt;/li>
&lt;li>库存管理：监控库存预警，避免断货或积压。&lt;/li>
&lt;li>活动报名：参与平台大促（618/双11）、日常活动（聚划算等）。&lt;/li>
&lt;/ul>
&lt;h4 id="2-流量获取">&lt;strong>2. 流量获取&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>免费流量&lt;/strong>：
&lt;ul>
&lt;li>搜索引擎优化（SEO）：标题关键词、属性优化。&lt;/li>
&lt;li>内容运营：短视频/直播策划、小红书种草、买家秀引导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>付费流量&lt;/strong>：
&lt;ul>
&lt;li>广告投放：直通车（搜索）、引力魔方（推荐）、万相台（全渠道）的投放策略与优化。&lt;/li>
&lt;li>达人合作：联系主播/KOL带货，分佣谈判。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-转化率优化">&lt;strong>3. 转化率优化&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>促销策略：满减、优惠券、赠品、限时折扣。&lt;/li>
&lt;li>详情页优化：痛点挖掘、信任背书（检测报告/销量展示）。&lt;/li>
&lt;li>客服话术：培训客服，提高询单转化率（如催付技巧）。&lt;/li>
&lt;/ul>
&lt;h4 id="4-数据分析与复盘">&lt;strong>4. 数据分析与复盘&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>核心指标监控：
&lt;ul>
&lt;li>&lt;strong>流量数据&lt;/strong>：UV（访客数）、PV（浏览量）、流量来源。&lt;/li>
&lt;li>&lt;strong>转化数据&lt;/strong>：转化率、客单价、GMV（成交额）。&lt;/li>
&lt;li>&lt;strong>广告数据&lt;/strong>：ROI（投入产出比）、CPC（点击成本）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>定期输出报告：分析活动效果、问题诊断（如流量下跌原因）、提出优化方案。&lt;/li>
&lt;/ul>
&lt;h4 id="5-竞争与用户洞察">&lt;strong>5. 竞争与用户洞察&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>竞品监控：分析对手定价、活动、爆款策略。&lt;/li>
&lt;li>用户调研：通过评价、客服反馈提炼需求，指导选品或功能改进。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="三岗位能力要求">&lt;strong>三、岗位能力要求&lt;/strong>
&lt;/h3>&lt;h4 id="硬技能">&lt;strong>硬技能&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>技能类别&lt;/th>
&lt;th>具体能力&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>平台操作&lt;/strong>&lt;/td>
&lt;td>熟悉后台功能（如千牛、抖店、商家后台）、活动规则（违规规避）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>数据分析&lt;/strong>&lt;/td>
&lt;td>Excel/BI工具（如生意参谋、蝉妈妈）、数据解读能力（从数据找到问题）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>广告投放&lt;/strong>&lt;/td>
&lt;td>直通车/巨量千川等工具优化（关键词出价、人群定向）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>视觉营销&lt;/strong>&lt;/td>
&lt;td>基础PS/文案能力（与美工高效沟通，指导页面设计）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>供应链理解&lt;/strong>&lt;/td>
&lt;td>库存周转率、物流成本核算，避免断货/压货。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="软技能">&lt;strong>软技能&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>市场敏感度&lt;/strong>：快速捕捉热点（如节日营销、网红商品）。&lt;/li>
&lt;li>&lt;strong>逻辑思维&lt;/strong>：拆解目标（GMV=流量×转化率×客单价），针对性突破。&lt;/li>
&lt;li>&lt;strong>抗压能力&lt;/strong>：大促期间高强度加班、应对突发问题（如差评危机）。&lt;/li>
&lt;li>&lt;strong>沟通协调&lt;/strong>：联动美工、客服、仓储团队，推动方案落地。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="四不同公司类型的运营侧重">&lt;strong>四、不同公司类型的运营侧重&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>公司类型&lt;/strong>&lt;/th>
&lt;th>&lt;strong>运营侧重点&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>平台方&lt;/strong>&lt;/td>
&lt;td>类目运营（如天猫服饰行业），负责商家管理、规则制定、活动策划。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>品牌方&lt;/strong>&lt;/td>
&lt;td>全链路运营（从产品定位到用户复购），强调品牌调性与长效增长。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>代运营公司&lt;/strong>&lt;/td>
&lt;td>多店铺管理，强结果导向（ROI考核），精通短期爆款打法。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>初创团队&lt;/strong>&lt;/td>
&lt;td>“全能型”：兼顾客服、美工、投流，低成本试错。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="五入行建议">&lt;strong>五、入行建议&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>新手入门&lt;/strong>：
&lt;ul>
&lt;li>从&lt;strong>运营助理&lt;/strong>做起（学基础操作+数据分析）。&lt;/li>
&lt;li>考取平台认证（如阿里妈妈数字营销师）。&lt;/li>
&lt;li>用个人店铺练手（淘宝/闲鱼），理解交易全流程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>进阶方向&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>垂直领域&lt;/strong>：直播运营、跨境运营、私域运营。&lt;/li>
&lt;li>&lt;strong>管理岗&lt;/strong>：运营经理（统筹多平台）、品牌总监。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;blockquote>
&lt;p>🔍 &lt;strong>关键提示&lt;/strong>：电商运营是“实操型”岗位，&lt;strong>数据思维&lt;/strong>和&lt;strong>结果导向&lt;/strong>是核心竞争力。持续跟踪平台新玩法（如AIGC工具生成详情页、VR购物）才能保持竞争力。&lt;/p>&lt;/blockquote></description></item><item><title>简单了解游戏策划</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E6%B8%B8%E6%88%8F%E7%AD%96%E5%88%92/</link><pubDate>Tue, 17 Jun 2025 09:02:15 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E6%B8%B8%E6%88%8F%E7%AD%96%E5%88%92/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250617/HPJo/776X385/image.png" alt="Featured image of post 简单了解游戏策划" />&lt;p>游戏策划是游戏开发的核心环节，负责从概念构思到产品落地的全流程设计，其工作直接影响游戏的可玩性、市场表现及用户体验。以下从流程、技能、职责及行业要求四个维度展开详细介绍：&lt;/p>
&lt;hr>
&lt;h3 id="-一游戏策划的核心流程">🎮 一、游戏策划的核心流程
&lt;/h3>&lt;p>游戏策划遵循结构化开发流程，确保项目有序推进：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>项目启动与策划&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>市场调研&lt;/strong>：分析市场趋势、竞品动态及目标用户需求，确定游戏定位与可行性。&lt;/li>
&lt;li>&lt;strong>立项与规划&lt;/strong>：明确核心玩法、商业目标及资源预算，输出策划草案。&lt;/li>
&lt;li>&lt;strong>团队组建&lt;/strong>：根据项目需求配置策划、程序、美术等角色。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内容设计阶段&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>世界观与角色设定&lt;/strong>：构建故事背景、角色性格及技能体系，增强叙事沉浸感。&lt;/li>
&lt;li>&lt;strong>系统与关卡设计&lt;/strong>：
&lt;ul>
&lt;li>&lt;em>核心玩法&lt;/em>：设计战斗、经济、成长等核心机制。&lt;/li>
&lt;li>&lt;em>关卡设计&lt;/em>：规划地图布局、难度曲线及奖励机制，提升玩家挑战性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>UI/UX设计&lt;/strong>：优化界面交互与视觉引导，确保操作流畅性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开发与测试&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>技术实现&lt;/strong>：协同程序团队搭建引擎架构，完成功能模块开发。&lt;/li>
&lt;li>&lt;strong>多轮测试&lt;/strong>：
&lt;ul>
&lt;li>&lt;em>功能测试&lt;/em>：修复逻辑漏洞与程序BUG。&lt;/li>
&lt;li>&lt;em>平衡性测试&lt;/em>：调整数值（如伤害值、经济系统），避免玩家体验失衡。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>运营与迭代&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>上线推广&lt;/strong>：通过社交媒体、广告投放等渠道触达目标用户。&lt;/li>
&lt;li>&lt;strong>数据分析&lt;/strong>：监控用户留存、付费率等指标，驱动版本更新与内容扩展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>以下表格概括了游戏开发各阶段的关键任务和输出文档：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>开发阶段&lt;/strong>&lt;/th>
&lt;th>&lt;strong>核心任务&lt;/strong>&lt;/th>
&lt;th>&lt;strong>关键输出文档&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>项目启动&lt;/strong>&lt;/td>
&lt;td>市场分析、目标用户定位、可行性评估&lt;/td>
&lt;td>立项报告、市场调研分析&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>内容设计&lt;/strong>&lt;/td>
&lt;td>世界观构建、角色设定、核心玩法设计&lt;/td>
&lt;td>游戏设计文档(GDD)、关卡设计文档&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>开发实现&lt;/strong>&lt;/td>
&lt;td>程序架构搭建、美术资源制作、音效集成&lt;/td>
&lt;td>技术规格文档、美术风格指南&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>测试调优&lt;/strong>&lt;/td>
&lt;td>功能测试、平衡性调整、用户体验优化&lt;/td>
&lt;td>测试报告、迭代方案&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>运营维护&lt;/strong>&lt;/td>
&lt;td>版本更新、数据分析、社区管理&lt;/td>
&lt;td>运营策略、用户反馈报告&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="-二游戏策划师的必备技能体系">🔧 二、游戏策划师的必备技能体系
&lt;/h3>&lt;p>成功策划师需复合型能力，涵盖设计、技术及管理三大维度：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>设计能力&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>游戏机制设计&lt;/strong>：精通玩法规则、数值平衡（如技能冷却公式、经济模型）。&lt;/li>
&lt;li>&lt;strong>叙事与审美&lt;/strong>：构建连贯剧情，具备美术鉴赏力以指导视觉风格。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>技术理解&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>引擎基础&lt;/strong>：熟悉Unity/Unreal等引擎逻辑，能与程序员高效沟通技术方案。&lt;/li>
&lt;li>&lt;strong>数据分析&lt;/strong>：通过用户行为数据优化设计（如关卡通过率分析）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软技能&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>跨团队协作&lt;/strong>：协调程序、美术、测试等多部门资源，推动项目进度。&lt;/li>
&lt;li>&lt;strong>成本控制&lt;/strong>：评估开发周期与资源消耗，避免项目超支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>市场与用户洞察&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>玩家心理学&lt;/strong>：理解玩家动机（如成就、社交需求），设计成瘾性循环。&lt;/li>
&lt;li>&lt;strong>趋势敏感度&lt;/strong>：跟踪新兴玩法（如开放世界、 Roguelike），保持创新竞争力。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>以下表格总结了游戏策划师所需的核心技能与能力要求：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>技能类别&lt;/strong>&lt;/th>
&lt;th>&lt;strong>具体能力&lt;/strong>&lt;/th>
&lt;th>&lt;strong>应用场景&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>核心设计能力&lt;/strong>&lt;/td>
&lt;td>游戏机制设计、数值平衡、叙事构建&lt;/td>
&lt;td>制定核心玩法、角色成长体系、故事情节&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>技术理解&lt;/strong>&lt;/td>
&lt;td>引擎基础、编程概念、工具使用&lt;/td>
&lt;td>与程序员协作、原型开发、技术可行性评估&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>软技能&lt;/strong>&lt;/td>
&lt;td>跨部门协作、成本评估、敏捷应变&lt;/td>
&lt;td>资源协调、项目进度管理、需求变更处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>市场与用户&lt;/strong>&lt;/td>
&lt;td>玩家心理分析、数据驱动决策、趋势洞察&lt;/td>
&lt;td>用户画像构建、留存优化、玩法创新&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="-三职责与工作内容">📝 三、职责与工作内容
&lt;/h3>&lt;p>策划师贯穿游戏全生命周期，具体职责包括：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>架构设计&lt;/strong>：编写游戏设计文档（GDD），定义核心玩法与系统框架。&lt;/li>
&lt;li>&lt;strong>内容生产&lt;/strong>：
&lt;ul>
&lt;li>设计任务线、剧情分支及NPC对话脚本。&lt;/li>
&lt;li>规划关卡结构，结合难度曲线与奖励反馈。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>资源协调&lt;/strong>：
&lt;ul>
&lt;li>预估美术、程序资源需求，制定开发排期。&lt;/li>
&lt;li>主导版本迭代，基于测试反馈调整设计。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>市场适配&lt;/strong>：
&lt;ul>
&lt;li>本地化调整（如文化符号适配），提升区域用户接受度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-四行业招聘要求与发展路径">📊 四、行业招聘要求与发展路径
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>任职门槛&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>学历&lt;/strong>：本科及以上，计算机、设计或心理学专业优先。&lt;/li>
&lt;li>&lt;strong>技能&lt;/strong>：熟练使用Visio/PowerPoint撰写文档，掌握基础编程知识。&lt;/li>
&lt;li>&lt;strong>经验&lt;/strong>：1-3年经验，有成功项目案例者更具竞争力。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>职业进阶&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>纵向发展&lt;/strong>：执行策划→主策划→制作人，负责更大规模项目。&lt;/li>
&lt;li>&lt;strong>横向拓展&lt;/strong>：转型产品经理或独立开发者，延伸至泛娱乐领域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-总结">💎 总结
&lt;/h3>&lt;p>游戏策划是技术与艺术的结合体，需以&lt;strong>玩家体验为核心&lt;/strong>，通过系统化设计将创意转化为可落地的产品。随着行业竞争加剧，策划师除掌握基础技能外，还需具备&lt;strong>数据思维、跨界协作及快速学习&lt;/strong>能力，方能在玩法创新与商业价值间找到平衡点。未来，随着AI工具普及（如自动生成关卡），策划角色将更聚焦于“人性化设计”，深化情感化叙事与社交体验。&lt;/p></description></item><item><title>简单了解 U3D 开发</title><link>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-u3d-%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 16 Jun 2025 21:26:42 +0800</pubDate><guid>https://muo123.github.io/articles/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-u3d-%E5%BC%80%E5%8F%91/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250616/bFMa/956X438/image.png" alt="Featured image of post 简单了解 U3D 开发" />&lt;p>Unity3D（U3D）开发工程师是&lt;strong>专注于使用Unity引擎构建交互式实时内容的开发者&lt;/strong>，覆盖游戏、工业仿真、AR/VR、元宇宙等场景。以下是详细解析：&lt;/p>
&lt;hr>
&lt;h3 id="一核心职责做什么">&lt;strong>一、核心职责（做什么？）&lt;/strong>
&lt;/h3>&lt;h4 id="1-内容开发全流程">&lt;strong>1. 内容开发全流程&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>环节&lt;/strong>&lt;/th>
&lt;th>&lt;strong>具体任务&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>系统架构&lt;/strong>&lt;/td>
&lt;td>设计模块化代码框架（如MVC）、制定资源加载策略（Addressables）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>功能实现&lt;/strong>&lt;/td>
&lt;td>编写C#脚本控制角色移动/战斗逻辑、UI交互（UGUI/NGUI）、动画状态机（Animator）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>性能优化&lt;/strong>&lt;/td>
&lt;td>降低DrawCall（合批）、内存管理（GC优化）、Shader调优（减少Overdraw）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>跨平台适配&lt;/strong>&lt;/td>
&lt;td>解决Android/iOS/PC/主机平台的兼容性问题（如触屏操作转手柄控制）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="2-协同工作流">&lt;strong>2. 协同工作流&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>与美术协作&lt;/strong>：优化模型导入设置（网格压缩/LOD）、编写Shader实现特效需求。&lt;/li>
&lt;li>&lt;strong>与策划对接&lt;/strong>：配置技能数值表（Excel/JSON）、搭建关卡编辑器工具。&lt;/li>
&lt;li>&lt;strong>与后端联调&lt;/strong>：接入网络模块（Photon/ Socket.IO）、处理协议数据反序列化。&lt;/li>
&lt;/ul>
&lt;h4 id="3-技术攻关">&lt;strong>3. 技术攻关&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>解决复杂物理交互（如布娃娃系统Ragdoll）。&lt;/li>
&lt;li>实现高级渲染效果（URP/HDRP管线配置、屏幕后处理SSAO）。&lt;/li>
&lt;li>开发编辑器扩展工具（提升策划配置效率）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="二能力要求需要什么">&lt;strong>二、能力要求（需要什么？）&lt;/strong>
&lt;/h3>&lt;h4 id="硬技能">&lt;strong>硬技能&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>技术方向&lt;/strong>&lt;/th>
&lt;th>&lt;strong>关键能力&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Unity引擎&lt;/strong>&lt;/td>
&lt;td>精通Scene管理、Prefab系统、Timeline动画、粒子系统、NavMesh寻路。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>编程基础&lt;/strong>&lt;/td>
&lt;td>熟练C#（委托/事件/协程）、数据结构（四叉树碰撞检测）、设计模式（单例/观察者）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>图形学基础&lt;/strong>&lt;/td>
&lt;td>理解渲染管线、Shader编写（ShaderLab/HLSL）、光照模型（PBR工作流）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>性能调优&lt;/strong>&lt;/td>
&lt;td>使用Profiler定位瓶颈、内存泄漏检测（Memory Snapshot）、AssetBundle管理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>跨平台开发&lt;/strong>&lt;/td>
&lt;td>熟悉各平台SDK接入（微信小游戏、Steam SDK）、热更新方案（ILRuntime/HybridCLR）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>数学能力&lt;/strong>&lt;/td>
&lt;td>线性代数（矩阵变换）、3D空间运算（点乘/叉乘）、贝塞尔曲线应用。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="软技能">&lt;strong>软技能&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>技术审美&lt;/strong>：判断美术资源性能开销（如粒子特效数量对帧率的影响）。&lt;/li>
&lt;li>&lt;strong>问题拆解&lt;/strong>：将策划天马行空的需求（“实现黑洞吞噬效果”）转化为可执行技术方案。&lt;/li>
&lt;li>&lt;strong>抗压能力&lt;/strong>：应对版本Deadline前的紧急Bug修复（如iOS闪退问题）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="三典型工作场景示例">&lt;strong>三、典型工作场景示例&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>战斗系统开发&lt;/strong>&lt;br>
→ 用状态机实现角色连招：普攻第3击触发暴击，受击时播放硬直动画并计算伤害数值。&lt;/li>
&lt;li>&lt;strong>开放世界优化&lt;/strong>&lt;br>
→ 设计动态加载方案：根据玩家坐标异步加载地形分块，卸载视野外场景降低内存占用。&lt;/li>
&lt;li>&lt;strong>移动端适配&lt;/strong>&lt;br>
→ 针对低端机：关闭实时阴影、降低分辨率缩放比例（0.7x），保障30帧流畅运行。&lt;/li>
&lt;li>&lt;strong>编辑器工具开发&lt;/strong>&lt;br>
→ 为策划制作对话系统插件：拖拽配置分支选项，自动生成脚本绑定事件。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="四岗位细分方向">&lt;strong>四、岗位细分方向&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>领域&lt;/strong>&lt;/th>
&lt;th>&lt;strong>技术侧重点&lt;/strong>&lt;/th>
&lt;th>&lt;strong>代表产品&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>手游开发&lt;/strong>&lt;/td>
&lt;td>强性能优化（包体&amp;lt;100MB）、SDK接入（支付/广告）、反外挂机制。&lt;/td>
&lt;td>《原神》《王者荣耀》&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>主机/PC游戏&lt;/strong>&lt;/td>
&lt;td>追求高画质（HDRP管线）、物理模拟（Havok）、多人同步（帧同步/状态同步）。&lt;/td>
&lt;td>《永劫无间》《黑神话》&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>AR/VR&lt;/strong>&lt;/td>
&lt;td>空间定位（ARKit/ARCore）、手柄交互、防眩晕设计（帧率&amp;gt;90fps）。&lt;/td>
&lt;td>VR教育/工业维修模拟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>工业仿真&lt;/strong>&lt;/td>
&lt;td>物理引擎精度（布料/流体）、CAD模型导入、数据可视化。&lt;/td>
&lt;td>汽车装配培训系统&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>元宇宙应用&lt;/strong>&lt;/td>
&lt;td>实时音视频（WebRTC）、Avatar系统、UGC内容编辑器。&lt;/td>
&lt;td>虚拟社交平台&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="五入行与晋升路径">&lt;strong>五、入行与晋升路径&lt;/strong>
&lt;/h3>&lt;h4 id="入门要求">&lt;strong>入门要求&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>学历&lt;/strong>：计算机/数字媒体相关专业（能力＞学历，作品集是关键）。&lt;/li>
&lt;li>&lt;strong>必备技能&lt;/strong>：
&lt;ul>
&lt;li>独立完成小型Demo（如3D跑酷游戏）&lt;/li>
&lt;li>掌握Unity基础工作流（场景搭建-脚本编写-打包发布）&lt;/li>
&lt;li>理解面向对象编程（OOP）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>加分项&lt;/strong>：
&lt;ul>
&lt;li>GitHub开源项目贡献&lt;/li>
&lt;li>Asset Store上架工具&lt;/li>
&lt;li>游戏开发比赛奖项（如Game Jam）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="职业发展">&lt;strong>职业发展&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>技术纵深&lt;/strong>：&lt;br>
初级开发 → 技术专家（图形/物理/网络方向） → 主程 → 技术总监&lt;/li>
&lt;li>&lt;strong>横向拓展&lt;/strong>：&lt;br>
→ 转技术美术（TA）：衔接程序与美术，专攻Shader/工具链&lt;br>
→ 转独立开发者：Steam发布个人游戏&lt;br>
→ 转引擎开发（Unity源码改造）&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="六薪资参考2025年国内">&lt;strong>六、薪资参考（2025年国内）&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>层级&lt;/strong>&lt;/th>
&lt;th>&lt;strong>年薪范围&lt;/strong>&lt;/th>
&lt;th>&lt;strong>能力标签&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>初级（0-2年）&lt;/td>
&lt;td>12万-20万&lt;/td>
&lt;td>实现基础功能/UGUI开发/简单优化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中级（3-5年）&lt;/td>
&lt;td>25万-45万&lt;/td>
&lt;td>架构模块化代码/Shader编写/跨平台适配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>资深（5年+）&lt;/td>
&lt;td>50万-100万+&lt;/td>
&lt;td>主导大型项目/定制渲染管线/自研引擎插件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="行业趋势与挑战">&lt;strong>行业趋势与挑战&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>技术融合&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>AIGC应用&lt;/strong>：用AI生成NPC对话/3D模型贴图（Unity Muse工具链）。&lt;/li>
&lt;li>&lt;strong>云游戏&lt;/strong>：适应Unity云分发方案（减少端侧计算压力）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>核心挑战&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>碎片化适配&lt;/strong>：安卓设备性能差异导致“低端机卡顿，高端机发热”。&lt;/li>
&lt;li>&lt;strong>内容同质化&lt;/strong>：快速复用Asset Store资源导致游戏玩法雷同。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>🎮 &lt;strong>核心竞争力&lt;/strong>：&lt;strong>在技术限制与创意需求间找到平衡点&lt;/strong>——用最优方案实现“策划想要的炫酷效果”且不炸掉玩家的手机。&lt;/p>&lt;/blockquote></description></item><item><title>怎么写简历</title><link>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E5%86%99%E7%AE%80%E5%8E%86/</link><pubDate>Sun, 15 Jun 2025 21:01:47 +0800</pubDate><guid>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E5%86%99%E7%AE%80%E5%8E%86/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250615/4Mck/773X299/image.png" alt="Featured image of post 怎么写简历" />&lt;p>一份优秀的计算机应聘简历是获得面试机会的关键！它需要&lt;strong>清晰、简洁、精准地展示你的技术能力、项目经验和与目标岗位的匹配度&lt;/strong>。以下是如何撰写一份出色的计算机简历的指南：&lt;/p>
&lt;h2 id="核心原则">核心原则
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>针对性强：&lt;/strong> 针对每个申请的职位进行定制，突出与该职位要求最相关的技能和经验。&lt;/li>
&lt;li>&lt;strong>结果导向：&lt;/strong> 用&lt;strong>量化&lt;/strong>的结果和&lt;strong>具体&lt;/strong>的成就来证明你的能力，避免模糊的描述。&lt;/li>
&lt;li>&lt;strong>清晰易读：&lt;/strong> 排版专业、简洁，使用清晰的分段和标题（如项目符号），方便招聘经理快速扫描关键信息。&lt;strong>一页纸最佳&lt;/strong>（除非经验非常丰富）。&lt;/li>
&lt;li>&lt;strong>技术为王：&lt;/strong> 技术技能是核心，必须清晰、准确地列出。&lt;/li>
&lt;li>&lt;strong>诚实可信：&lt;/strong> 只写你真正掌握并能讨论的技能和经验。&lt;/li>
&lt;/ol>
&lt;h2 id="简历结构-建议顺序">简历结构 (建议顺序)
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>个人信息 (Contact Information)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>姓名&lt;/li>
&lt;li>电话号码&lt;/li>
&lt;li>专业邮箱地址（避免使用不正式或滑稽的邮箱名）&lt;/li>
&lt;li>LinkedIn个人主页链接（可选，但强烈建议保持更新）&lt;/li>
&lt;li>GitHub个人主页链接（&lt;strong>强烈推荐&lt;/strong>！展示你的代码和项目）&lt;/li>
&lt;li>技术博客或个人网站链接（可选，如果有高质量内容）&lt;/li>
&lt;li>&lt;strong>一般不需要：&lt;/strong> 照片、年龄、性别、婚姻状况、详细住址（城市即可）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>求职意向/个人总结 (Objective / Summary) - 可选但推荐&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Objective (目标)：&lt;/strong> 适合应届生或转行者，简明扼要说明你申请的职位和职业目标（1-2句话）。&lt;/li>
&lt;li>&lt;strong>Summary (总结)：&lt;/strong> 适合有经验者，用3-5句话概括你的核心优势、关键技能、相关经验年限以及你能为公司带来的价值。&lt;strong>紧扣目标职位要求&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>例子（应届生 - Objective）：&lt;/strong> “积极进取的计算机科学应届毕业生，寻求软件开发工程师职位，希望将在校项目中的Java、Python开发经验和算法知识应用于解决实际问题。”&lt;/li>
&lt;li>&lt;strong>例子（有经验者 - Summary）：&lt;/strong> “拥有5年全栈开发经验的软件工程师，精通Java Spring Boot后端开发和React前端框架。擅长设计和实现高并发、可扩展的微服务架构（使用Docker/Kubernetes），成功优化系统性能提升30%。寻求在贵公司高级软件工程师职位上贡献技术专长和项目管理能力。”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>技术技能 (Technical Skills) - 重中之重！&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分门别类清晰列出&lt;/strong>，让招聘者一眼看到你的技术栈。这是简历的“硬通货”。&lt;/li>
&lt;li>&lt;strong>常见分类：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>编程语言：&lt;/strong> Python, Java, C++, JavaScript, Go, Rust, SQL, TypeScript, HTML/CSS 等。&lt;strong>按熟练程度排序（精通 &amp;gt; 熟悉 &amp;gt; 了解）。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>框架与库：&lt;/strong> React, Angular, Vue.js, Spring Boot, Django, Flask, .NET Core, TensorFlow, PyTorch, pandas, NumPy 等。&lt;/li>
&lt;li>&lt;strong>数据库：&lt;/strong> MySQL, PostgreSQL, MongoDB, Redis, Oracle, SQL Server, Cassandra 等。&lt;/li>
&lt;li>&lt;strong>工具与平台：&lt;/strong> Git, Docker, Kubernetes, Jenkins, AWS, Azure, GCP, Linux/Unix, Shell Scripting, JIRA, Confluence, Ansible, Terraform 等。&lt;/li>
&lt;li>&lt;strong>方法论/概念：&lt;/strong> 面向对象编程 (OOP), 设计模式, RESTful APIs, 微服务, 敏捷开发 (Scrum/Kanban), 测试驱动开发 (TDD), CI/CD, 数据结构与算法, 分布式系统, 网络安全基础 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>诚实评估熟练度：&lt;/strong> 区分“精通”、“熟悉”、“了解”。面试官很可能会深挖你标记为“精通”的技能。&lt;/li>
&lt;li>&lt;strong>优先放置与目标职位最相关的技能。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目经验 (Projects / Experience) - 简历的核心价值区！&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>这是证明你技术能力和解决问题能力的关键部分。&lt;/li>
&lt;li>&lt;strong>按时间倒序排列&lt;/strong>（最近的在前）。&lt;/li>
&lt;li>&lt;strong>每个项目/经历包含：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>项目名称：&lt;/strong> 清晰、具体。&lt;/li>
&lt;li>&lt;strong>你的角色：&lt;/strong> 如“核心开发人员”、“项目负责人”、“后端开发实习生”。&lt;/li>
&lt;li>&lt;strong>时间范围：&lt;/strong> 起止年月。&lt;/li>
&lt;li>&lt;strong>技术栈：&lt;/strong> 列出该项目中使用的主要技术（与“技术技能”部分呼应）。&lt;/li>
&lt;li>&lt;strong>项目描述与成就 (最重要！)：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>STAR原则 (情境、任务、行动、结果)：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>情境 (Situation):&lt;/strong> 项目的背景/目标是什么？（一句话）&lt;/li>
&lt;li>&lt;strong>任务 (Task):&lt;/strong> 你负责的具体任务/挑战是什么？&lt;/li>
&lt;li>&lt;strong>行动 (Action):&lt;/strong> &lt;strong>你具体做了什么？&lt;/strong> 使用了哪些技术？如何设计/实现的？&lt;strong>重点突出你的技术贡献和决策过程。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>结果 (Result):&lt;/strong> &lt;strong>取得了什么可量化的成果？&lt;/strong> 对项目/团队/公司有何积极影响？&lt;strong>尽可能量化！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>量化成果举例：&lt;/strong>
&lt;ul>
&lt;li>“使用Redis缓存优化数据库查询，将API响应时间平均降低40%。”&lt;/li>
&lt;li>“设计并实现了基于Spring Security的认证授权模块，提升了系统安全性。”&lt;/li>
&lt;li>“独立开发了XX功能模块，用户使用率提升25%。”&lt;/li>
&lt;li>“重构了XX服务代码，代码可维护性评分提高，Bug率降低15%。”&lt;/li>
&lt;li>“参与团队完成了XX系统从单体架构到微服务架构的迁移。”&lt;/li>
&lt;li>“编写自动化测试脚本（使用PyTest/Selenium），覆盖率达到85%，减少回归测试时间50%。”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>区分工作项目和课外项目/开源贡献：&lt;/strong>
&lt;ul>
&lt;li>工作项目：重点强调你在公司环境中的职责、贡献和商业影响。&lt;/li>
&lt;li>课外项目/开源贡献：&lt;strong>非常重要！&lt;/strong> 尤其对于应届生和经验较少者。展示你的技术热情、主动学习能力和解决问题的能力。同样遵循STAR原则描述。确保GitHub链接可访问且项目README清晰。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>精选项目：&lt;/strong> 不要堆砌所有项目，选择&lt;strong>最能体现目标职位所需能力、技术栈最相关、成果最突出&lt;/strong>的2-5个项目详细描述。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工作经历 (Work Experience) - 如果适用&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果项目经验部分已经详细描述了工作中的项目，这部分可以简洁一些，重点放在公司、职位、在职时间、总体职责和团队贡献上。&lt;/li>
&lt;li>如果项目经验独立列出，这部分可以更侧重职责概述和关键成就（同样量化）。&lt;/li>
&lt;li>同样&lt;strong>倒序排列&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>包含：&lt;/strong> 公司名称、职位、在职时间（年月）、地点（可选）。&lt;/li>
&lt;li>&lt;strong>职责与成就：&lt;/strong> 用简练的要点描述你的核心职责和主要成就，强调与目标职位相关的部分。可以引用项目经验部分的关键成就。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>教育背景 (Education)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>学校名称、学位（如：工学学士/计算机科学）、专业、就读时间（年月）、地点。&lt;/li>
&lt;li>&lt;strong>应届生/经验少者：&lt;/strong>
&lt;ul>
&lt;li>列出相关核心课程（如：数据结构、算法、操作系统、计算机网络、数据库原理、软件工程等）。&lt;/li>
&lt;li>列出高GPA（如：GPA：3.8/4.0）。&lt;/li>
&lt;li>列出获得的奖学金、荣誉（如：校级优秀毕业生、ACM竞赛奖项）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>经验丰富者：&lt;/strong> 可简化为学校、学位、专业、时间。除非是顶尖名校或与研究领域高度相关，否则课程和GPA通常可以省略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他 (可选)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>奖项荣誉：&lt;/strong> 如技术竞赛奖项（ACM ICPC, Kaggle等）、优秀员工奖、重要奖学金等。&lt;/li>
&lt;li>&lt;strong>证书：&lt;/strong> 与目标职位高度相关的专业认证（如：AWS Certified Solutions Architect, Google Cloud Professional Developer, Kubernetes相关认证等）。&lt;strong>不要堆砌无关证书。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>语言能力：&lt;/strong> 如果职位有要求或你的语言能力突出。&lt;/li>
&lt;li>&lt;strong>开源贡献：&lt;/strong> 如果贡献显著，可以在项目经验或此处单独列出。&lt;/li>
&lt;li>&lt;strong>社区参与：&lt;/strong> 如技术社区组织者、技术演讲经历等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="格式与排版要点">格式与排版要点
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>文件格式：&lt;/strong> &lt;strong>务必保存为PDF格式！&lt;/strong> 避免Word在不同设备上格式错乱。&lt;/li>
&lt;li>&lt;strong>命名规范：&lt;/strong> &lt;code>你的姓名_应聘职位_简历.pdf&lt;/code> （例如：&lt;code>张三_Java后端开发工程师_简历.pdf&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>字体与字号：&lt;/strong> 使用专业易读的字体（如Arial, Calibri, Times New Roman）。标题字号稍大（如12-14pt），正文（如10-11pt）。保持全文一致。&lt;/li>
&lt;li>&lt;strong>留白：&lt;/strong> 有足够的页边距和行间距，避免拥挤。&lt;/li>
&lt;li>&lt;strong>长度：&lt;/strong> &lt;strong>应届生/初级：一页。&lt;/strong> 中级/高级：一页为主，经验非常丰富且相关可两页，但第二页内容必须非常扎实。&lt;strong>超过两页通常不利。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>语法与拼写：&lt;/strong> &lt;strong>零容忍！&lt;/strong> 务必反复检查，最好请他人帮忙校对。拼写和语法错误会极大损害专业形象。&lt;/li>
&lt;li>&lt;strong>真实性：&lt;/strong> 绝对不要造假！面试中很容易被识破。&lt;/li>
&lt;/ol>
&lt;h2 id="针对不同背景的侧重点">针对不同背景的侧重点
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>应届毕业生：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>教育背景&lt;/strong>和&lt;strong>项目经验&lt;/strong>是核心。课程项目、个人项目、实习经历、竞赛经历尤为重要。&lt;/li>
&lt;li>强调&lt;strong>基础扎实&lt;/strong>（数据结构、算法、操作系统等）。&lt;/li>
&lt;li>展示&lt;strong>学习能力&lt;/strong>和&lt;strong>技术热情&lt;/strong>（通过项目、GitHub、博客体现）。&lt;/li>
&lt;li>如果实习经历与目标职位强相关，可放在工作经历部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>初级开发者 (1-3年经验)：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>项目经验&lt;/strong>和&lt;strong>技术技能&lt;/strong>是核心。详细描述工作中承担的具体任务和技术贡献。&lt;/li>
&lt;li>开始强调&lt;strong>解决问题能力&lt;/strong>、&lt;strong>协作能力&lt;/strong>（在项目描述中体现）。&lt;/li>
&lt;li>量化成果更加重要。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>中高级开发者/专家：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>项目经验&lt;/strong>（突出复杂系统的设计、架构、性能优化、技术决策、领导力）和&lt;strong>技术深度/广度&lt;/strong>是核心。&lt;/li>
&lt;li>强调&lt;strong>架构设计能力&lt;/strong>、&lt;strong>技术影响力&lt;/strong>（如指导他人、技术选型、推动最佳实践）、&lt;strong>业务理解&lt;/strong>和&lt;strong>成果影响力&lt;/strong>。&lt;/li>
&lt;li>可以适当增加项目或职责的&lt;strong>战略层面&lt;/strong>描述。&lt;/li>
&lt;li>开源贡献、技术社区影响力是强有力的加分项。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="最后的重要步骤">最后的重要步骤
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>定制化！定制化！定制化！&lt;/strong> 每次投递前，仔细研究目标职位的&lt;strong>职位描述 (Job Description, JD)&lt;/strong>。找出关键词（技术要求、职责描述、软技能要求），然后调整你的简历：
&lt;ul>
&lt;li>在“技术技能”部分突出JD中强调的技能。&lt;/li>
&lt;li>在“项目经验/工作经历”描述中，使用JD中的关键词，并选择最能体现JD要求能力的项目进行详细描述。&lt;/li>
&lt;li>调整“求职意向/个人总结”以匹配该职位的核心要求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>善用关键词：&lt;/strong> ATS系统会扫描简历关键词。确保包含JD中的关键技术术语（编程语言、框架、工具等）。&lt;/li>
&lt;li>&lt;strong>准备作品集：&lt;/strong> 确保你的GitHub链接有效，重要项目的README清晰专业。个人网站/博客内容要有价值。&lt;/li>
&lt;li>&lt;strong>寻求反馈：&lt;/strong> 在最终投递前，请有经验的学长学姐、导师、同行或职业顾问帮忙审阅简历，提供修改意见。&lt;/li>
&lt;li>&lt;strong>持续更新：&lt;/strong> 每完成一个重要项目、学习一项新技能或获得新成就，及时更新简历。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>总结：&lt;/strong> 一份优秀的计算机简历是精心打磨的结果。它不仅是经历的罗列，更是你技术能力、解决问题能力和职业价值的&lt;strong>精准营销文案&lt;/strong>。遵循以上原则，认真定制，突出亮点和量化成果，你就能在众多求职者中脱颖而出，赢得宝贵的面试机会！祝你求职顺利！&lt;/p></description></item><item><title>Javasript 环境搭建</title><link>https://muo123.github.io/articles/javasript-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Sat, 14 Jun 2025 14:12:49 +0800</pubDate><guid>https://muo123.github.io/articles/javasript-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250614/jFCO/915X336/image.png" alt="Featured image of post Javasript 环境搭建" />&lt;p>在JavaScript开发中，环境搭建取决于你的开发目标（前端、后端或全栈）。以下是详细的环境搭建指南：&lt;/p>
&lt;hr>
&lt;h3 id="一基础工具安装">&lt;strong>一、基础工具安装&lt;/strong>
&lt;/h3>&lt;h4 id="1-nodejs-环境后端构建工具必需">1. &lt;strong>Node.js 环境&lt;/strong>（后端/构建工具必需）
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>下载&lt;/strong>：访问 &lt;a class="link" href="https://nodejs.org" target="_blank" rel="noopener"
>Node.js 官网&lt;/a>&lt;/li>
&lt;li>&lt;strong>安装&lt;/strong>：
&lt;ul>
&lt;li>推荐选择 &lt;strong>LTS&lt;/strong>（长期支持版）&lt;/li>
&lt;li>安装时勾选 &lt;code>npm package manager&lt;/code>（Node 自带 npm）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>验证安装&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>node -v &lt;span style="color:#78787e"># 查看 Node 版本（需 v18+）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm -v &lt;span style="color:#78787e"># 查看 npm 版本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="2-代码编辑器推荐">2. &lt;strong>代码编辑器&lt;/strong>（推荐）
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>VS Code&lt;/strong>（免费且强大）：
&lt;ul>
&lt;li>下载地址：&lt;a class="link" href="https://code.visualstudio.com" target="_blank" rel="noopener"
>https://code.visualstudio.com&lt;/a>&lt;/li>
&lt;li>必装插件：
&lt;ul>
&lt;li>&lt;strong>ESLint&lt;/strong>（代码规范检查）&lt;/li>
&lt;li>&lt;strong>Prettier&lt;/strong>（代码格式化）&lt;/li>
&lt;li>&lt;strong>Live Server&lt;/strong>（前端实时热更新）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="二前端开发环境">&lt;strong>二、前端开发环境&lt;/strong>
&lt;/h3>&lt;h4 id="1-创建项目">1. &lt;strong>创建项目&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir my-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> my-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm init -y &lt;span style="color:#78787e"># 生成 package.json&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-安装基础依赖">2. &lt;strong>安装基础依赖&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install vite --save-dev &lt;span style="color:#78787e"># 推荐构建工具（替代 Webpack）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-项目结构">3. &lt;strong>项目结构&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>my-app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── node_modules/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── src/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── index.js # JS 入口文件
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── index.html # HTML 入口
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── package.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── vite.config.js # Vite 配置文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-启动开发服务器">4. &lt;strong>启动开发服务器&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// package.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#5af78e">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#34;dev&amp;#34;&lt;/span>: &lt;span style="color:#5af78e">&amp;#34;vite&amp;#34;&lt;/span> &lt;span style="color:#78787e">// 启动开发服务器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run dev &lt;span style="color:#78787e"># 访问 http://localhost:5173&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="三后端开发环境nodejs">&lt;strong>三、后端开发环境（Node.js）&lt;/strong>
&lt;/h3>&lt;h4 id="1-初始化项目">1. &lt;strong>初始化项目&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir my-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> my-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm init -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-安装-express示例框架">2. &lt;strong>安装 Express（示例框架）&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install express
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-创建入口文件">3. &lt;strong>创建入口文件&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// server.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">const&lt;/span> express &lt;span style="color:#ff6ac1">=&lt;/span> require(&lt;span style="color:#5af78e">&amp;#39;express&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> app &lt;span style="color:#ff6ac1">=&lt;/span> express();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> port &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">3000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#5af78e">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.send(&lt;span style="color:#5af78e">&amp;#39;Hello World!&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.listen(port, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#5af78e">`Server running at http://localhost:&lt;/span>&lt;span style="color:#5af78e">${&lt;/span>port&lt;span style="color:#5af78e">}&lt;/span>&lt;span style="color:#5af78e">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-启动服务器">4. &lt;strong>启动服务器&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">// package.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#5af78e">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#ff5c57">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#5af78e">&amp;#34;node server.js&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm start &lt;span style="color:#78787e"># 访问 http://localhost:3000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="四进阶工具">&lt;strong>四、进阶工具&lt;/strong>
&lt;/h3>&lt;h4 id="1-包管理加速">1. &lt;strong>包管理加速&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>使用国内镜像：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm config &lt;span style="color:#ff5c57">set&lt;/span> registry https://registry.npmmirror.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>或使用更快的 &lt;strong>pnpm&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install -g pnpm &lt;span style="color:#78787e"># 安装 pnpm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pnpm create vite &lt;span style="color:#78787e"># 用 pnpm 创建项目&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="2-版本控制">2. &lt;strong>版本控制&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>安装 Git：&lt;a class="link" href="https://git-scm.com" target="_blank" rel="noopener"
>https://git-scm.com&lt;/a>&lt;/li>
&lt;li>初始化仓库：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#5af78e">&amp;#34;Initial commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="3-浏览器调试">3. &lt;strong>浏览器调试&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>Chrome 开发者工具：按 &lt;code>F12&lt;/code> 打开&lt;/li>
&lt;li>Node.js 调试：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>node --inspect server.js &lt;span style="color:#78787e"># 通过 Chrome 访问 chrome://inspect&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="五环境验证">&lt;strong>五、环境验证&lt;/strong>
&lt;/h3>&lt;h4 id="前端示例vite--react">前端示例（Vite + React）
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm create vite@latest my-react-app -- --template react
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> my-react-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm run dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="后端示例express-api">后端示例（Express API）
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://localhost:3000 &lt;span style="color:#78787e"># 应返回 &amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="常见问题解决">&lt;strong>常见问题解决&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>权限错误&lt;/strong>（Mac/Linux）：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo chown -R &lt;span style="color:#ff5c57">$USER&lt;/span> /usr/local/lib/node_modules
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>端口占用&lt;/strong>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lsof -i :3000 &lt;span style="color:#78787e"># 查看占用进程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">kill&lt;/span> -9 &amp;lt;PID&amp;gt; &lt;span style="color:#78787e"># 结束进程&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>依赖安装失败&lt;/strong>：
&lt;ul>
&lt;li>删除 &lt;code>node_modules&lt;/code> 和 &lt;code>package-lock.json&lt;/code>&lt;/li>
&lt;li>重新执行 &lt;code>npm install&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>提示：现代项目推荐使用 &lt;strong>Vite&lt;/strong>（前端）和 &lt;strong>Express&lt;/strong>/&lt;strong>Koa&lt;/strong>（后端）组合，兼顾速度和轻量。&lt;/p>&lt;/blockquote></description></item><item><title>Hugo 怎么显示北京时间，并添加文章修改时间</title><link>https://muo123.github.io/articles/hugo-%E6%80%8E%E4%B9%88%E6%98%BE%E7%A4%BA%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/</link><pubDate>Fri, 13 Jun 2025 09:14:14 +0800</pubDate><guid>https://muo123.github.io/articles/hugo-%E6%80%8E%E4%B9%88%E6%98%BE%E7%A4%BA%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/</guid><description>&lt;p>在 Hugo 中显示北京时间并添加文章修改时间，可以通过以下方式实现：&lt;/p>
&lt;hr>
&lt;h3 id="步骤">步骤：
&lt;/h3>&lt;h4 id="配置站点时区">&lt;strong>配置站点时区&lt;/strong>
&lt;/h4>&lt;p>在 &lt;code>hugo.toml&lt;/code> 中设置时区为 &lt;code>Asia/Shanghai&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>timeZone = &lt;span style="color:#5af78e">&amp;#39;Asia/Shanghai&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改变部署网站的时区&lt;code>/.github/workflows/deploy.yaml&lt;/code>，根据自己网站调整，下面演示的是部署网站为 Ubuntu 的设置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">runs-on&lt;/span>: ubuntu-latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">TZ&lt;/span>: Asia/Shanghai &lt;span style="color:#78787e"># 修改&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="修改时间格式">&lt;strong>修改时间格式&lt;/strong>
&lt;/h4>&lt;p>在 &lt;code>hugo.toml&lt;/code> 中修改 &lt;code>dateFormat&lt;/code> 字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[params.dateFormat]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>published = &lt;span style="color:#5af78e">&amp;#34;2006-01-02&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lastUpdated = &lt;span style="color:#5af78e">&amp;#34;2006-01-02 15:04 MST&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文章时间呈现效果如下&lt;/p>
&lt;p>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250613/ugFq/718X47/image.png"
loading="lazy"
alt="718X47/image.png"
>&lt;/p>
&lt;h4 id="添加文章最后修改时间">&lt;strong>添加文章最后修改时间&lt;/strong>
&lt;/h4>&lt;p>在文章的首部字段中添加 &lt;code>lastmod&lt;/code> 字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">title&lt;/span>: &lt;span style="color:#5af78e">&amp;#34;文章标题&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">date&lt;/span>: 2023-10-01T08:00:00&lt;span style="color:#ff9f43">+08&lt;/span>:&lt;span style="color:#ff9f43">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">lastmod&lt;/span>: 2023-10-05T14:30:00&lt;span style="color:#ff9f43">+08&lt;/span>:&lt;span style="color:#ff9f43">00&lt;/span> &lt;span style="color:#78787e"># 手动指定修改时间&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者在 &lt;code>hugo.toml&lt;/code> 中设置 &lt;code>frontmatter&lt;/code> 如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>enableGitInfo = &lt;span style="color:#ff6ac1">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 文件修改时间配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[frontmatter]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lastmod = [&lt;span style="color:#5af78e">&amp;#39;:git&amp;#39;&lt;/span>, &lt;span style="color:#5af78e">&amp;#39;lastmod&amp;#39;&lt;/span>, &lt;span style="color:#5af78e">&amp;#39;:fileModTime&amp;#39;&lt;/span>, &lt;span style="color:#5af78e">&amp;#39;date&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终效果如下：&lt;/p>
&lt;p>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250613/9bQn/711X53/image.png"
loading="lazy"
alt="711X53/image.png"
>&lt;/p>
&lt;p>可能出现文章日期一致或者不能正确显示正确修改时间，需要修改 Github Action 配置文件 &lt;code>.github\worflows\deploy.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Checkout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: actions/checkout@v4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">submodules&lt;/span>: &lt;span style="color:#ff6ac1">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">fetch-depth&lt;/span>: &lt;span style="color:#ff9f43">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Disable quotePath &lt;span style="color:#78787e"># 关闭 core.uotePath 属性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">run&lt;/span>: git config --global core.quotePath false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当文件名包含中文时，会使得 Git 对文件路径名称进行转义处理，导致无法正确获取 &lt;code>GitInfo&lt;/code> 变量信息，将 &lt;code>core.quotePath&lt;/code> 设置为 &lt;code>false&lt;/code> 即可解决。&lt;/p>
&lt;hr></description></item><item><title>怎么给 Hugo 添加 Waline 评论系统</title><link>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0-waline-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 12 Jun 2025 16:34:37 +0800</pubDate><guid>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0-waline-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250612/UeEL/1285X601/image.png" alt="Featured image of post 怎么给 Hugo 添加 Waline 评论系统" />&lt;p>在 Hugo 中添加 Waline 评论系统需要以下步骤：&lt;/p>
&lt;h3 id="1-leancloud-设置数据库">1. &lt;strong>LeanCloud 设置（数据库）&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.leancloud.app/login" target="_blank" rel="noopener"
>登录&lt;/a> 或 &lt;a class="link" href="https://console.leancloud.app/register" target="_blank" rel="noopener"
>注册&lt;/a> LeanCloud 国际版 并进入 &lt;a class="link" href="https://console.leancloud.app/apps" target="_blank" rel="noopener"
>控制台&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击左上角 &lt;a class="link" href="https://console.leancloud.app/apps" target="_blank" rel="noopener"
>创建应用&lt;/a> 并起一个你喜欢的名字 (请选择免费的开发版):
&lt;img src="https://waline.js.org/assets/leancloud-1-CucZPnJ0.png"
loading="lazy"
alt="创建应用"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进入应用，选择左下角的 &lt;code>设置 &amp;gt; 应用 Key&lt;/code>。你可以看到你的 &lt;code>APP ID&lt;/code>,&lt;code>APP Key&lt;/code>和 &lt;code>Master Key&lt;/code>。请记录它们，以便后续使用。
&lt;img src="https://waline.js.org/assets/leancloud-2-C9bCeSu_.png"
loading="lazy"
alt="ID 和 Key"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="2-部署-waline-服务端">2. &lt;strong>部署 Waline 服务端&lt;/strong>
&lt;/h3>&lt;p>首先需要一个 Waline 后端服务（支持 Vercel/Cloudflare/Docker 等）：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;a class="link" href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example" target="_blank" rel="noopener"
>Vercel 一键部署&lt;/a>（推荐）&lt;/li>
&lt;li>输入一个你喜欢的 Vercel 项目名称并点击 &lt;code>Create&lt;/code> 继续:
&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250612/WLY2/804X584/image.png"
loading="lazy"
alt="804X584/image.png"
>&lt;/li>
&lt;li>此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。一两分钟后部署成功，此时点击 &lt;code>Continue to Dashboard&lt;/code> 可以跳转到应用的控制台。
&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250612/Iyas/749X850/image.png"
loading="lazy"
alt="749X850/image.png"
>&lt;/li>
&lt;li>点击顶部的 &lt;code>Settings - Environment Variables&lt;/code> 进入环境变量配置页，并创建三个环境变量 &lt;code>LEAN_ID&lt;/code>, &lt;code>LEAN_KEY&lt;/code> 和 &lt;code>LEAN_MASTER_KEY&lt;/code> 。它们的值分别对应上一步在 LeanCloud 中获得的 &lt;code>APP ID&lt;/code>, &lt;code>APP KEY&lt;/code>, &lt;code>Master Key&lt;/code>，填入后保存。
&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250612/VVHX/837X665/image.png"
loading="lazy"
alt="837X665/image.png"
>&lt;/li>
&lt;li>环境变量配置完成之后点击顶部的 &lt;code>Deployments&lt;/code> 点击顶部最新的一次部署右侧的 &lt;code>Redeploy&lt;/code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。
&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250612/lqPE/923X664/image.png"
loading="lazy"
alt="923X664/image.png"
>&lt;/li>
&lt;li>此时会跳转到 &lt;code>Overview&lt;/code> 界面开始部署，等待片刻后 &lt;code>SStatus&lt;/code> 会变成 &lt;code>Ready&lt;/code>。此时请点击 &lt;code>Visit&lt;/code> ，即可跳转到部署好的网站地址
&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250612/qBop/843X398/image.png"
loading="lazy"
alt="843X398/image.png"
>&lt;/li>
&lt;li>部署完成后，请访问 &lt;code>&amp;lt;serverURL&amp;gt;/ui/register&lt;/code> 进行注册，首个注册的人会被设定成管理员。管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="3-配置参数stack-主题">3. &lt;strong>配置参数（Stack 主题）&lt;/strong>
&lt;/h3>&lt;p>由于 Stack 主题中包含 Waline 评论设置，因此直接在 &lt;code>hugo.toml&lt;/code> 中添加全局配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[params.comments]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled = &lt;span style="color:#ff6ac1">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider = &lt;span style="color:#5af78e">&amp;#39;waline&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [params.comments.waline]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serverURL = &lt;span style="color:#5af78e">&amp;#39;https://your-domain.vercel.app&amp;#39;&lt;/span>, &lt;span style="color:#78787e">## 填上 Domains 下的网址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lang = &lt;span style="color:#5af78e">&amp;#39;zh-CN&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requiredMeta = [&lt;span style="color:#5af78e">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;email&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="4-添加阅读量统计和评论数统计可选">4. &lt;strong>添加阅读量统计和评论数统计（可选）&lt;/strong>
&lt;/h3>&lt;p>修改配置&lt;code>hugo.toml&lt;/code>，添加阅读量统计和评论数统计：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[params.comments]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled = &lt;span style="color:#ff6ac1">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider = &lt;span style="color:#5af78e">&amp;#39;waline&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [params.comments.waline]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serverURL = &lt;span style="color:#5af78e">&amp;#39;https://your-domain.vercel.app&amp;#39;&lt;/span>, &lt;span style="color:#78787e">## 填上 Domains 下的网址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lang = &lt;span style="color:#5af78e">&amp;#39;zh-CN&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> comment = &lt;span style="color:#ff6ac1">true&lt;/span> &lt;span style="color:#78787e">## 开启评论计数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pageview = &lt;span style="color:#ff6ac1">true&lt;/span> &lt;span style="color:#78787e">## 开启阅读计数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requiredMeta = [&lt;span style="color:#5af78e">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#5af78e">&amp;#34;email&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改文章模板&lt;code>layouts/partials/article/components/details.html&lt;/code>，在&lt;code>&amp;lt;footer&amp;gt;&lt;/code>标签中添加如下代码片段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff6ac1">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;helper/icon&amp;#34; &amp;#34;eye&amp;#34; }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">time&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;article-pageview&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 阅读量：&amp;lt;&lt;span style="color:#ff6ac1">span&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;waline-pageview-count&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">data-path&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;{{ .RelPermalink }}&amp;#34;&lt;/span>&amp;gt;0&amp;lt;/&lt;span style="color:#ff6ac1">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">time&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff6ac1">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff6ac1">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;helper/icon&amp;#34; &amp;#34;message&amp;#34; }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">time&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;article-comment&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 评论数：&amp;lt;&lt;span style="color:#ff6ac1">span&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;waline-comment-count&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">data-path&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;{{.RelPermalink}}&amp;#34;&lt;/span>&amp;gt;0&amp;lt;/&lt;span style="color:#ff6ac1">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">time&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff6ac1">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong> ：需要在 &lt;code>assets/icons&lt;/code> 中添加对应图标，相应图标可以在网站下载 &lt;a class="link" href="https://tabler.io/icons" target="_blank" rel="noopener"
>https://tabler.io/icons&lt;/a>&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h3 id="5-本地测试--部署">5. &lt;strong>本地测试 &amp;amp; 部署&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>本地启动 Hugo：&lt;code>hugo server&lt;/code>&lt;/li>
&lt;li>检查评论框是否正常加载&lt;/li>
&lt;li>部署到生产环境：&lt;code>hugo&lt;/code>&lt;/li>
&lt;/ol>
&lt;hr></description></item><item><title>关于 Yaml、Toml、Json 三种数据格式的比较</title><link>https://muo123.github.io/articles/%E5%85%B3%E4%BA%8E-yamltomljson-%E4%B8%89%E7%A7%8D%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83/</link><pubDate>Wed, 11 Jun 2025 19:43:34 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%85%B3%E4%BA%8E-yamltomljson-%E4%B8%89%E7%A7%8D%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83/</guid><description>&lt;p>TOML、YAML 和 JSON 都是流行的数据序列化格式，用于存储和交换结构化数据，尤其在配置文件中非常常见。它们各有优缺点，适用于不同的场景。下面是它们的详细比较：&lt;/p>
&lt;h2 id="核心特性概述">核心特性概述
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>JSON (JavaScript Object Notation)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>起源：&lt;/strong> 源自 JavaScript，但现在是语言无关的。&lt;/li>
&lt;li>&lt;strong>设计理念：&lt;/strong> 简洁、轻量、易于机器解析和生成，最初主要用于网络数据交换。&lt;/li>
&lt;li>&lt;strong>语法：&lt;/strong> 基于键值对和嵌套结构。使用大括号 &lt;code>{}&lt;/code> 表示对象，方括号 &lt;code>[]&lt;/code> 表示数组。键必须用双引号 &lt;code>&amp;quot;&amp;quot;&lt;/code> 包裹，字符串值也必须用双引号 &lt;code>&amp;quot;&amp;quot;&lt;/code> 包裹。&lt;/li>
&lt;li>&lt;strong>数据类型：&lt;/strong> 字符串、数字、布尔值 (&lt;code>true&lt;/code>/&lt;code>false&lt;/code>)、&lt;code>null&lt;/code>、对象、数组。&lt;/li>
&lt;li>&lt;strong>可读性：&lt;/strong> 对人类相对友好，但嵌套深时括号匹配可能降低可读性。严格的引号和逗号要求有时显得冗余。&lt;/li>
&lt;li>&lt;strong>注释：&lt;/strong> &lt;strong>不支持注释！&lt;/strong> 这是 JSON 在配置文件场景下的最大短板。&lt;/li>
&lt;li>&lt;strong>安全性：&lt;/strong> 相对安全，解析器通常只处理数据，不执行代码（但要注意 &lt;code>eval()&lt;/code> 的危险用法）。&lt;/li>
&lt;li>&lt;strong>工具支持：&lt;/strong> 几乎所有编程语言都有成熟、高性能的原生或第三方解析/序列化库。是 Web API 的事实标准。&lt;/li>
&lt;li>&lt;strong>典型应用：&lt;/strong> Web API 请求/响应、NoSQL 数据库（如 MongoDB）、前端配置（如 &lt;code>package.json&lt;/code>）、简单数据存储。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>YAML (YAML Ain&amp;rsquo;t Markup Language)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>起源：&lt;/strong> 设计目标是比 XML 更人性化，比 JSON 更强大。&lt;/li>
&lt;li>&lt;strong>设计理念：&lt;/strong> 强调&lt;strong>人类可读性&lt;/strong>和&lt;strong>数据表达能力&lt;/strong>。目标是成为一种对所有编程任务都友好的数据格式。&lt;/li>
&lt;li>&lt;strong>语法：&lt;/strong> 使用&lt;strong>缩进&lt;/strong>(通常是空格)来表示层级关系。结构清晰，类似大纲。键值对用冒号 &lt;code>:&lt;/code> 分隔。支持流式风格（类似 JSON）和块式风格（基于缩进）。字符串通常不需要引号（除非包含特殊字符）。支持锚点 (&lt;code>&amp;amp;&lt;/code>) 和别名 (&lt;code>*&lt;/code>) 实现引用复用。&lt;/li>
&lt;li>&lt;strong>数据类型：&lt;/strong> 在 JSON 基础上扩展，支持更丰富的标量类型（日期、时间戳、复数、null 的不同表示等）、更灵活的集合类型。&lt;/li>
&lt;li>&lt;strong>可读性：&lt;/strong> &lt;strong>非常高&lt;/strong>。简洁的缩进结构、无需引号的字符串、支持多行字符串使其看起来像自然文档。注释用 &lt;code>#&lt;/code> 开头。&lt;/li>
&lt;li>&lt;strong>注释：&lt;/strong> &lt;strong>支持注释&lt;/strong> (&lt;code># 这是一个注释&lt;/code>)。&lt;/li>
&lt;li>&lt;strong>安全性：&lt;/strong> &lt;strong>潜在风险较高！&lt;/strong> 某些语言的 YAML 解析器默认支持反序列化任意类（如 Python 的 PyYAML &lt;code>FullLoader&lt;/code>），可能导致代码执行漏洞（如 &lt;code>!!python/object&lt;/code> 标签）。&lt;strong>使用时务必使用安全加载器（如 &lt;code>SafeLoader&lt;/code>）并禁用不安全特性。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>工具支持：&lt;/strong> 主流语言都有库支持，但解析器实现可能更复杂（尤其处理缩进、隐式类型转换时），性能通常比 JSON 解析器稍差。&lt;/li>
&lt;li>&lt;strong>典型应用：&lt;/strong> 复杂配置文件（如 Kubernetes manifests, Docker Compose, Ansible Playbooks, CI/CD pipelines）、数据序列化（强调可读性时）、文档模板。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>TOML (Tom&amp;rsquo;s Obvious, Minimal Language)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>起源：&lt;/strong> 由 GitHub 联合创始人 Tom Preston-Werner 创建，旨在成为一个比 INI 文件更强大但比 YAML 更简单的配置文件格式。&lt;/li>
&lt;li>&lt;strong>设计理念：&lt;/strong> &lt;strong>明确性&lt;/strong>和&lt;strong>最小化歧义&lt;/strong>。目标是成为一种明显、无歧义的配置文件格式。&lt;/li>
&lt;li>&lt;strong>语法：&lt;/strong> 类似 INI 文件，但有更严格和强大的定义。主要结构是键值对 &lt;code>key = &amp;quot;value&amp;quot;&lt;/code> 和表（节）&lt;code>[table_name]&lt;/code>。表可以嵌套 &lt;code>[parent.child]&lt;/code>。支持数组 &lt;code>[...]&lt;/code> 和内联表 &lt;code>{...}&lt;/code>。键和基本字符串通常不需要引号（除非包含特殊字符或空格）。日期时间是一等公民。&lt;/li>
&lt;li>&lt;strong>数据类型：&lt;/strong> 字符串、整数、浮点数、布尔值、日期时间（带时区）、数组、内联表（相当于对象）。&lt;/li>
&lt;li>&lt;strong>可读性：&lt;/strong> &lt;strong>非常高&lt;/strong>。对于键值对和表结构非常直观清晰，尤其适合扁平和中等嵌套深度的配置。结构非常明显。&lt;/li>
&lt;li>&lt;strong>注释：&lt;/strong> &lt;strong>支持注释&lt;/strong> (&lt;code># 这是一个注释&lt;/code>)。&lt;/li>
&lt;li>&lt;strong>安全性：&lt;/strong> &lt;strong>高&lt;/strong>。语法简单明确，解析器通常只处理数据，没有执行代码的机制。&lt;/li>
&lt;li>&lt;strong>工具支持：&lt;/strong> 主流语言都有良好的库支持。解析器相对简单，性能通常很好。&lt;/li>
&lt;li>&lt;strong>典型应用：&lt;/strong> 应用程序配置文件（如 Rust 的 &lt;code>Cargo.toml&lt;/code>, Python 的 &lt;code>pyproject.toml&lt;/code>）、需要明确性和简单性的场景、替代 INI 文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="关键维度对比表">关键维度对比表
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">特性&lt;/th>
&lt;th style="text-align: left">JSON&lt;/th>
&lt;th style="text-align: left">YAML&lt;/th>
&lt;th style="text-align: left">TOML&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>设计目标&lt;/strong>&lt;/td>
&lt;td style="text-align: left">数据交换 (简洁, 机器友好)&lt;/td>
&lt;td style="text-align: left">数据序列化 (强大, 人类友好)&lt;/td>
&lt;td style="text-align: left">配置文件 (明确, 最小歧义)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>可读性&lt;/strong>&lt;/td>
&lt;td style="text-align: left">中等 (括号多, 引号多)&lt;/td>
&lt;td style="text-align: left">&lt;strong>非常高&lt;/strong> (缩进, 少引号, 像文档)&lt;/td>
&lt;td style="text-align: left">&lt;strong>非常高&lt;/strong> (键值对清晰, 表结构)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>语法&lt;/strong>&lt;/td>
&lt;td style="text-align: left">括号 &lt;code>{} []&lt;/code>, 严格引号&lt;/td>
&lt;td style="text-align: left">&lt;strong>缩进&lt;/strong> (空格), 冒号 &lt;code>:&lt;/code>&lt;/td>
&lt;td style="text-align: left">等号 &lt;code>=&lt;/code>, 表 &lt;code>[...]&lt;/code>, 点号 &lt;code>.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>数据类型&lt;/strong>&lt;/td>
&lt;td style="text-align: left">基础 (字符串, 数字, 布尔, null, 对象, 数组)&lt;/td>
&lt;td style="text-align: left">&lt;strong>丰富&lt;/strong> (基础 + 日期, 时间, 引用, 自定义标量等)&lt;/td>
&lt;td style="text-align: left">基础 + &lt;strong>日期时间&lt;/strong> + 内联表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>注释&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;strong>❌ 不支持&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;strong>✅ 支持&lt;/strong> (&lt;code>#&lt;/code>)&lt;/td>
&lt;td style="text-align: left">&lt;strong>✅ 支持&lt;/strong> (&lt;code>#&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>复杂性/强大性&lt;/strong>&lt;/td>
&lt;td style="text-align: left">简单&lt;/td>
&lt;td style="text-align: left">&lt;strong>非常强大/复杂&lt;/strong>&lt;/td>
&lt;td style="text-align: left">中等 (比 JSON 强, 比 YAML 简单)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>安全性&lt;/strong>&lt;/td>
&lt;td style="text-align: left">高 (通常只解析数据)&lt;/td>
&lt;td style="text-align: left">&lt;strong>⚠️ 需谨慎&lt;/strong> (默认可能不安全)&lt;/td>
&lt;td style="text-align: left">高 (只解析数据)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>解析性能&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;strong>通常最高&lt;/strong> (库高度优化)&lt;/td>
&lt;td style="text-align: left">通常较低 (语法复杂)&lt;/td>
&lt;td style="text-align: left">通常高 (语法相对简单)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>工具支持&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;strong>无处不在&lt;/strong>&lt;/td>
&lt;td style="text-align: left">广泛&lt;/td>
&lt;td style="text-align: left">广泛 (尤其在较新生态)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>典型场景&lt;/strong>&lt;/td>
&lt;td style="text-align: left">API, Web 数据交换, 简单配置&lt;/td>
&lt;td style="text-align: left">&lt;strong>复杂配置&lt;/strong> (K8s, Ansible), 文档&lt;/td>
&lt;td style="text-align: left">&lt;strong>应用配置&lt;/strong> (Cargo, pip), 替代 INI&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>主要优势&lt;/strong>&lt;/td>
&lt;td style="text-align: left">通用性, 速度, Web 标准&lt;/td>
&lt;td style="text-align: left">可读性, 表达能力, 复杂结构&lt;/td>
&lt;td style="text-align: left">可读性, 明确性, 安全性, 简单配置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>主要劣势&lt;/strong>&lt;/td>
&lt;td style="text-align: left">无注释, 冗余引号, 嵌套深时难读&lt;/td>
&lt;td style="text-align: left">缩进错误, 安全性风险, 过度复杂&lt;/td>
&lt;td style="text-align: left">嵌套深时不如 YAML 优雅&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="如何选择">如何选择？
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>选择 JSON 如果：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>你需要&lt;strong>最大化的互操作性和通用性&lt;/strong>（尤其是在 Web API 和前后端通信中）。&lt;/li>
&lt;li>你非常注重&lt;strong>解析性能&lt;/strong>。&lt;/li>
&lt;li>你的数据结构相对简单或嵌套不深。&lt;/li>
&lt;li>注释不是必需（或者你可以通过其他方式变通）。&lt;/li>
&lt;li>你处于一个以 JavaScript/Web 为中心的环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>选择 YAML 如果：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>人类可读性和可写性&lt;/strong>是你的最高优先级（配置文件需要经常手动编辑）。&lt;/li>
&lt;li>你的配置&lt;strong>非常复杂&lt;/strong>，有深度嵌套、大量重复结构（可用锚点/别名）、需要多行字符串等。&lt;/li>
&lt;li>你需要&lt;strong>丰富的原生数据类型&lt;/strong>（尤其是日期时间）。&lt;/li>
&lt;li>你&lt;strong>需要注释&lt;/strong>。&lt;/li>
&lt;li>你使用的工具链（如 Kubernetes, Ansible, GitLab CI）&lt;strong>原生支持或强制使用 YAML&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>⚠️ 重要提示：&lt;/strong> 务必使用安全加载方式并了解潜在风险！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>选择 TOML 如果：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>你的主要需求是&lt;strong>清晰、明确的配置文件&lt;/strong>。&lt;/li>
&lt;li>你追求&lt;strong>高可读性&lt;/strong>，但觉得 YAML 的缩进规则有时容易出错或过于灵活。&lt;/li>
&lt;li>你需要一个&lt;strong>比 INI 强大得多&lt;/strong>的格式。&lt;/li>
&lt;li>你&lt;strong>需要注释&lt;/strong>。&lt;/li>
&lt;li>你重视&lt;strong>安全性&lt;/strong>和&lt;strong>简单性&lt;/strong>。&lt;/li>
&lt;li>你使用的语言/工具（如 Rust/Cargo, Python/pip/Poetry）&lt;strong>推荐或默认使用 TOML&lt;/strong>。&lt;/li>
&lt;li>你的配置结构以&lt;strong>键值对和表为主&lt;/strong>，嵌套深度适中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>JSON:&lt;/strong> 数据交换之王，性能好，通用性强，无注释是硬伤。&lt;strong>选它用于机器间的数据传递（尤其是 Web）。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>YAML:&lt;/strong> 人类可读性巅峰，表达能力极强，适合复杂配置，但语法复杂且有安全风险需注意。&lt;strong>选它用于需要高可读性和强大表达力的复杂配置（如 DevOps 工具链）。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>TOML:&lt;/strong> 配置文件的“金发姑娘”（刚刚好），明确、易读、安全、支持注释，在扁平和中等嵌套配置中表现最佳。&lt;strong>选它用于应用程序的配置文件（尤其是较新生态的项目）。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>最终选择取决于你的具体需求：是更侧重机器处理、通用性（JSON），还是人类编辑、表达能力（YAML），或是配置的明确性、安全性、简洁性（TOML）。了解它们的差异有助于你在不同场景下做出最佳选择。&lt;/p></description></item><item><title>详细了解 SQL</title><link>https://muo123.github.io/articles/%E8%AF%A6%E7%BB%86%E4%BA%86%E8%A7%A3-sql/</link><pubDate>Tue, 10 Jun 2025 19:54:08 +0800</pubDate><guid>https://muo123.github.io/articles/%E8%AF%A6%E7%BB%86%E4%BA%86%E8%A7%A3-sql/</guid><description>&lt;p>&lt;strong>SQL (Structured Query Language)&lt;/strong>，它是与关系型数据库进行交互的&lt;strong>标准编程语言&lt;/strong>。&lt;/p>
&lt;h2 id="核心概念">核心概念
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>关系型数据库 (RDBMS):&lt;/strong>
&lt;ul>
&lt;li>SQL 操作的对象是&lt;strong>关系型数据库管理系统&lt;/strong>，如 MySQL, PostgreSQL, Oracle, Microsoft SQL Server, SQLite 等。&lt;/li>
&lt;li>数据以&lt;strong>表&lt;/strong>的形式组织存储，类似于电子表格。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>表 (Table):&lt;/strong>
&lt;ul>
&lt;li>数据库中的基本结构，用于存储特定类型的数据实体（例如：&lt;code>Customers&lt;/code>, &lt;code>Orders&lt;/code>, &lt;code>Products&lt;/code>）。&lt;/li>
&lt;li>一个数据库通常包含多个表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>列 (Column):&lt;/strong>
&lt;ul>
&lt;li>定义表中的属性或字段（例如：在 &lt;code>Customers&lt;/code> 表中，可能有 &lt;code>CustomerID&lt;/code>, &lt;code>FirstName&lt;/code>, &lt;code>LastName&lt;/code>, &lt;code>Email&lt;/code>, &lt;code>City&lt;/code> 等列）。&lt;/li>
&lt;li>每列有特定的数据类型（如整数 &lt;code>INT&lt;/code>, 字符串 &lt;code>VARCHAR&lt;/code>, 日期 &lt;code>DATE&lt;/code>, 布尔值 &lt;code>BOOLEAN&lt;/code> 等）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>行 (Row) / 记录 (Record):&lt;/strong>
&lt;ul>
&lt;li>表中的一条具体数据项（例如：一行代表一个具体的客户信息）。&lt;/li>
&lt;li>每一行在表中应该是唯一的（通常通过主键保证）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>主键 (Primary Key):&lt;/strong>
&lt;ul>
&lt;li>表中一列或一组列，其值能&lt;strong>唯一标识&lt;/strong>表中的每一行（例如：&lt;code>CustomerID&lt;/code>）。不能为 &lt;code>NULL&lt;/code> 且值必须唯一。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>外键 (Foreign Key):&lt;/strong>
&lt;ul>
&lt;li>一个表中的一列（或一组列），其值引用另一个表的&lt;strong>主键&lt;/strong>。用于建立表与表之间的&lt;strong>关系&lt;/strong>（例如：&lt;code>Orders&lt;/code> 表中的 &lt;code>CustomerID&lt;/code> 列是外键，引用 &lt;code>Customers&lt;/code> 表的主键 &lt;code>CustomerID&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="sql-的主要组成部分按功能分类">SQL 的主要组成部分（按功能分类）
&lt;/h2>&lt;p>SQL 语句根据其功能主要分为以下几类：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>DDL (Data Definition Language - 数据定义语言):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于&lt;strong>定义、修改和删除数据库结构&lt;/strong>（模式）。&lt;/li>
&lt;li>主要语句：
&lt;ul>
&lt;li>&lt;code>CREATE&lt;/code>: 创建数据库、表、索引、视图等对象。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">CREATE&lt;/span> &lt;span style="color:#ff6ac1">TABLE&lt;/span> Customers (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CustomerID &lt;span style="color:#ff5c57">INT&lt;/span> &lt;span style="color:#ff6ac1">PRIMARY&lt;/span> &lt;span style="color:#ff6ac1">KEY&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FirstName &lt;span style="color:#ff5c57">VARCHAR&lt;/span>(&lt;span style="color:#ff9f43">50&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LastName &lt;span style="color:#ff5c57">VARCHAR&lt;/span>(&lt;span style="color:#ff9f43">50&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Email &lt;span style="color:#ff5c57">VARCHAR&lt;/span>(&lt;span style="color:#ff9f43">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>ALTER&lt;/code>: 修改现有数据库对象的结构（如添加、删除或修改列）。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">ALTER&lt;/span> &lt;span style="color:#ff6ac1">TABLE&lt;/span> Customers &lt;span style="color:#ff6ac1">ADD&lt;/span> &lt;span style="color:#ff6ac1">COLUMN&lt;/span> PhoneNumber &lt;span style="color:#ff5c57">VARCHAR&lt;/span>(&lt;span style="color:#ff9f43">20&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>DROP&lt;/code>: 删除数据库对象（表、索引、视图等）。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">DROP&lt;/span> &lt;span style="color:#ff6ac1">TABLE&lt;/span> OldCustomers;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>TRUNCATE&lt;/code>: 快速删除表中的所有数据（保留表结构），通常比 &lt;code>DELETE&lt;/code> 更快且不记录单个行删除。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">TRUNCATE&lt;/span> &lt;span style="color:#ff6ac1">TABLE&lt;/span> LogEntries;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DML (Data Manipulation Language - 数据操作语言):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于&lt;strong>操作数据库表中的实际数据&lt;/strong>（增、删、改）。&lt;/li>
&lt;li>主要语句：
&lt;ul>
&lt;li>&lt;code>INSERT&lt;/code>: 向表中插入新的数据行。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">INSERT&lt;/span> &lt;span style="color:#ff6ac1">INTO&lt;/span> Customers (FirstName, LastName, Email)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">VALUES&lt;/span> (&lt;span style="color:#5af78e">&amp;#39;John&amp;#39;&lt;/span>, &lt;span style="color:#5af78e">&amp;#39;Doe&amp;#39;&lt;/span>, &lt;span style="color:#5af78e">&amp;#39;john.doe@example.com&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>UPDATE&lt;/code>: 修改表中已有的数据行。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">UPDATE&lt;/span> Customers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">SET&lt;/span> Email &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">&amp;#39;new.email@example.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">WHERE&lt;/span> CustomerID &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">123&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>DELETE&lt;/code>: 从表中删除数据行。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">DELETE&lt;/span> &lt;span style="color:#ff6ac1">FROM&lt;/span> Customers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">WHERE&lt;/span> CustomerID &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">456&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DQL (Data Query Language - 数据查询语言):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主要用于&lt;strong>从数据库中检索数据&lt;/strong>。虽然只有一个核心语句，但它是最常用和最复杂的部分。&lt;/li>
&lt;li>核心语句：
&lt;ul>
&lt;li>&lt;code>SELECT&lt;/code>: 从一个或多个表中查询数据。功能极其强大，包含众多子句：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">SELECT&lt;/span> column1, column2, ... &lt;span style="color:#ff6ac1">|&lt;/span> &lt;span style="color:#ff6ac1">*&lt;/span> &lt;span style="color:#78787e">-- 选择要返回的列 (* 表示所有列)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>&lt;span style="color:#ff6ac1">FROM&lt;/span> &lt;span style="color:#ff6ac1">table_name&lt;/span> &lt;span style="color:#78787e">-- 指定数据来源的表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>[&lt;span style="color:#ff6ac1">WHERE&lt;/span> condition] &lt;span style="color:#78787e">-- 过滤行 (基于指定条件)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>[&lt;span style="color:#ff6ac1">GROUP&lt;/span> &lt;span style="color:#ff6ac1">BY&lt;/span> &lt;span style="color:#ff6ac1">column_name&lt;/span>] &lt;span style="color:#78787e">-- 将结果集按一列或多列分组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>[&lt;span style="color:#ff6ac1">HAVING&lt;/span> condition] &lt;span style="color:#78787e">-- 对分组后的结果集进行过滤 (与 GROUP BY 配合使用)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>[&lt;span style="color:#ff6ac1">ORDER&lt;/span> &lt;span style="color:#ff6ac1">BY&lt;/span> &lt;span style="color:#ff6ac1">column_name&lt;/span> [&lt;span style="color:#ff6ac1">ASC&lt;/span>&lt;span style="color:#ff6ac1">|&lt;/span>&lt;span style="color:#ff6ac1">DESC&lt;/span>]] &lt;span style="color:#78787e">-- 对结果集排序 (ASC 升序, DESC 降序)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&lt;/span>[&lt;span style="color:#ff6ac1">LIMIT&lt;/span> &lt;span style="color:#ff5c57">number&lt;/span>]; &lt;span style="color:#78787e">-- 限制返回的行数
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>关键子句详解 (&lt;code>SELECT&lt;/code>):&lt;/strong>
&lt;ul>
&lt;li>&lt;code>JOIN&lt;/code> (&lt;code>INNER JOIN&lt;/code>, &lt;code>LEFT JOIN&lt;/code> / &lt;code>LEFT OUTER JOIN&lt;/code>, &lt;code>RIGHT JOIN&lt;/code> / &lt;code>RIGHT OUTER JOIN&lt;/code>, &lt;code>FULL JOIN&lt;/code> / &lt;code>FULL OUTER JOIN&lt;/code>, &lt;code>CROSS JOIN&lt;/code>): 用于&lt;strong>组合来自两个或多个表&lt;/strong>的行，基于它们之间的相关列（通常是外键关系）。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">SELECT&lt;/span> Orders.OrderID, Customers.FirstName, Customers.LastName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span> Orders
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">INNER&lt;/span> &lt;span style="color:#ff6ac1">JOIN&lt;/span> Customers &lt;span style="color:#ff6ac1">ON&lt;/span> Orders.CustomerID &lt;span style="color:#ff6ac1">=&lt;/span> Customers.CustomerID; &lt;span style="color:#78787e">-- 只返回有匹配订单的客户
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>&lt;code>INNER JOIN&lt;/code>:&lt;/strong> 只返回两个表中匹配的行。&lt;/li>
&lt;li>&lt;strong>&lt;code>LEFT (OUTER) JOIN&lt;/code>:&lt;/strong> 返回左表 (FROM 后的表) 的所有行，即使右表中没有匹配。右表不匹配的部分用 &lt;code>NULL&lt;/code> 填充。&lt;/li>
&lt;li>&lt;strong>&lt;code>RIGHT (OUTER) JOIN&lt;/code>:&lt;/strong> 返回右表 (JOIN 后的表) 的所有行，即使左表中没有匹配。左表不匹配的部分用 &lt;code>NULL&lt;/code> 填充。&lt;/li>
&lt;li>&lt;strong>&lt;code>FULL (OUTER) JOIN&lt;/code>:&lt;/strong> 返回左右两表中所有的行。不匹配的部分用 &lt;code>NULL&lt;/code> 填充。&lt;/li>
&lt;li>&lt;strong>&lt;code>CROSS JOIN&lt;/code>:&lt;/strong> 返回两个表的笛卡尔积（所有可能的行组合）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>子查询 (Subquery):&lt;/strong> 嵌套在另一个 &lt;code>SELECT&lt;/code>, &lt;code>INSERT&lt;/code>, &lt;code>UPDATE&lt;/code>, &lt;code>DELETE&lt;/code> 语句或另一个子查询中的查询。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">SELECT&lt;/span> CustomerName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">FROM&lt;/span> Customers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">WHERE&lt;/span> CustomerID &lt;span style="color:#ff6ac1">IN&lt;/span> (&lt;span style="color:#ff6ac1">SELECT&lt;/span> CustomerID &lt;span style="color:#ff6ac1">FROM&lt;/span> Orders &lt;span style="color:#ff6ac1">WHERE&lt;/span> OrderDate &lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> &lt;span style="color:#5af78e">&amp;#39;2023-01-01&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>集合操作 (Set Operations):&lt;/strong> 组合多个 &lt;code>SELECT&lt;/code> 语句的结果集。
&lt;ul>
&lt;li>&lt;code>UNION&lt;/code>: 合并结果集，&lt;strong>自动去除重复行&lt;/strong>。&lt;/li>
&lt;li>&lt;code>UNION ALL&lt;/code>: 合并结果集，&lt;strong>包含所有行（包括重复行）&lt;/strong>。&lt;/li>
&lt;li>&lt;code>INTERSECT&lt;/code>: 返回两个查询结果集的&lt;strong>交集&lt;/strong>（共同存在的行）。&lt;/li>
&lt;li>&lt;code>EXCEPT&lt;/code> (或 &lt;code>MINUS&lt;/code>): 返回第一个查询结果集中&lt;strong>排除&lt;/strong>第二个查询结果集内容后的行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DCL (Data Control Language - 数据控制语言):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于&lt;strong>控制数据库访问权限和安全性&lt;/strong>。&lt;/li>
&lt;li>主要语句：
&lt;ul>
&lt;li>&lt;code>GRANT&lt;/code>: 授予用户或角色对数据库对象的特定权限（如 &lt;code>SELECT&lt;/code>, &lt;code>INSERT&lt;/code>, &lt;code>UPDATE&lt;/code>, &lt;code>DELETE&lt;/code>, &lt;code>ALL PRIVILEGES&lt;/code>）。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">GRANT&lt;/span> &lt;span style="color:#ff6ac1">SELECT&lt;/span>, &lt;span style="color:#ff6ac1">INSERT&lt;/span> &lt;span style="color:#ff6ac1">ON&lt;/span> Customers &lt;span style="color:#ff6ac1">TO&lt;/span> user_reporting;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>REVOKE&lt;/code>: 撤销之前授予的权限。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">REVOKE&lt;/span> &lt;span style="color:#ff6ac1">DELETE&lt;/span> &lt;span style="color:#ff6ac1">ON&lt;/span> Orders &lt;span style="color:#ff6ac1">FROM&lt;/span> user_intern;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>TCL (Transaction Control Language - 事务控制语言):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于&lt;strong>管理数据库中的事务&lt;/strong>。事务是一组作为单个逻辑工作单元执行的 SQL 语句，要么全部成功，要么全部失败（ACID 特性：原子性、一致性、隔离性、持久性）。&lt;/li>
&lt;li>主要语句：
&lt;ul>
&lt;li>&lt;code>BEGIN TRANSACTION&lt;/code> (或 &lt;code>START TRANSACTION&lt;/code>): 显式开始一个事务。&lt;/li>
&lt;li>&lt;code>COMMIT&lt;/code>: 提交事务，使事务中所有修改永久生效。&lt;/li>
&lt;li>&lt;code>ROLLBACK&lt;/code>: 回滚事务，撤销事务中所有未提交的修改。&lt;/li>
&lt;li>&lt;code>SAVEPOINT&lt;/code>: 在事务内设置保存点，允许部分回滚到该点。&lt;/li>
&lt;li>&lt;code>SET TRANSACTION&lt;/code>: 设置事务特性（如隔离级别）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="sql-的重要特性">SQL 的重要特性
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>声明式语言 (Declarative):&lt;/strong> 你主要描述&lt;strong>你想要什么数据&lt;/strong>（&lt;code>SELECT ... WHERE ...&lt;/code>），而不是像过程式语言那样详细指定计算机如何一步步获取数据。数据库引擎的&lt;strong>查询优化器&lt;/strong>负责找出最高效的执行路径。&lt;/li>
&lt;li>&lt;strong>标准化:&lt;/strong> SQL 有 ANSI/ISO 标准（如 SQL-92, SQL:1999, SQL:2003, SQL:2008, SQL:2011, SQL:2016, SQL:2019），确保了核心语法的通用性。但&lt;strong>不同数据库厂商（如 MySQL, PostgreSQL, Oracle, SQL Server）在实现标准 SQL 的同时，都扩展了自己的特有功能（方言）和数据类型&lt;/strong>。编写可移植的 SQL 需要注意这些差异。&lt;/li>
&lt;li>&lt;strong>强大的查询能力:&lt;/strong> 通过 &lt;code>SELECT&lt;/code> 语句结合 &lt;code>WHERE&lt;/code>, &lt;code>JOIN&lt;/code>, &lt;code>GROUP BY&lt;/code>, &lt;code>HAVING&lt;/code>, 子查询、窗口函数等，可以执行非常复杂的数据检索、聚合和分析操作。&lt;/li>
&lt;li>&lt;strong>数据完整性与安全性:&lt;/strong> 通过约束（主键、外键、唯一约束、非空约束、检查约束）、事务（ACID）和权限控制（DCL）来保证数据的准确、一致和安全。&lt;/li>
&lt;/ul>
&lt;h2 id="sql-的实际应用场景">SQL 的实际应用场景
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>数据检索与分析:&lt;/strong> 这是 SQL 最核心的用途。分析师、数据科学家、产品经理等使用 SQL 从海量数据中提取所需信息，生成报告，进行业务分析。&lt;/li>
&lt;li>&lt;strong>Web 应用后端:&lt;/strong> 几乎所有动态网站（电商、社交网络、内容管理系统）的后端服务器都使用 SQL 数据库存储用户信息、产品数据、订单、帖子等内容，并通过 SQL 进行读写操作。&lt;/li>
&lt;li>&lt;strong>移动应用后端:&lt;/strong> 与 Web 应用类似，移动 App 的数据通常也存储在服务器端的 SQL 数据库中。&lt;/li>
&lt;li>&lt;strong>数据仓库与商业智能 (BI):&lt;/strong> SQL 是查询数据仓库（如 Amazon Redshift, Google BigQuery, Snowflake）和操作 BI 工具（如 Tableau, Power BI, Looker）的基础语言。&lt;/li>
&lt;li>&lt;strong>数据迁移与集成 (ETL):&lt;/strong> 在数据管道中，SQL 常用于从源数据库提取数据、在暂存区转换数据、以及加载到目标数据库或数据仓库。&lt;/li>
&lt;li>&lt;strong>数据库管理:&lt;/strong> DBA（数据库管理员）使用 SQL 进行数据库的创建、维护、性能调优、备份恢复、用户权限管理等。&lt;/li>
&lt;/ol>
&lt;h2 id="学习-sql-的建议">学习 SQL 的建议
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>动手实践:&lt;/strong> 理论学习是基础，但最重要的是动手写 SQL 语句。安装一个数据库（如 MySQL, PostgreSQL 或 SQLite）或使用在线练习平台（如 LeetCode, HackerRank, SQLZoo, Mode Analytics SQL Tutorial, W3Schools SQL）。&lt;/li>
&lt;li>&lt;strong>理解基础:&lt;/strong> 牢固掌握 &lt;code>SELECT&lt;/code>（包括所有关键子句 &lt;code>WHERE&lt;/code>, &lt;code>GROUP BY&lt;/code>, &lt;code>HAVING&lt;/code>, &lt;code>ORDER BY&lt;/code>, &lt;code>LIMIT&lt;/code>）、&lt;code>JOIN&lt;/code>（各种连接的区别）、基本的 &lt;code>INSERT&lt;/code>/&lt;code>UPDATE&lt;/code>/&lt;code>DELETE&lt;/code>。&lt;/li>
&lt;li>&lt;strong>掌握 &lt;code>JOIN&lt;/code>:&lt;/strong> 理解不同 &lt;code>JOIN&lt;/code> 类型（尤其是 &lt;code>INNER JOIN&lt;/code> 和 &lt;code>LEFT JOIN&lt;/code>）的工作原理和应用场景至关重要，因为实际数据通常分布在多个表中。&lt;/li>
&lt;li>&lt;strong>学习聚合与分组:&lt;/strong> &lt;code>GROUP BY&lt;/code> 和聚合函数（&lt;code>COUNT&lt;/code>, &lt;code>SUM&lt;/code>, &lt;code>AVG&lt;/code>, &lt;code>MIN&lt;/code>, &lt;code>MAX&lt;/code>）是数据分析的核心。&lt;/li>
&lt;li>&lt;strong>理解子查询:&lt;/strong> 学会编写和使用子查询来解决复杂问题。&lt;/li>
&lt;li>&lt;strong>熟悉所用数据库的文档:&lt;/strong> 了解你正在使用的特定数据库（MySQL, PostgreSQL 等）的语法细节、数据类型和特有功能。&lt;/li>
&lt;li>&lt;strong>关注性能:&lt;/strong> 学习如何编写高效的 SQL 查询（例如：使用索引、避免 &lt;code>SELECT *&lt;/code>、优化 &lt;code>JOIN&lt;/code> 和 &lt;code>WHERE&lt;/code> 条件）。&lt;code>EXPLAIN&lt;/code> 或 &lt;code>EXPLAIN ANALYZE&lt;/code> 命令是你的好朋友。&lt;/li>
&lt;li>&lt;strong>处理 &lt;code>NULL&lt;/code> 值:&lt;/strong> 理解 &lt;code>NULL&lt;/code> 在比较、计算和聚合中的行为，并学会使用 &lt;code>IS NULL&lt;/code> / &lt;code>IS NOT NULL&lt;/code> 和 &lt;code>COALESCE&lt;/code> / &lt;code>IFNULL&lt;/code> 等函数处理它。&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>SQL 是管理和操作关系型数据库的基石语言。它功能强大、应用广泛，从简单的数据查询到复杂的业务逻辑实现都离不开它。无论是数据分析师、软件工程师、产品经理还是数据库管理员，掌握 SQL 都是一项极具价值的核心技能。其声明式的特性让你专注于“要什么”，而让数据库引擎去解决“怎么拿”的问题，极大地提高了数据处理的效率和便捷性。&lt;/p></description></item><item><title>怎么给 Hugo 添加 Mermaid 图表支持</title><link>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0-mermaid-%E5%9B%BE%E8%A1%A8%E6%94%AF%E6%8C%81/</link><pubDate>Tue, 10 Jun 2025 13:17:52 +0800</pubDate><guid>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0-mermaid-%E5%9B%BE%E8%A1%A8%E6%94%AF%E6%8C%81/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250610/O17b/1045X478/image.png" alt="Featured image of post 怎么给 Hugo 添加 Mermaid 图表支持" />&lt;p>Hugo 没有为 Mermaid 图标提供内置模板，查阅 Hugo 文档发现在 Hugo 中添加 Mermaid 支持可以通过以下步骤实现：&lt;/p>
&lt;h3 id="创建渲染钩子文件">&lt;strong>创建渲染钩子文件&lt;/strong>
&lt;/h3>&lt;p>在项目目录中新建文件：&lt;br>
&lt;code>layouts/_default/_markup/render-codeblock-mermaid.html&lt;/code>&lt;br>
内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff6ac1">pre&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;mermaid&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ .Inner | htmlEscape | safeHTML }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff6ac1">pre&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ .Page.Store.Set &amp;#34;hasMermaid&amp;#34; true }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加-mermaid-初始化脚本">&lt;strong>添加 Mermaid 初始化脚本&lt;/strong>
&lt;/h3>&lt;p>在 &lt;code>layouts/_default/baseof.html&lt;/code> 文件的底部添加（注意需要在&lt;code>&amp;lt;/body&amp;gt;&lt;/code>标签之前）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{ if .Store.Get &amp;#34;hasMermaid&amp;#34; }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">script&lt;/span> &lt;span style="color:#57c7ff">type&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;module&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">import&lt;/span> mermaid from &lt;span style="color:#5af78e">&amp;#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mermaid.initialize({ startOnLoad&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#ff6ac1">true&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ end }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="验证使用">验证使用
&lt;/h3>&lt;p>创建测试内容 &lt;code>content/post/demo.md&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>```mermaid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sequenceDiagram
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> participant Alice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> participant Bob
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loop Healthcheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> John-&amp;gt;&amp;gt;John: Fight against hypochondria
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> John--&amp;gt;&amp;gt;Alice: Great!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> John-&amp;gt;&amp;gt;Bob: How about you?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>```
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现效果如下所示：&lt;/p>
&lt;pre class="mermaid">
sequenceDiagram
participant Alice
participant Bob
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/pre>
&lt;p>完成以上步骤后，Hugo 站点即可支持 Mermaid 图表渲染。&lt;/p></description></item><item><title>深入了解 MVC 架构</title><link>https://muo123.github.io/articles/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-mvc-%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 09 Jun 2025 21:11:31 +0800</pubDate><guid>https://muo123.github.io/articles/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-mvc-%E6%9E%B6%E6%9E%84/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/sDey/743X194/image.png" alt="Featured image of post 深入了解 MVC 架构" />&lt;p>本文将深入探讨 &lt;strong>MVC (Model-View-Controller)&lt;/strong> 架构模式，特别是在 &lt;strong>iOS开发&lt;/strong> 中的实现、优缺点和演变。&lt;/p>
&lt;p>&lt;strong>MVC 的核心思想：职责分离&lt;/strong>&lt;/p>
&lt;p>MVC 的核心目标是将应用程序的逻辑划分为三个清晰的角色，每个角色有明确的职责，从而降低代码的耦合度，提高可维护性和可测试性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>MyFeature/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Model/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── User.swift // 数据模型
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── DataService.swift // 网络/数据库服务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── View/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── ProfileView.swift // 自定义视图
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── ProfileCell.swift // TableView单元格
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Controller/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── ProfileViewController.swift // 视图控制器
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="经典-mvc-理论模型">&lt;strong>经典 MVC 理论模型&lt;/strong>
&lt;/h3>&lt;p>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/Y9Mn/841X108/image.png"
loading="lazy"
alt="841X108/image.png"
>&lt;/p>
&lt;p>&lt;strong>经典 MVC 数据流示意图&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>用户 (User)&lt;/strong> 与 &lt;strong>视图 (View)&lt;/strong> 交互（如点击按钮）。&lt;/li>
&lt;li>&lt;strong>View&lt;/strong> 将用户事件传递给 &lt;strong>控制器 (Controller)&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> 处理逻辑：
&lt;ul>
&lt;li>更新 &lt;strong>模型 (Model)&lt;/strong> 数据（如保存用户输入）。&lt;/li>
&lt;li>从 &lt;strong>Model&lt;/strong> 读取数据（如查询数据库）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Model&lt;/strong> 数据变更后通知 &lt;strong>Controller&lt;/strong>（通过观察者模式等）。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> 将新数据传递给 &lt;strong>View&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>View&lt;/strong> 根据数据更新界面，反馈给用户。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>✅ &lt;strong>理想情况&lt;/strong>：各层职责分离，数据流清晰。&lt;br>
❌ &lt;strong>iOS 现实&lt;/strong>：Controller 常过度承担逻辑，导致臃肿。&lt;/p>&lt;/blockquote>
&lt;h4 id="model-模型">&lt;strong>Model (模型)&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>职责：&lt;/strong> 代表应用程序的核心数据和业务逻辑。&lt;/li>
&lt;li>&lt;strong>包含什么：&lt;/strong>
&lt;ul>
&lt;li>数据结构（例如：&lt;code>User&lt;/code>, &lt;code>Product&lt;/code>, &lt;code>Order&lt;/code> 等类或结构体）。&lt;/li>
&lt;li>数据的操作方法（例如：创建、读取、更新、删除 - CRUD）。&lt;/li>
&lt;li>业务规则和计算逻辑（例如：验证用户输入、计算订单总价）。&lt;/li>
&lt;li>数据持久化操作（例如：与数据库、网络API交互的代码，虽然有时这部分会单独抽象成服务层）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关键特性：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>独立于 UI：&lt;/strong> Model 完全不关心数据如何显示或用户如何交互。它只关注数据本身和操作数据的逻辑。&lt;/li>
&lt;li>&lt;strong>通知变更：&lt;/strong> 当 Model 的数据发生改变时，它需要一种机制来通知相关方（通常是 Controller）。在 iOS 中，这通常通过以下几种方式实现：
&lt;ul>
&lt;li>&lt;strong>KVO (Key-Value Observing)：&lt;/strong> 允许对象监听另一个对象特定属性的变化。（较底层，手动管理麻烦）。&lt;/li>
&lt;li>&lt;strong>委托模式 (Delegation)：&lt;/strong> 定义协议，Model 持有对实现了该协议的委托对象（通常是 Controller）的弱引用，并在数据变化时调用委托方法。（常用，但通常是一对一）。&lt;/li>
&lt;li>&lt;strong>通知中心 (NotificationCenter)：&lt;/strong> 广播数据变更事件，任何注册监听的组件都可以响应。（一对多，松散耦合，但需注意内存管理和类型安全）。&lt;/li>
&lt;li>&lt;strong>响应式编程 (Combine/RxSwift)：&lt;/strong> 使用可观察的流来处理数据变更通知。（现代、强大，但学习曲线较陡）。&lt;/li>
&lt;li>&lt;strong>直接调用：&lt;/strong> Controller 在修改 Model 后，直接手动更新 View。（最简单，但耦合度高，容易遗漏）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="view-视图">&lt;strong>View (视图)&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>职责：&lt;/strong> 负责数据的可视化呈现和捕获用户的输入事件。&lt;/li>
&lt;li>&lt;strong>包含什么：&lt;/strong>
&lt;ul>
&lt;li>UI 组件：&lt;code>UIView&lt;/code> 及其子类 (&lt;code>UILabel&lt;/code>, &lt;code>UIButton&lt;/code>, &lt;code>UITableView&lt;/code>, &lt;code>UICollectionView&lt;/code>, &lt;code>UITextField&lt;/code> 等)。&lt;/li>
&lt;li>布局信息：Frame、Auto Layout 约束、Size Classes。&lt;/li>
&lt;li>外观样式：颜色、字体、图片、动画效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关键特性：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>被动：&lt;/strong> 理想情况下，View 本身不应该包含业务逻辑。它只负责：
&lt;ul>
&lt;li>&lt;strong>展示：&lt;/strong> 根据 Controller 提供的数据渲染 UI。&lt;/li>
&lt;li>&lt;strong>交互：&lt;/strong> 检测用户操作（如点击、滑动、输入）并将这些事件 &lt;strong>传递&lt;/strong> 给 Controller 处理。View 本身不决定如何处理这些事件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>可复用：&lt;/strong> 设计良好的 View 组件（如自定义的 &lt;code>UIView&lt;/code> 子类）可以在不同的界面甚至不同的项目中复用。&lt;/li>
&lt;li>&lt;strong>独立于 Model：&lt;/strong> View 不应该直接访问或操作 Model。它应该通过 Controller 来获取展示所需的数据（通常是简单的、格式化的数据，而不是整个 Model 对象）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="controller-控制器">&lt;strong>Controller (控制器)&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>职责：&lt;/strong> 作为 &lt;strong>Model&lt;/strong> 和 &lt;strong>View&lt;/strong> 之间的 &lt;strong>协调者 (Mediator)&lt;/strong> 和 &lt;strong>胶水 (Glue)&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>包含什么：&lt;/strong> 在 iOS 中，最主要的 Controller 是 &lt;code>UIViewController&lt;/code> 及其子类。&lt;/li>
&lt;li>&lt;strong>关键任务：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>管理 View 生命周期：&lt;/strong> 响应 &lt;code>viewDidLoad&lt;/code>, &lt;code>viewWillAppear&lt;/code>, &lt;code>viewDidDisappear&lt;/code> 等事件，负责创建、配置、显示和销毁 View。&lt;/li>
&lt;li>&lt;strong>获取/更新 Model：&lt;/strong> 从数据源（数据库、网络、其他服务）获取数据并填充 Model。响应用户操作或业务逻辑要求更新 Model。&lt;/li>
&lt;li>&lt;strong>更新 View：&lt;/strong> 监听 Model 的变化（通过 KVO、委托、通知等），获取最新的数据，并将其 &lt;strong>格式化&lt;/strong> 后传递给 View 进行显示。&lt;/li>
&lt;li>&lt;strong>处理用户交互：&lt;/strong> 接收来自 View 的用户事件（如按钮点击、表格行选择、文本输入完成），解释这些事件的含义，触发相应的业务逻辑（通常是更新 Model 或导航到其他界面）。&lt;/li>
&lt;li>&lt;strong>导航：&lt;/strong> 管理视图控制器之间的切换（Push/Pop, Present/Dismiss）。&lt;/li>
&lt;li>&lt;strong>处理其他系统事件：&lt;/strong> 如内存警告、旋转事件等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关键特性：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>强依赖：&lt;/strong> Controller 通常需要了解具体的 View 和 Model 细节。&lt;/li>
&lt;li>&lt;strong>核心枢纽：&lt;/strong> 大部分应用程序逻辑（尤其是与UI流程相关的）都汇聚在这里。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="mvc-中的数据流向">&lt;strong>MVC 中的数据流向：&lt;/strong>
&lt;/h4>&lt;p>标准的 MVC 数据流有两种主要路径：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>用户交互路径：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用户在 &lt;strong>View&lt;/strong> 上操作（点击按钮）。&lt;/li>
&lt;li>&lt;strong>View&lt;/strong> 将事件 &lt;strong>通知&lt;/strong> 给 &lt;strong>Controller&lt;/strong> (例如：通过 IBAction)。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> &lt;strong>解释&lt;/strong> 事件，执行相应的业务逻辑：
&lt;ul>
&lt;li>可能需要 &lt;strong>更新 Model&lt;/strong> (例如：将商品加入购物车)。&lt;/li>
&lt;li>可能需要 &lt;strong>更新 View&lt;/strong> 状态 (例如：禁用按钮)。&lt;/li>
&lt;li>可能需要 &lt;strong>导航&lt;/strong> 到新界面。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果 Model 被更新，Model 会 &lt;strong>通知&lt;/strong> Controller 变化发生了（如果 Controller 监听了 Model）。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> 从 &lt;strong>Model&lt;/strong> 获取 &lt;strong>更新后的数据&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> 将 &lt;strong>格式化后的数据&lt;/strong> &lt;strong>传递给&lt;/strong> &lt;strong>View&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>View&lt;/strong> 根据新数据 &lt;strong>更新其 UI&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Model 变更路径 (非用户直接触发)：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>外部因素导致 &lt;strong>Model&lt;/strong> 发生变化（例如：后台网络请求完成、定时器触发更新）。&lt;/li>
&lt;li>&lt;strong>Model&lt;/strong> &lt;strong>通知&lt;/strong> 其监听者（通常是 &lt;strong>Controller&lt;/strong>）变化发生了。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> 从 &lt;strong>Model&lt;/strong> 获取 &lt;strong>更新后的数据&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>Controller&lt;/strong> 将 &lt;strong>格式化后的数据&lt;/strong> &lt;strong>传递给&lt;/strong> &lt;strong>View&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>View&lt;/strong> 根据新数据 &lt;strong>更新其 UI&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="ios-中的-mvcmassive-view-controller问题">&lt;strong>iOS 中的 MVC（“Massive View Controller”问题）&lt;/strong>
&lt;/h3>&lt;p>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/l8wN/878X304/image.png"
loading="lazy"
alt="878X304/image.png"
>&lt;/p>
&lt;p>&lt;strong>iOS MVC 的典型问题：Massive View Controller&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Model 与 View 几乎无直接交互&lt;/strong>，完全依赖 &lt;strong>Controller&lt;/strong> 中介。&lt;/li>
&lt;li>&lt;strong>View 与 Controller 强耦合&lt;/strong>：
&lt;ul>
&lt;li>通过 &lt;code>IBOutlet&lt;/code>（视图控件引用）和 &lt;code>IBAction&lt;/code>（事件回调）紧密绑定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Controller 成为“上帝对象”&lt;/strong>：
&lt;ul>
&lt;li>承担 &lt;strong>业务逻辑&lt;/strong>、&lt;strong>网络请求&lt;/strong>、&lt;strong>数据解析&lt;/strong>、&lt;strong>UI 配置&lt;/strong>、&lt;strong>导航跳转&lt;/strong> 等几乎所有职责。&lt;/li>
&lt;li>导致代码量爆炸（数千行常见），可维护性和可测试性极差。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>💥 &lt;strong>核心问题&lt;/strong>：Controller 违反 &lt;strong>单一职责原则&lt;/strong>，变成“垃圾抽屉”。&lt;/p>&lt;/blockquote>
&lt;h4 id="ios-中的-mvc-uikit-mvc现实与理论的差距">&lt;strong>iOS 中的 MVC (UIKit MVC)：现实与理论的差距&lt;/strong>
&lt;/h4>&lt;p>Apple 在 UIKit 框架中推广了 MVC，但其实现方式与经典的 MVC 理论有显著差异，导致了著名的 &lt;strong>“Massive View Controller” (臃肿的视图控制器)&lt;/strong> 问题：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">组件&lt;/th>
&lt;th style="text-align: left">经典 MVC 理论职责&lt;/th>
&lt;th style="text-align: left">iOS (UIKit) MVC 实际常见职责&lt;/th>
&lt;th style="text-align: left">导致的问题&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Model&lt;/strong>&lt;/td>
&lt;td style="text-align: left">数据 + 业务逻辑&lt;/td>
&lt;td style="text-align: left">数据 (常为简单结构体/类)，业务逻辑常被放到 Controller 或 Service&lt;/td>
&lt;td style="text-align: left">Model 过于贫血，核心逻辑分散。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>View&lt;/strong>&lt;/td>
&lt;td style="text-align: left">纯展示 + 传递事件&lt;/td>
&lt;td style="text-align: left">展示 + &lt;strong>部分布局逻辑&lt;/strong> (Storyboard/XIB/Code) + 传递事件&lt;/td>
&lt;td style="text-align: left">职责相对清晰，但通过 IBOutlet/IBAction 与 Controller 强耦合。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Controller&lt;/strong>&lt;/td>
&lt;td style="text-align: left">协调 Model 和 View，处理事件&lt;/td>
&lt;td style="text-align: left">&lt;strong>几乎包含所有非 Model/View 的代码&lt;/strong>：&lt;br>- 业务逻辑&lt;br>- 网络请求&lt;br>- 数据解析&lt;br>- 数据转换/格式化&lt;br>- View 配置/布局 (常大量)&lt;br>- 导航逻辑&lt;br>- 处理 Model 变更&lt;br>- 处理用户事件&lt;br>- 生命周期管理&lt;br>- 依赖管理&lt;/td>
&lt;td style="text-align: left">&lt;strong>Massive View Controller!&lt;/strong> &lt;br>代码量巨大，难以维护、测试、复用。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="为什么-ios-mvc-容易导致-massive-view-controller">&lt;strong>为什么 iOS MVC 容易导致 Massive View Controller？&lt;/strong>
&lt;/h4>&lt;ol>
&lt;li>&lt;strong>&lt;code>UIViewController&lt;/code> 的天然定位：&lt;/strong> Apple 设计 &lt;code>UIViewController&lt;/code> 时，就让它紧密关联着一个 &lt;code>UIView&lt;/code> (&lt;code>self.view&lt;/code>)，并且负责其生命周期。这使得 Controller 和 View 的界限在代码中变得模糊，开发者很容易把 View 的配置代码（本应属于 View 的职责）直接写在 Controller 里。&lt;/li>
&lt;li>&lt;strong>Storyboard/XIB 的便利与陷阱：&lt;/strong> Interface Builder (Storyboard/XIB) 虽然能可视化设计 UI，但它将 View 的布局和部分配置（如 Auto Layout 约束）以序列化形式存储。Controller 需要通过 &lt;code>IBOutlet&lt;/code> 连接到这些 View 元素进行动态操作。这种强连接鼓励了在 Controller 中直接操作 View 细节。&lt;/li>
&lt;li>&lt;strong>事件处理 (IBAction)：&lt;/strong> &lt;code>IBAction&lt;/code> 方法直接定义在 Controller 中，处理用户交互的逻辑自然就写在了 Controller 里。&lt;/li>
&lt;li>&lt;strong>缺少明确的中间层：&lt;/strong> 经典的 MVC 中，Controller 应该是薄薄的一层协调者。但在 iOS 实践中，由于没有强制分离的规则，业务逻辑、数据转换、网络交互等本可以独立出来的逻辑，都因为方便而被塞进了 Controller。&lt;/li>
&lt;li>&lt;strong>Model 的“贫血”：&lt;/strong> 很多 iOS 开发者习惯将 Model 设计为仅包含数据的简单结构（贫血模型），而将操作这些数据的业务逻辑放在 Controller 中，进一步加重了 Controller 的负担。&lt;/li>
&lt;/ol>
&lt;h4 id="ios-mvc-的优点">&lt;strong>iOS MVC 的优点：&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>简单直观：&lt;/strong> 概念清晰，上手容易，尤其适合小型项目或原型开发。&lt;/li>
&lt;li>&lt;strong>Apple 官方支持：&lt;/strong> UIKit 框架本身的设计就是围绕 MVC 构建的，有大量的文档、教程和示例代码。&lt;/li>
&lt;li>&lt;strong>工具集成：&lt;/strong> Storyboard/XIB 与 &lt;code>UIViewController&lt;/code> 的集成非常紧密。&lt;/li>
&lt;li>&lt;strong>生命周期管理：&lt;/strong> &lt;code>UIViewController&lt;/code> 提供了明确的视图生命周期钩子。&lt;/li>
&lt;/ul>
&lt;h4 id="ios-mvc-的缺点">&lt;strong>iOS MVC 的缺点：&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Massive View Controller：&lt;/strong> 这是最核心的痛点，导致代码臃肿、难以阅读、维护困难、复用性差。&lt;/li>
&lt;li>&lt;strong>难以单元测试：&lt;/strong> Controller 通常依赖 &lt;code>UIKit&lt;/code> 组件（如 &lt;code>UIView&lt;/code>, &lt;code>UIViewController&lt;/code> 生命周期）、网络请求、数据库等，使得对其进行隔离单元测试变得复杂且脆弱。庞大的 Controller 也意味着测试用例会非常庞大。&lt;/li>
&lt;li>&lt;strong>紧耦合：&lt;/strong> View 和 Controller 通过 &lt;code>IBOutlet&lt;/code>/&lt;code>IBAction&lt;/code> 紧密耦合，难以独立复用或替换。Controller 通常也直接知晓具体的 Model 和 View 细节。&lt;/li>
&lt;li>&lt;strong>职责模糊：&lt;/strong> 业务逻辑、数据转换、UI 更新逻辑混杂在 Controller 中，违反了单一职责原则。&lt;/li>
&lt;li>&lt;strong>代码复用性差：&lt;/strong> 与特定 View 强关联的逻辑很难在其他地方复用。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="改进-mvc-的方案减轻-controller-负担">&lt;strong>改进 MVC 的方案（减轻 Controller 负担）&lt;/strong>
&lt;/h3>&lt;p>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/Q8S8/792X496/image.png"
loading="lazy"
alt="792X496/image.png"
>&lt;/p>
&lt;p>&lt;strong>缓解 Massive View Controller 的实践&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>抽取独立组件&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>Service 层&lt;/strong>：封装网络请求、数据库操作。&lt;/li>
&lt;li>&lt;strong>DataSource 对象&lt;/strong>：处理 &lt;code>UITableView&lt;/code>/&lt;code>UICollectionView&lt;/code> 的数据源逻辑。&lt;/li>
&lt;li>&lt;strong>Utils 工具类&lt;/strong>：提供格式化、校验等辅助函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Controller 仅保留核心协调职责&lt;/strong>：
&lt;ul>
&lt;li>初始化组件、响应生命周期事件、高层导航决策。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Model 升级为“富模型”&lt;/strong>：
&lt;ul>
&lt;li>包含业务逻辑（如 &lt;code>User.validatePassword()&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>View 封装自定义控件&lt;/strong>：
&lt;ul>
&lt;li>将布局代码移入 &lt;code>UIView&lt;/code> 子类，减少 Controller 内 UI 代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>✅ &lt;strong>效果&lt;/strong>：Controller 瘦身，代码可读性和可测试性提升。&lt;/p>&lt;/blockquote>
&lt;h4 id="如何缓解-massive-view-controller-在-mvc-框架内">&lt;strong>如何缓解 Massive View Controller？ (在 MVC 框架内)&lt;/strong>
&lt;/h4>&lt;p>即使坚持使用 MVC，也可以通过一些实践来减轻 Controller 的负担：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>富 Model (Rich Model)：&lt;/strong> 将业务逻辑尽可能地移动到 Model 中。让 Model 不仅仅是一个数据结构，而是包含操作这些数据的方法。例如，&lt;code>User&lt;/code> 模型可以有 &lt;code>changePassword&lt;/code> 方法，内部处理验证逻辑。&lt;/li>
&lt;li>&lt;strong>数据源和委托分离：&lt;/strong> 对于 &lt;code>UITableView&lt;/code> 或 &lt;code>UICollectionView&lt;/code>，将其 &lt;code>dataSource&lt;/code> 和 &lt;code>delegate&lt;/code> 分离到独立的类中（例如 &lt;code>MyTableDataSource&lt;/code>），而不是让 Controller 直接实现所有协议方法。&lt;/li>
&lt;li>&lt;strong>创建 Helper/Utility 类：&lt;/strong> 将通用的工具方法、格式化逻辑、网络请求封装等提取到独立的 Helper 或 Service 类中。&lt;/li>
&lt;li>&lt;strong>使用 Child View Controllers：&lt;/strong> 将复杂界面拆分成多个逻辑区域，每个区域由自己的 Child View Controller 管理，父 Controller 负责协调。&lt;/li>
&lt;li>&lt;strong>避免在 Controller 中做复杂的 View 布局：&lt;/strong> 尽量使用 Auto Layout（在 Interface Builder 或代码中），并将自定义 View 的布局逻辑封装在 &lt;code>UIView&lt;/code> 子类中。Controller 只负责提供数据和处理高层事件。&lt;/li>
&lt;li>&lt;strong>谨慎使用 Storyboard Segues：&lt;/strong> 避免在 Segue 的 &lt;code>prepareForSegue&lt;/code> 方法中塞入过多的数据准备和逻辑。考虑使用更明确的导航方法或路由机制。&lt;/li>
&lt;li>&lt;strong>利用扩展 (Extensions)：&lt;/strong> 将 Controller 中不同职责的代码划分到不同的扩展文件中（例如 &lt;code>MyViewController+Network.swift&lt;/code>, &lt;code>MyViewController+TableView.swift&lt;/code>），提高可读性，但逻辑上还在同一个类里。&lt;/li>
&lt;/ol>
&lt;h4 id="mvc-的替代方案">&lt;strong>MVC 的替代方案：&lt;/strong>
&lt;/h4>&lt;p>为了解决 MVC 在 iOS 中固有的问题，出现了多种替代架构模式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>MVVM (Model-View-ViewModel)：&lt;/strong> 引入 ViewModel 层，负责将 Model 数据转换为 View 可直接显示的数据，并包含视图相关的状态和命令。View 和 ViewModel 通过数据绑定（如 Combine, RxSwift）连接，大大减少了 Controller（或 View，在 SwiftUI 中）的职责。&lt;strong>这是目前最流行的替代方案，尤其适合 SwiftUI。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>VIPER (View-Interactor-Presenter-Entity-Router)：&lt;/strong> 将职责划分得更加细致（路由、业务逻辑、展示逻辑、实体），每个组件职责单一且明确，可测试性极高。但引入的复杂性和文件数量也显著增加，适合大型、长期维护的项目。&lt;/li>
&lt;li>&lt;strong>MVP (Model-View-Presenter)：&lt;/strong> 类似于 MVVM，但 View 和 Presenter 之间通常通过接口/协议进行通信，强调被动 View。在 iOS 中不如 MVVM 流行。&lt;/li>
&lt;li>&lt;strong>Clean Architecture / TCA (The Composable Architecture)：&lt;/strong> 强调分层（Entities, Use Cases, Interface Adapters, Frameworks &amp;amp; Drivers）、依赖规则（依赖向内指向核心业务逻辑）、单向数据流。TCA 是基于 Swift 的一个具体实现，结合了 Elm 和 Redux 的思想，提供强大的状态管理和可测试性。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="总结">&lt;strong>总结：&lt;/strong>
&lt;/h3>&lt;p>MVC 是一个基础且重要的架构模式，理解其核心思想和在 iOS 中的具体实现（以及由此引发的 Massive View Controller 问题）是 iOS 开发者的必备知识。虽然它在小型项目或简单界面上仍然有效且快速，但在面对复杂应用时，其缺点会变得非常突出。&lt;/p>
&lt;p>&lt;strong>对于新项目：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果主要使用 &lt;strong>SwiftUI&lt;/strong>，MVVM 是非常自然且推荐的选择。&lt;/li>
&lt;li>如果主要使用 &lt;strong>UIKit&lt;/strong>，强烈推荐学习和采用 &lt;strong>MVVM&lt;/strong>（通常结合 Combine 或 RxSwift 进行数据绑定）来避免 Massive View Controller。VIPER 或 Clean Architecture/TCA 是更高级的选择，适用于对可维护性、可测试性要求极高的大型项目。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>对于维护遗留的 UIKit MVC 项目：&lt;/strong> 了解 MVC 的原理和问题所在，并逐步应用上述的“缓解策略”进行重构，或者在有条件和收益的情况下，逐步向 MVVM 等模式迁移部分功能模块。&lt;/p></description></item><item><title>Hugo + Github Pages 博客搭建</title><link>https://muo123.github.io/articles/hugo--github-pages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link><pubDate>Tue, 03 Jun 2025 11:02:43 +0800</pubDate><guid>https://muo123.github.io/articles/hugo--github-pages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/20250603/UrPE/1602X637/image.png" alt="Featured image of post Hugo + Github Pages 博客搭建" />&lt;p>以下是 &lt;strong>Hugo + GitHub Pages 博客搭建全流程指南&lt;/strong>，从环境配置到自动化部署，附详细代码和避坑提示：&lt;/p>
&lt;hr>
&lt;h3 id="一环境准备--windows-">一、环境准备 ( Windows )
&lt;/h3>&lt;h4 id="1-安装-git">1. 安装 Git
&lt;/h4>&lt;p>下载地址：https://git-scm.cn/&lt;/p>
&lt;ol>
&lt;li>
&lt;p>去 Git 官网下载对应版本，如无意外选择 x64 版本安装即可&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装成功后可以在开始菜单栏看到 Git 文件夹以及相关 Git 工具
&lt;img src="https://tc.z.wiki/autoupload/20250602/e7iD/590X241/image.png"
loading="lazy"
alt="590X241/image.png"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="2-安装-hugo">2. 安装 Hugo
&lt;/h4>&lt;p>下载地址： &lt;a class="link" href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener"
>https://github.com/gohugoio/hugo/releases&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载 Hugo 扩展版（支持 Sass/SCSS）
(选 hugo_extended_*.zip)
&lt;img src="https://tc.z.wiki/autoupload/20250602/C09T/878X261/image.png"
loading="lazy"
alt="878X261/image.png"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压到 D:\Hugo 并将路径加入系统环境变量 PATH
&lt;img src="https://tc.z.wiki/autoupload/20250602/RX8J/702X242/image.png"
loading="lazy"
alt="702X242/image.png"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="3-创建本地项目">3. 创建本地项目
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>创建项目。在任意文件夹（图例为 D 盘）打开控制台，并输入指令 &lt;code>hugo new site xxx(你的项目名)&lt;/code>
&lt;img src="https://tc.z.wiki/autoupload/20250602/snZg/850X422/image.png"
loading="lazy"
alt="850X422/image.png"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行服务。切换至该目录，并输入指令 &lt;code>hugo server&lt;/code>，网址输入&lt;code>localhost:1313&lt;/code>，此时由于没有主题内容，显示 page not found，在控制台输入&lt;code>Ctrl + C&lt;/code>即可关闭服务
&lt;img src="https://tc.z.wiki/autoupload/20250602/2Fhs/1087X555/image.png"
loading="lazy"
alt="1087X555/image.png"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="二项目配置">二、项目配置
&lt;/h3>&lt;h4 id="1-添加主题以-stack-为例">1. 添加主题（以 &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener"
>Stack&lt;/a> 为例）
&lt;/h4>&lt;p>可以选择从官网下载，选择喜欢的主题并下载压缩包，解压到 &lt;code>themes&lt;/code> 文件夹&lt;/p>
&lt;p>官网地址：https://themes.gohugo.io/&lt;/p>
&lt;p>或者使用 git 指令下载对应主题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 将主题添加为 Git 子模块（避免直接复制文件）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tc.z.wiki/autoupload/20250602/j4Rp/565X219/image.png"
loading="lazy"
alt="565X219/image.png"
>&lt;/p>
&lt;h4 id="2-基础配置">2. 基础配置
&lt;/h4>&lt;p>个人编写 &lt;code>hugo.toml&lt;/code> 比较耗费时间，下载的主题文件夹中一般包含网站实例 &lt;code>exampleSite&lt;/code>，可以将里面的 &lt;code>content&lt;/code> 文件夹和 &lt;code>hugo.yaml&lt;/code> 配置文件拷贝到当前目录，并覆盖博客目录相关文件。覆盖目录文件后，可能出现兼容性报错，此时需要删除 &lt;code>Content/post/rich-content&lt;/code>。另外，相关语言配置项根据需要进行合理修改&lt;/p>
&lt;h4 id="3-创建第一篇文章">3. 创建第一篇文章
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/hello.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编辑 &lt;code>content/posts/hello-world.md&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>+++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date = &amp;#39;2025-06-02T22:12:41+08:00&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft = true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title = &amp;#39;Hello&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>this is a test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="三本地预览">三、本地预览
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server -D &lt;span style="color:#78787e"># -D 包含草稿&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;code>https://localhost:1313&lt;/code> 实时预览&lt;/p>
&lt;p>&lt;img src="https://tc.z.wiki/autoupload/20250602/HNrK/1653X872/image.png"
loading="lazy"
alt="1653X872/image.png"
>&lt;/p>
&lt;hr>
&lt;h3 id="四部署到-github-pages">四、部署到 GitHub Pages
&lt;/h3>&lt;h4 id="方案一手动部署适合初学者">方案一：手动部署（适合初学者）
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 1. 构建静态文件（生成到 public 目录）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo --minify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 2. 创建 GitHub 仓库：&amp;lt;你的用户名&amp;gt;.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 3. 第一次推送代码之前需要进行如下配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global user.name &lt;span style="color:#5af78e">&amp;#34;你的 GitHub 用户名&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global user.email &lt;span style="color:#5af78e">&amp;#34;你注册 GitHub 的邮箱&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 4. 将 public 目录推送到仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin git@Github.com:&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git &lt;span style="color:#ff6ac1">(&lt;/span>需要设置ssh&lt;span style="color:#ff6ac1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; 或者使用指令 git remote add origin https://github.com/&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#5af78e">&amp;#34;Initial deploy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="方案二自动化部署推荐使用-github-actions">方案二：自动化部署（推荐！使用 GitHub Actions）
&lt;/h4>&lt;ol>
&lt;li>&lt;strong>创建新仓库&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> &lt;span style="color:#ff5c57">创建一个用来储存所有博客文件的新仓库，权限设置为&lt;/span> &lt;span style="color:#ff6ac1">`&lt;/span>private&lt;span style="color:#ff6ac1">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> &lt;span style="color:#ff5c57">前往&lt;/span> Settings&lt;span style="color:#ff6ac1">/&lt;/span>Developer Settings&lt;span style="color:#ff6ac1">/&lt;/span>Personal access tokens , &lt;span style="color:#ff5c57">点击&lt;/span> &lt;span style="color:#ff5c57">“&lt;/span>Generate new &lt;span style="color:#57c7ff">token&lt;/span> (classic)&lt;span style="color:#ff5c57">”&lt;/span> &lt;span style="color:#ff5c57">创建一个&lt;/span> token&lt;span style="color:#ff5c57">，并勾选&lt;/span> repo &lt;span style="color:#ff5c57">和&lt;/span> workflow &lt;span style="color:#ff5c57">选项&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> &lt;span style="color:#ff5c57">复制&lt;/span> token&lt;span style="color:#ff5c57">，前往新仓库的&lt;/span> Settings&lt;span style="color:#ff6ac1">/&lt;/span>Secrets &lt;span style="color:#ff6ac1">and&lt;/span> variables&lt;span style="color:#ff6ac1">/&lt;/span>Actions&lt;span style="color:#ff5c57">，点击&lt;/span> New repository secret &lt;span style="color:#ff5c57">将&lt;/span> token &lt;span style="color:#ff5c57">保存在仓库的环境变量中。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>&lt;strong>博客项目根目录创建 &lt;code>.github/workflows/deploy.yml&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">name&lt;/span>: blog deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">runs-on&lt;/span>: ubuntu-latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">uses&lt;/span>: actions/checkout@v4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">submodules&lt;/span>: &lt;span style="color:#ff6ac1">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">fetch-depth&lt;/span>: &lt;span style="color:#ff9f43">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Setup Hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: peaceiris/actions-hugo@v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">hugo-version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">extended&lt;/span>: &lt;span style="color:#ff6ac1">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">run&lt;/span>: hugo -D
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: peaceiris/actions-gh-pages@v4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">external_repository&lt;/span>: xxx/xxx.github.io # 自己的GitHub pages仓库
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">personal_token&lt;/span>: ${{ secrets.你的token变量名 }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">publish_dir&lt;/span>: ./public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">publish_branch&lt;/span>: main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在目录创建 &lt;code>.gitignore&lt;/code> 文件，避免提交部分文件，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.hugo_build.lock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;strong>推送代码到 GitHub&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#5af78e">&amp;#34;Add workflow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin git@Github.com:&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git &lt;span style="color:#ff6ac1">(&lt;/span>需要设置ssh&lt;span style="color:#ff6ac1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; 或者使用指令 git remote add origin https://github.com/&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="五访问与优化">五、访问与优化
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>访问地址&lt;/strong>&lt;br>
&lt;code>https://&amp;lt;用户名&amp;gt;.github.io&lt;/code> (首次部署需等待 1-2 分钟)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自定义域名（可选）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在项目根目录添加 &lt;code>static/CNAME&lt;/code> 文件，内容为域名：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>blog.yourdomain.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>DNS 添加 CNAME 记录指向 &lt;code>&amp;lt;用户名&amp;gt;.github.io&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>强制 HTTPS&lt;/strong>&lt;br>
在 GitHub Pages 设置中勾选 &lt;strong>Enforce HTTPS&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="六常用命令速查">六、常用命令速查
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>hugo new posts/标题.md&lt;/code>&lt;/td>
&lt;td>新建文章&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>hugo server -D&lt;/code>&lt;/td>
&lt;td>启动本地服务器（含草稿）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>hugo --minify&lt;/code>&lt;/td>
&lt;td>构建优化后的静态文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git submodule update --remote&lt;/code>&lt;/td>
&lt;td>更新主题&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="七避坑指南">七、避坑指南
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>主题无法加载&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>确保使用 &lt;code>git submodule&lt;/code> 添加主题&lt;/li>
&lt;li>在 Actions 中启用 &lt;code>submodules: recursive&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>构建失败&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>检查 &lt;code>.github/workflows/deploy.yml&lt;/code> 中的 Hugo 版本是否匹配&lt;/li>
&lt;li>确保使用 &lt;code>extended&lt;/code> 版本（如果主题需要 SCSS）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中文乱码&lt;/strong>&lt;br>
在文章 Front Matter 中明确指定编码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">charset&lt;/span>: utf-8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>自定义布局&lt;/strong>&lt;br>
复制主题文件到本地覆盖（避免直接修改主题）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cp themes/stack/layouts/_default/single.html layouts/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="效果预览">效果预览
&lt;/h3>&lt;p>完成部署后，你将获得：&lt;/p>
&lt;ul>
&lt;li>⚡ 基于 Hugo 的极速静态博客&lt;/li>
&lt;li>🤖 自动化 Git 工作流（提交即发布）&lt;/li>
&lt;li>📱 响应式主题适配移动端&lt;/li>
&lt;li>🔒 免费 HTTPS 支持&lt;/li>
&lt;/ul>
&lt;p>立即开始你的博客之旅吧！升级方案可添加：&lt;/p>
&lt;ul>
&lt;li>Algolia 搜索（&lt;a class="link" href="https://github.com/replicatedhq/hugo-algolia" target="_blank" rel="noopener"
>hugo-algolia&lt;/a>）&lt;/li>
&lt;li>Utterances 评论系统（GitHub Issue 驱动）&lt;/li>
&lt;li>流量统计（Google Analytics/Umami）&lt;/li>
&lt;/ul></description></item><item><title>博客框架 Hugo，Hexo，Jekyll 三者的区别和对比</title><link>https://muo123.github.io/articles/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6-hugohexojekyll-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 02 Jun 2025 23:23:47 +0800</pubDate><guid>https://muo123.github.io/articles/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6-hugohexojekyll-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%AF%B9%E6%AF%94/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/20250603/5th1/848X557/image.png" alt="Featured image of post 博客框架 Hugo，Hexo，Jekyll 三者的区别和对比" />&lt;p>以下是 Hugo、Hexo 和 Jekyll 三大主流静态博客框架的详细对比，从核心特性到适用场景的全方位分析，帮助你快速选择最适合的工具：&lt;/p>
&lt;hr>
&lt;h3 id="核心区别对比表">&lt;strong>核心区别对比表&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>特性&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Hugo&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Hexo&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Jekyll&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>开发语言&lt;/strong>&lt;/td>
&lt;td>Go（单二进制文件）&lt;/td>
&lt;td>Node.js&lt;/td>
&lt;td>Ruby&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>构建速度&lt;/strong>&lt;/td>
&lt;td>⚡ &lt;strong>极快&lt;/strong>（千页秒级）&lt;/td>
&lt;td>🚀 快（依赖插件复杂度）&lt;/td>
&lt;td>⏳ 较慢（大型项目可能需分钟级）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GitHub Pages 支持&lt;/strong>&lt;/td>
&lt;td>❌ 需本地构建后推送产物&lt;/td>
&lt;td>❌ 需本地构建后推送产物&lt;/td>
&lt;td>✅ &lt;strong>原生支持&lt;/strong>（自动构建）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>安装复杂度&lt;/strong>&lt;/td>
&lt;td>★☆☆（无需环境，下载即用）&lt;/td>
&lt;td>★★☆（需 Node.js 环境）&lt;/td>
&lt;td>★★★（需 Ruby 环境及 Bundler）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>主题生态&lt;/strong>&lt;/td>
&lt;td>丰富（&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>Hugo Themes&lt;/a>）&lt;/td>
&lt;td>极丰富（&lt;a class="link" href="https://hexo.io/themes/" target="_blank" rel="noopener"
>Hexo Themes&lt;/a>）&lt;/td>
&lt;td>成熟（&lt;a class="link" href="https://jekyllthemes.io/" target="_blank" rel="noopener"
>Jekyll Themes&lt;/a>）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>插件扩展性&lt;/strong>&lt;/td>
&lt;td>中等（内置短代码/部分插件）&lt;/td>
&lt;td>✅ &lt;strong>极强&lt;/strong>（600+ 插件）&lt;/td>
&lt;td>良好（Gem 插件）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>模板引擎&lt;/strong>&lt;/td>
&lt;td>Go Templates（学习曲线陡）&lt;/td>
&lt;td>EJS/Swig/Pug（灵活）&lt;/td>
&lt;td>Liquid（易上手）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>内容管理&lt;/strong>&lt;/td>
&lt;td>灵活（支持自定义内容类型）&lt;/td>
&lt;td>标准 Markdown + Front Matter&lt;/td>
&lt;td>标准 Markdown + Front Matter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>适用人群&lt;/strong>&lt;/td>
&lt;td>大型站点/效率优先者&lt;/td>
&lt;td>前端开发者/插件爱好者&lt;/td>
&lt;td>GitHub 新手/讨厌本地构建者&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="深度解析三大框架">&lt;strong>深度解析三大框架&lt;/strong>
&lt;/h3>&lt;h4 id="1-hugo速度至上的极简主义">1. &lt;strong>Hugo：速度至上的极简主义&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>优势&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>无需依赖环境&lt;/strong>：单文件执行，解压即用，跨平台无兼容问题。&lt;/li>
&lt;li>&lt;strong>极致构建速度&lt;/strong>：千篇文章构建仅需 2-5 秒，适合频繁更新的大型博客。&lt;/li>
&lt;li>&lt;strong>强类型内容模型&lt;/strong>：可自定义内容结构（如技术文档、作品集）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>劣势&lt;/strong>
&lt;ul>
&lt;li>Go Templates 语法较复杂（例如条件判断需写 &lt;code>{{ if eq .A .B }}&lt;/code>）。&lt;/li>
&lt;li>插件生态弱于 Hexo，高级功能需手动开发。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>典型用户&lt;/strong>：技术博主、文档站点维护者、讨厌等待构建的人。&lt;/li>
&lt;/ul>
&lt;h4 id="2-hexo前端开发者的瑞士军刀">2. &lt;strong>Hexo：前端开发者的瑞士军刀&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>优势&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>插件驱动&lt;/strong>：支持图床优化（&lt;code>hexo-asset-image&lt;/code>）、SEO 增强（&lt;code>hexo-seo&lt;/code>）等深度定制。&lt;/li>
&lt;li>&lt;strong>技术栈亲和&lt;/strong>：基于 Node.js，前端开发者可无缝接入 Webpack/Babel 等工具。&lt;/li>
&lt;li>&lt;strong>主题高度自由&lt;/strong>：可修改主题源码，自由度远超 Hugo/Jekyll 的主题配置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>劣势&lt;/strong>
&lt;ul>
&lt;li>插件过多可能导致构建缓慢（需谨慎选择插件）。&lt;/li>
&lt;li>需熟悉 Node.js 开发环境（版本兼容问题常见）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>典型用户&lt;/strong>：前端工程师、需要深度定制的技术博主。&lt;/li>
&lt;/ul>
&lt;h4 id="3-jekyllgithub-亲儿子的零配置方案">3. &lt;strong>Jekyll：GitHub 亲儿子的零配置方案&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>优势&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>无缝 GitHub 集成&lt;/strong>：推送 Markdown 即自动发布，无需本地构建。&lt;/li>
&lt;li>&lt;strong>低学习曲线&lt;/strong>：Liquid 模板类似自然语言（例：&lt;code>{% if page.title %}&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>官方维护保障&lt;/strong>：GitHub 官方支持，兼容性无忧。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>劣势&lt;/strong>
&lt;ul>
&lt;li>Ruby 环境在 Windows 易出错（需 RubyInstaller + DevKit）。&lt;/li>
&lt;li>百篇文章以上构建显著变慢（&amp;gt;30秒）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>典型用户&lt;/strong>：写作优先的博主、非技术背景用户、小型项目快速上线。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="关键决策场景">&lt;strong>关键决策场景&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>你的需求&lt;/strong>&lt;/th>
&lt;th>&lt;strong>推荐框架&lt;/strong>&lt;/th>
&lt;th>&lt;strong>原因&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>纯写作/讨厌命令行&lt;/td>
&lt;td>Jekyll&lt;/td>
&lt;td>推送 Markdown 即发布，无需构建&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>博客规模大（&amp;gt;500篇文章）&lt;/td>
&lt;td>Hugo&lt;/td>
&lt;td>构建速度碾压对手，节省生命&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>前端开发者/爱折腾插件&lt;/td>
&lt;td>Hexo&lt;/td>
&lt;td>用 Node.js 生态定制功能（如 PWA 支持）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>需托管 GitHub 且追求稳定&lt;/td>
&lt;td>Jekyll&lt;/td>
&lt;td>官方支持，无构建失败风险&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>多语言站点（i18n）&lt;/td>
&lt;td>Hugo&lt;/td>
&lt;td>内置多语言支持，配置简单&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="终极选择建议">&lt;strong>终极选择建议&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>选 Hugo 如果&lt;/strong>：你追求效率至上，内容量巨大，或抗拒环境配置。&lt;/li>
&lt;li>&lt;strong>选 Hexo 如果&lt;/strong>：你是前端开发者，需要插件拓展功能（如 Algolia 搜索）。&lt;/li>
&lt;li>&lt;strong>选 Jekyll 如果&lt;/strong>：你希望完全依赖 GitHub 自动化，专注写作而非技术。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>💡 &lt;strong>部署提示&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Hugo/Hexo 可用 GitHub Actions 自动化构建（&lt;a class="link" href="https://github.com/peaceiris/actions-hugo" target="_blank" rel="noopener"
>示例脚本&lt;/a>）。&lt;/li>
&lt;li>避免将 &lt;code>node_modules&lt;/code>/&lt;code>public&lt;/code> 推送到 Git 仓库（用 &lt;code>.gitignore&lt;/code> 过滤）。&lt;/li>
&lt;/ul>&lt;/blockquote></description></item><item><title>Github Pages 搭建个人博客可供选择的框架有哪些</title><link>https://muo123.github.io/articles/github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%AF%E4%BE%9B%E9%80%89%E6%8B%A9%E7%9A%84%E6%A1%86%E6%9E%B6%E6%9C%89%E5%93%AA%E4%BA%9B/</link><pubDate>Mon, 02 Jun 2025 22:52:19 +0800</pubDate><guid>https://muo123.github.io/articles/github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%AF%E4%BE%9B%E9%80%89%E6%8B%A9%E7%9A%84%E6%A1%86%E6%9E%B6%E6%9C%89%E5%93%AA%E4%BA%9B/</guid><description>&lt;img src="https://tc.z.wiki/autoupload/20250603/sjGQ/1085X637/image.png" alt="Featured image of post Github Pages 搭建个人博客可供选择的框架有哪些" />&lt;p>在 GitHub Pages 上搭建个人博客是极佳的选择（免费、稳定、易用），而选择合适的静态网站生成框架至关重要。以下是主流且与 GitHub Pages 配合良好的框架，以及它们之间的核心区别：&lt;/p>
&lt;h2 id="-主流框架推荐">🎈 主流框架推荐
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Jekyll&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>官方支持：&lt;/strong> GitHub Pages &lt;strong>原生支持&lt;/strong> Jekyll。这意味着你只需将 Jekyll 源文件推送到仓库，GitHub 会自动为你构建网站。无需本地构建或上传 &lt;code>_site&lt;/code> 目录。&lt;/li>
&lt;li>&lt;strong>语言：&lt;/strong> Ruby&lt;/li>
&lt;li>&lt;strong>特点：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>简单易上手：&lt;/strong> 主题、插件丰富，文档完善，社区庞大，非常适合初学者。&lt;/li>
&lt;li>&lt;strong>约定优于配置：&lt;/strong> 遵循特定目录结构，很多功能开箱即用。&lt;/li>
&lt;li>&lt;strong>Liquid 模板引擎：&lt;/strong> 灵活但学习曲线相对平缓。&lt;/li>
&lt;li>&lt;strong>Markdown 支持：&lt;/strong> 内置支持，方便写作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势：&lt;/strong> 与 GitHub Pages 集成最无缝，部署最省心。&lt;/li>
&lt;li>&lt;strong>劣势：&lt;/strong> 构建速度在大型站点上相对较慢；需要 Ruby 环境进行本地开发。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hugo&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>官方支持：&lt;/strong> GitHub Pages &lt;strong>不原生支持&lt;/strong> Hugo。你需要&lt;strong>在本地构建&lt;/strong>网站（生成 &lt;code>public&lt;/code> 目录），然后将这个 &lt;code>public&lt;/code> 目录的内容推送到 GitHub 仓库（通常是 &lt;code>gh-pages&lt;/code> 分支或特定分支/docs 目录）。&lt;/li>
&lt;li>&lt;strong>语言：&lt;/strong> Go (编译成单个二进制文件)&lt;/li>
&lt;li>&lt;strong>特点：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>极速构建：&lt;/strong> 最大的优势！构建成千上万页面也只需几秒到十几秒。&lt;/li>
&lt;li>&lt;strong>单二进制文件：&lt;/strong> 安装部署极其简单，无需复杂的语言环境。&lt;/li>
&lt;li>&lt;strong>强大灵活：&lt;/strong> 内容组织方式灵活，模板功能强大（Go Templates）。&lt;/li>
&lt;li>&lt;strong>主题丰富：&lt;/strong> 拥有非常庞大且活跃的主题生态系统。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势：&lt;/strong> 无与伦比的构建速度，本地开发体验极佳，部署简单（虽然需要本地构建）。&lt;/li>
&lt;li>&lt;strong>劣势：&lt;/strong> Go Templates 学习曲线可能比 Liquid 稍陡；需要手动构建后部署到 GitHub Pages。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hexo&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>官方支持：&lt;/strong> GitHub Pages &lt;strong>不原生支持&lt;/strong> Hexo。需要&lt;strong>本地构建&lt;/strong>（生成 &lt;code>public&lt;/code> 目录），然后推送 &lt;code>public&lt;/code> 目录内容。&lt;/li>
&lt;li>&lt;strong>语言：&lt;/strong> Node.js&lt;/li>
&lt;li>&lt;strong>特点：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>快速高效：&lt;/strong> 构建速度较快（虽然通常不及 Hugo）。&lt;/li>
&lt;li>&lt;strong>插件驱动：&lt;/strong> 拥有海量的插件，功能扩展性极强。&lt;/li>
&lt;li>&lt;strong>主题丰富：&lt;/strong> 主题数量众多，风格多样。&lt;/li>
&lt;li>&lt;strong>面向博客优化：&lt;/strong> 对博客所需的标签、分类、归档等支持良好。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势：&lt;/strong> 基于 Node.js，对前端开发者友好；插件生态强大，可定制性高。&lt;/li>
&lt;li>&lt;strong>劣势：&lt;/strong> 需要 Node.js 环境；配置可能相对复杂一些。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>VuePress / VitePress&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>官方支持：&lt;/strong> GitHub Pages &lt;strong>不原生支持&lt;/strong>。需要&lt;strong>本地构建&lt;/strong>，推送构建产物（通常是 &lt;code>.vuepress/dist&lt;/code> 或 &lt;code>.vitepress/dist&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>语言：&lt;/strong> Node.js (基于 Vue.js)&lt;/li>
&lt;li>&lt;strong>特点：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>技术栈驱动：&lt;/strong> 专为技术文档设计，但对博客也非常适合，尤其适合熟悉 Vue.js 的开发者。&lt;/li>
&lt;li>&lt;strong>Markdown 扩展强大：&lt;/strong> 可以在 Markdown 中直接使用 Vue 组件，实现高度交互性。&lt;/li>
&lt;li>&lt;strong>默认主题优秀：&lt;/strong> 官方默认主题简洁美观，功能实用。&lt;/li>
&lt;li>&lt;strong>开发体验好：&lt;/strong> 基于 Vite，启动和热更新速度极快。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势：&lt;/strong> 技术文档和博客的完美结合；利用 Vue 组件系统实现高度定制；优秀的开发体验。&lt;/li>
&lt;li>&lt;strong>劣势：&lt;/strong> 对不熟悉 Vue 的开发者有一定门槛；主题和插件生态相对 Jekyll/Hugo/Hexo 规模小些（但增长快）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Eleventy (11ty)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>官方支持：&lt;/strong> GitHub Pages &lt;strong>不原生支持&lt;/strong>。需要&lt;strong>本地构建&lt;/strong>，推送构建产物（可配置）。&lt;/li>
&lt;li>&lt;strong>语言：&lt;/strong> Node.js&lt;/li>
&lt;li>&lt;strong>特点：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>极度灵活与简单：&lt;/strong> 零配置默认值，但可深度定制。支持多种模板语言（Liquid, Nunjucks, Handlebars, Markdown, HTML 等），你可以混用。&lt;/li>
&lt;li>&lt;strong>轻量级：&lt;/strong> 框架本身非常精简，概念少。&lt;/li>
&lt;li>&lt;strong>高性能：&lt;/strong> 构建速度很快。&lt;/li>
&lt;li>&lt;strong>“无框架”框架：&lt;/strong> 更倾向于提供核心的静态生成能力，不强制特定的项目结构或数据模型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势：&lt;/strong> 极高的灵活性和自由度；学习曲线相对平缓（尤其如果你熟悉其中一种模板语言）；性能优异。&lt;/li>
&lt;li>&lt;strong>劣势：&lt;/strong> 需要自己搭建更多东西（相比开箱即用的框架）；主题生态不如前几个成熟；需要 Node.js 环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Astro&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>官方支持：&lt;/strong> GitHub Pages &lt;strong>不原生支持&lt;/strong>。需要&lt;strong>本地构建&lt;/strong>，推送构建产物（&lt;code>dist&lt;/code> 目录）。&lt;/li>
&lt;li>&lt;strong>语言：&lt;/strong> Node.js (但组件理念独特)&lt;/li>
&lt;li>&lt;strong>特点：&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>岛屿架构：&lt;/strong> 核心理念！默认输出纯静态 HTML/CSS，但可以按需“激活”页面上的交互式组件（称为“岛屿”），大幅减少不必要的 JS。&lt;/li>
&lt;li>&lt;strong>框架无关：&lt;/strong> 可以在 &lt;code>.astro&lt;/code> 组件中无缝使用 React, Vue, Svelte, Solid 等 UI 框架的组件。&lt;/li>
&lt;li>&lt;strong>高性能：&lt;/strong> 非常注重输出站点的性能（速度、SEO）。&lt;/li>
&lt;li>&lt;strong>内容优先：&lt;/strong> 对 Markdown/MDX 支持优秀，内置内容集合功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势：&lt;/strong> 构建现代、高性能网站的最佳选择之一；独特的架构带来极佳的用户体验；强大的内容管理能力；灵活的组件系统。&lt;/li>
&lt;li>&lt;strong>劣势：&lt;/strong> 概念较新，学习曲线相对陡峭；需要 Node.js 环境；生态还在快速发展中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-核心区别对比表">🔍 核心区别对比表
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">特性&lt;/th>
&lt;th style="text-align: left">Jekyll&lt;/th>
&lt;th style="text-align: left">Hugo&lt;/th>
&lt;th style="text-align: left">Hexo&lt;/th>
&lt;th style="text-align: left">VuePress/VitePress&lt;/th>
&lt;th style="text-align: left">Eleventy (11ty)&lt;/th>
&lt;th style="text-align: left">Astro&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>原生 GitHub Pages 支持&lt;/strong>&lt;/td>
&lt;td style="text-align: left">✅ &lt;strong>是&lt;/strong> (自动构建)&lt;/td>
&lt;td style="text-align: left">❌ 否 (需本地构建)&lt;/td>
&lt;td style="text-align: left">❌ 否 (需本地构建)&lt;/td>
&lt;td style="text-align: left">❌ 否 (需本地构建)&lt;/td>
&lt;td style="text-align: left">❌ 否 (需本地构建)&lt;/td>
&lt;td style="text-align: left">❌ 否 (需本地构建)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>开发语言&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Ruby&lt;/td>
&lt;td style="text-align: left">Go (单二进制)&lt;/td>
&lt;td style="text-align: left">Node.js&lt;/td>
&lt;td style="text-align: left">Node.js (Vue)&lt;/td>
&lt;td style="text-align: left">Node.js&lt;/td>
&lt;td style="text-align: left">Node.js&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>最大优势&lt;/strong>&lt;/td>
&lt;td style="text-align: left">与 GitHub Pages 集成&lt;/td>
&lt;td style="text-align: left">&lt;strong>极速构建&lt;/strong>&lt;/td>
&lt;td style="text-align: left">插件生态强大&lt;/td>
&lt;td style="text-align: left">Markdown+Vue组件&lt;/td>
&lt;td style="text-align: left">&lt;strong>灵活简单&lt;/strong>，多模板&lt;/td>
&lt;td style="text-align: left">&lt;strong>岛屿架构&lt;/strong>，高性能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>构建速度&lt;/strong>&lt;/td>
&lt;td style="text-align: left">较慢 (大型站点)&lt;/td>
&lt;td style="text-align: left">⚡ &lt;strong>极快&lt;/strong>&lt;/td>
&lt;td style="text-align: left">快&lt;/td>
&lt;td style="text-align: left">快 (VitePress 更快)&lt;/td>
&lt;td style="text-align: left">快&lt;/td>
&lt;td style="text-align: left">快&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>学习曲线&lt;/strong>&lt;/td>
&lt;td style="text-align: left">平缓&lt;/td>
&lt;td style="text-align: left">中等 (Go模板)&lt;/td>
&lt;td style="text-align: left">中等&lt;/td>
&lt;td style="text-align: left">中等 (需Vue基础)&lt;/td>
&lt;td style="text-align: left">平缓 (熟悉模板即可)&lt;/td>
&lt;td style="text-align: left">较陡 (新概念)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>主题生态&lt;/strong>&lt;/td>
&lt;td style="text-align: left">非常丰富&lt;/td>
&lt;td style="text-align: left">非常丰富&lt;/td>
&lt;td style="text-align: left">非常丰富&lt;/td>
&lt;td style="text-align: left">良好 (官方主题优秀)&lt;/td>
&lt;td style="text-align: left">增长中&lt;/td>
&lt;td style="text-align: left">增长迅速&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>插件/扩展性&lt;/strong>&lt;/td>
&lt;td style="text-align: left">良好&lt;/td>
&lt;td style="text-align: left">良好 (短代码等)&lt;/td>
&lt;td style="text-align: left">✅ &lt;strong>极好&lt;/strong>&lt;/td>
&lt;td style="text-align: left">良好&lt;/td>
&lt;td style="text-align: left">良好 (通过配置/JS)&lt;/td>
&lt;td style="text-align: left">良好 (集成框架能力强)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>灵活性/自由度&lt;/strong>&lt;/td>
&lt;td style="text-align: left">中等&lt;/td>
&lt;td style="text-align: left">高&lt;/td>
&lt;td style="text-align: left">高&lt;/td>
&lt;td style="text-align: left">高 (Vue组件)&lt;/td>
&lt;td style="text-align: left">✅ &lt;strong>极高&lt;/strong>&lt;/td>
&lt;td style="text-align: left">高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>最适合人群&lt;/strong>&lt;/td>
&lt;td style="text-align: left">新手/GitHub集成优先&lt;/td>
&lt;td style="text-align: left">讨厌等待/大型站点&lt;/td>
&lt;td style="text-align: left">前端开发者/插件爱好者&lt;/td>
&lt;td style="text-align: left">Vue开发者/技术文档&lt;/td>
&lt;td style="text-align: left">追求简洁自由/多语言者&lt;/td>
&lt;td style="text-align: left">性能控/现代框架使用者&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="-选择建议">📌 选择建议
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>追求最简单部署，不想本地构建：选 &lt;code>Jekyll&lt;/code>。&lt;/strong> GitHub 替你搞定一切，专注于写作。&lt;/li>
&lt;li>&lt;strong>博客规模大或无法忍受慢速构建：选 &lt;code>Hugo&lt;/code>。&lt;/strong> 速度是王道，部署步骤也简单。&lt;/li>
&lt;li>&lt;strong>前端开发者，喜欢丰富的插件和主题：选 &lt;code>Hexo&lt;/code>。&lt;/strong> Node.js 环境很熟悉，扩展性强。&lt;/li>
&lt;li>&lt;strong>熟悉 Vue.js 或需要强交互/技术文档：选 &lt;code>VuePress&lt;/code> / &lt;code>VitePress&lt;/code>。&lt;/strong> Markdown + Vue 的组合非常强大，开发体验好。&lt;/li>
&lt;li>&lt;strong>喜欢简洁、灵活、自由度高，不依赖特定框架：选 &lt;code>Eleventy&lt;/code>。&lt;/strong> 用你喜欢的模板语言，按你的方式组织。&lt;/li>
&lt;li>&lt;strong>构建高性能、现代化网站，想用不同框架组件：选 &lt;code>Astro&lt;/code>。&lt;/strong> 岛屿架构带来卓越性能，未来感十足。&lt;/li>
&lt;/ul>
&lt;h2 id="-重要提示">💡 重要提示
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>部署方式：&lt;/strong> 只有 Jekyll 享受 GitHub Pages 的原生构建支持。对于其他框架，你&lt;strong>必须&lt;/strong>在本地或通过 GitHub Actions 等 CI/CD 工具完成构建，然后将生成的静态文件（通常是 &lt;code>public&lt;/code>, &lt;code>dist&lt;/code>, &lt;code>_site&lt;/code>, &lt;code>docs&lt;/code> 等目录）推送到仓库的特定分支（如 &lt;code>gh-pages&lt;/code>）或主分支的特定目录（如 &lt;code>/docs&lt;/code>），并在仓库设置中指定源。&lt;/li>
&lt;li>&lt;strong>GitHub Actions：&lt;/strong> 对于非 Jekyll 框架，强烈推荐使用 GitHub Actions 自动化构建和部署过程。这样你只需推送源代码，Actions 会自动执行构建并将生成的静态文件部署到 GitHub Pages。官方或社区通常提供现成的 Action 工作流。&lt;/li>
&lt;li>&lt;strong>考虑熟悉度：&lt;/strong> 选择你或你的团队最熟悉的语言和技术的框架，会大大降低学习成本和开发效率。&lt;/li>
&lt;li>&lt;strong>需求驱动：&lt;/strong> 明确你的博客需求（纯写作？需要复杂功能？需要极致性能？需要特定技术栈集成？），再根据需求选择最匹配的框架。&lt;/li>
&lt;/ol>
&lt;h2 id="-总结">🎯 总结
&lt;/h2>&lt;p>GitHub Pages 为静态博客提供了优秀的托管平台。Jekyll 凭借其原生集成是&lt;strong>最省心&lt;/strong>的选择。Hugo 凭借&lt;strong>无与伦比的构建速度&lt;/strong>是大型站点或追求效率者的首选。Hexo 以其强大的&lt;strong>插件生态&lt;/strong>吸引 Node.js 开发者。VuePress/VitePress 是 &lt;strong>Vue 技术栈和文档需求&lt;/strong>的绝配。Eleventy 提供了&lt;strong>最大的灵活性&lt;/strong>和简洁性。Astro 则代表了&lt;strong>现代高性能 Web 开发&lt;/strong>的方向。&lt;/p>
&lt;p>根据你的具体需求、技术偏好和对部署流程的接受程度，仔细权衡以上框架的特点，就能找到最适合你在 GitHub Pages 上搭建个人博客的工具！开始构建你的博客之旅吧！&lt;/p></description></item></channel></rss>