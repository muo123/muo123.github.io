[{"content":"以下是 Hugo + GitHub Pages 博客搭建全流程指南，从环境配置到自动化部署，附详细代码和避坑提示：\n一、环境准备 ( Windows ) 1. 安装 Git 下载地址：https://git-scm.cn/\n去 Git 官网下载对应版本，如无意外选择 x64 版本安装即可\n安装成功后可以在开始菜单栏看到 Git 文件夹以及相关 Git 工具 验证安装 (Git Bash) 2. 安装 Hugo 下载地址： https://github.com/gohugoio/hugo/releases\n下载 Hugo 扩展版（支持 Sass/SCSS） (选 hugo_extended_*.zip) 解压到 D:\\Hugo 并将路径加入系统环境变量 PATH 验证安装 3. 创建本地 Git 仓库 创建项目。在任意文件夹（图例为 D 盘）打开控制台，并输入指令 hugo new site xxx(你的项目名) 初始化本地仓库。切换至当前目录，并运行 git init 指令 运行服务。切换至该目录，并输入指令 hugo server，网址输入localhost:1313，此时由于没有主题内容，显示 page not found，在控制台输入Ctrl + C即可关闭服务 二、项目配置 1. 添加主题（以 Stack 为例） 可以选择从官网下载，选择喜欢的主题并下载压缩包，解压到 themes 文件夹\n官网地址：https://themes.gohugo.io/\n或者使用 git 指令下载对应主题\n1 2 # 将主题添加为 Git 子模块（避免直接复制文件） git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack 2. 基础配置 个人编写 hugo.toml 比较耗费时间，下载的主题文件夹中一般包含网站实例 exampleSite，可以将里面的 content 文件夹和 hugo.yaml 配置文件拷贝到当前目录，并覆盖博客目录相关文件。覆盖目录文件后，可能出现兼容性报错，此时需要删除 Content/post/rich-content。另外，相关语言配置项根据需要进行合理修改\n3. 创建第一篇文章 1 hugo new posts/hello.md 编辑 content/posts/hello-world.md：\n1 2 3 4 5 6 7 +++ date = \u0026#39;2025-06-02T22:12:41+08:00\u0026#39; draft = true title = \u0026#39;Hello\u0026#39; +++ this is a test 三、本地预览 1 hugo server -D # -D 包含草稿 访问 https://localhost:1313 实时预览\n四、部署到 GitHub Pages 方案一：手动部署（适合初学者） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. 构建静态文件（生成到 public 目录） hugo --minify # 2. 创建 GitHub 仓库：\u0026lt;你的用户名\u0026gt;.github.io # 3. 第一次推送代码之前需要进行如下配置 git config --global user.name \u0026#34;你的 GitHub 用户名\u0026#34; git config --global user.email \u0026#34;你注册 GitHub 的邮箱\u0026#34; # 4. 将 public 目录推送到仓库 cd public git init git add . git remote add origin git@Github.com:\u0026lt;用户名\u0026gt;/\u0026lt;用户名\u0026gt;.github.io.git (需要设置ssh) \u0026gt;\u0026gt;\u0026gt; 或者使用指令 git remote add origin https://github.com/\u0026lt;用户名\u0026gt;/\u0026lt;用户名\u0026gt;.github.io.git git commit -m \u0026#34;Initial deploy\u0026#34; git push -u origin main 方案二：自动化部署（推荐！使用 GitHub Actions） 创建新仓库 1 2 3 4 5 \u0026gt; 创建一个用来储存所有博客文件的新仓库，权限设置为 `private` \u0026gt; 前往 Settings/Developer Settings/Personal access tokens , 点击 “Generate new token (classic)” 创建一个 token，并勾选 repo 和 workflow 选项 \u0026gt; 复制 token，前往新仓库的 Settings/Secrets and variables/Actions，点击 New repository secret 将 token 保存在仓库的环境变量中。 博客项目根目录创建 .github/workflows/deploy.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 name: blog deploy on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest\tsteps: - uses: actions/checkout@v4\twith: submodules: true fetch-depth: 0 - name: Setup Hugo\tuses: peaceiris/actions-hugo@v3\twith: hugo-version: \u0026#39;latest\u0026#39;\textended: true - name: Build run: hugo -D - name: Deploy uses: peaceiris/actions-gh-pages@v4\twith: external_repository: xxx/xxx.github.io\t# 自己的GitHub pages仓库 personal_token: ${{ secrets.你的token变量名 }} publish_dir: ./public\tpublish_branch: main\t可以在目录创建 .gitignore 文件，避免提交部分文件，例如\n1 2 3 public resources .hugo_build.lock 推送代码到 GitHub 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;Add workflow\u0026#34; git remote add origin git@Github.com:\u0026lt;用户名\u0026gt;/\u0026lt;用户名\u0026gt;.github.io.git (需要设置ssh) \u0026gt;\u0026gt;\u0026gt; 或者使用指令 git remote add origin https://github.com/\u0026lt;用户名\u0026gt;/\u0026lt;用户名\u0026gt;.github.io.git git push -u origin main 五、访问与优化 访问地址\nhttps://\u0026lt;用户名\u0026gt;.github.io (首次部署需等待 1-2 分钟)\n自定义域名（可选）\n在项目根目录添加 static/CNAME 文件，内容为域名： 1 blog.yourdomain.com DNS 添加 CNAME 记录指向 \u0026lt;用户名\u0026gt;.github.io 强制 HTTPS\n在 GitHub Pages 设置中勾选 Enforce HTTPS\n六、常用命令速查 命令 作用 hugo new posts/标题.md 新建文章 hugo server -D 启动本地服务器（含草稿） hugo --minify 构建优化后的静态文件 git submodule update --remote 更新主题 七、避坑指南 主题无法加载\n确保使用 git submodule 添加主题 在 Actions 中启用 submodules: recursive 构建失败\n检查 .github/workflows/deploy.yml 中的 Hugo 版本是否匹配 确保使用 extended 版本（如果主题需要 SCSS） 中文乱码\n在文章 Front Matter 中明确指定编码：\n1 charset: utf-8 自定义布局\n复制主题文件到本地覆盖（避免直接修改主题）：\n1 cp themes/stack/layouts/_default/single.html layouts/ 效果预览 完成部署后，你将获得：\n⚡ 基于 Hugo 的极速静态博客 🤖 自动化 Git 工作流（提交即发布） 📱 响应式主题适配移动端 🔒 免费 HTTPS 支持 立即开始你的博客之旅吧！升级方案可添加：\nAlgolia 搜索（hugo-algolia） Utterances 评论系统（GitHub Issue 驱动） 流量统计（Google Analytics/Umami） ","date":"2025-06-03T11:02:43+08:00","permalink":"https://muo123.github.io/p/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"博客搭建"},{"content":"以下是 Hugo、Hexo 和 Jekyll 三大主流静态博客框架的详细对比，从核心特性到适用场景的全方位分析，帮助你快速选择最适合的工具：\n核心区别对比表 特性 Hugo Hexo Jekyll 开发语言 Go（单二进制文件） Node.js Ruby 构建速度 ⚡ 极快（千页秒级） 🚀 快（依赖插件复杂度） ⏳ 较慢（大型项目可能需分钟级） GitHub Pages 支持 ❌ 需本地构建后推送产物 ❌ 需本地构建后推送产物 ✅ 原生支持（自动构建） 安装复杂度 ★☆☆（无需环境，下载即用） ★★☆（需 Node.js 环境） ★★★（需 Ruby 环境及 Bundler） 主题生态 丰富（Hugo Themes） 极丰富（Hexo Themes） 成熟（Jekyll Themes） 插件扩展性 中等（内置短代码/部分插件） ✅ 极强（600+ 插件） 良好（Gem 插件） 模板引擎 Go Templates（学习曲线陡） EJS/Swig/Pug（灵活） Liquid（易上手） 内容管理 灵活（支持自定义内容类型） 标准 Markdown + Front Matter 标准 Markdown + Front Matter 适用人群 大型站点/效率优先者 前端开发者/插件爱好者 GitHub 新手/讨厌本地构建者 深度解析三大框架 1. Hugo：速度至上的极简主义 优势 无需依赖环境：单文件执行，解压即用，跨平台无兼容问题。 极致构建速度：千篇文章构建仅需 2-5 秒，适合频繁更新的大型博客。 强类型内容模型：可自定义内容结构（如技术文档、作品集）。 劣势 Go Templates 语法较复杂（例如条件判断需写 {{ if eq .A .B }}）。 插件生态弱于 Hexo，高级功能需手动开发。 典型用户：技术博主、文档站点维护者、讨厌等待构建的人。 2. Hexo：前端开发者的瑞士军刀 优势 插件驱动：支持图床优化（hexo-asset-image）、SEO 增强（hexo-seo）等深度定制。 技术栈亲和：基于 Node.js，前端开发者可无缝接入 Webpack/Babel 等工具。 主题高度自由：可修改主题源码，自由度远超 Hugo/Jekyll 的主题配置。 劣势 插件过多可能导致构建缓慢（需谨慎选择插件）。 需熟悉 Node.js 开发环境（版本兼容问题常见）。 典型用户：前端工程师、需要深度定制的技术博主。 3. Jekyll：GitHub 亲儿子的零配置方案 优势 无缝 GitHub 集成：推送 Markdown 即自动发布，无需本地构建。 低学习曲线：Liquid 模板类似自然语言（例：{% if page.title %}）。 官方维护保障：GitHub 官方支持，兼容性无忧。 劣势 Ruby 环境在 Windows 易出错（需 RubyInstaller + DevKit）。 百篇文章以上构建显著变慢（\u0026gt;30秒）。 典型用户：写作优先的博主、非技术背景用户、小型项目快速上线。 关键决策场景 你的需求 推荐框架 原因 纯写作/讨厌命令行 Jekyll 推送 Markdown 即发布，无需构建 博客规模大（\u0026gt;500篇文章） Hugo 构建速度碾压对手，节省生命 前端开发者/爱折腾插件 Hexo 用 Node.js 生态定制功能（如 PWA 支持） 需托管 GitHub 且追求稳定 Jekyll 官方支持，无构建失败风险 多语言站点（i18n） Hugo 内置多语言支持，配置简单 终极选择建议 选 Hugo 如果：你追求效率至上，内容量巨大，或抗拒环境配置。 选 Hexo 如果：你是前端开发者，需要插件拓展功能（如 Algolia 搜索）。 选 Jekyll 如果：你希望完全依赖 GitHub 自动化，专注写作而非技术。 💡 部署提示：\nHugo/Hexo 可用 GitHub Actions 自动化构建（示例脚本）。 避免将 node_modules/public 推送到 Git 仓库（用 .gitignore 过滤）。 ","date":"2025-06-02T23:23:47+08:00","image":"https://tc.z.wiki/autoupload/20250603/5th1/848X557/image.png","permalink":"https://muo123.github.io/p/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6-hugohexojekyll-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%AF%B9%E6%AF%94/","title":"博客框架 Hugo，Hexo，Jekyll 三者的区别和对比"},{"content":"在 GitHub Pages 上搭建个人博客是极佳的选择（免费、稳定、易用），而选择合适的静态网站生成框架至关重要。以下是主流且与 GitHub Pages 配合良好的框架，以及它们之间的核心区别：\n🎈 主流框架推荐 Jekyll\n官方支持： GitHub Pages 原生支持 Jekyll。这意味着你只需将 Jekyll 源文件推送到仓库，GitHub 会自动为你构建网站。无需本地构建或上传 _site 目录。 语言： Ruby 特点： 简单易上手： 主题、插件丰富，文档完善，社区庞大，非常适合初学者。 约定优于配置： 遵循特定目录结构，很多功能开箱即用。 Liquid 模板引擎： 灵活但学习曲线相对平缓。 Markdown 支持： 内置支持，方便写作。 优势： 与 GitHub Pages 集成最无缝，部署最省心。 劣势： 构建速度在大型站点上相对较慢；需要 Ruby 环境进行本地开发。 Hugo\n官方支持： GitHub Pages 不原生支持 Hugo。你需要在本地构建网站（生成 public 目录），然后将这个 public 目录的内容推送到 GitHub 仓库（通常是 gh-pages 分支或特定分支/docs 目录）。 语言： Go (编译成单个二进制文件) 特点： 极速构建： 最大的优势！构建成千上万页面也只需几秒到十几秒。 单二进制文件： 安装部署极其简单，无需复杂的语言环境。 强大灵活： 内容组织方式灵活，模板功能强大（Go Templates）。 主题丰富： 拥有非常庞大且活跃的主题生态系统。 优势： 无与伦比的构建速度，本地开发体验极佳，部署简单（虽然需要本地构建）。 劣势： Go Templates 学习曲线可能比 Liquid 稍陡；需要手动构建后部署到 GitHub Pages。 Hexo\n官方支持： GitHub Pages 不原生支持 Hexo。需要本地构建（生成 public 目录），然后推送 public 目录内容。 语言： Node.js 特点： 快速高效： 构建速度较快（虽然通常不及 Hugo）。 插件驱动： 拥有海量的插件，功能扩展性极强。 主题丰富： 主题数量众多，风格多样。 面向博客优化： 对博客所需的标签、分类、归档等支持良好。 优势： 基于 Node.js，对前端开发者友好；插件生态强大，可定制性高。 劣势： 需要 Node.js 环境；配置可能相对复杂一些。 VuePress / VitePress\n官方支持： GitHub Pages 不原生支持。需要本地构建，推送构建产物（通常是 .vuepress/dist 或 .vitepress/dist）。 语言： Node.js (基于 Vue.js) 特点： 技术栈驱动： 专为技术文档设计，但对博客也非常适合，尤其适合熟悉 Vue.js 的开发者。 Markdown 扩展强大： 可以在 Markdown 中直接使用 Vue 组件，实现高度交互性。 默认主题优秀： 官方默认主题简洁美观，功能实用。 开发体验好： 基于 Vite，启动和热更新速度极快。 优势： 技术文档和博客的完美结合；利用 Vue 组件系统实现高度定制；优秀的开发体验。 劣势： 对不熟悉 Vue 的开发者有一定门槛；主题和插件生态相对 Jekyll/Hugo/Hexo 规模小些（但增长快）。 Eleventy (11ty)\n官方支持： GitHub Pages 不原生支持。需要本地构建，推送构建产物（可配置）。 语言： Node.js 特点： 极度灵活与简单： 零配置默认值，但可深度定制。支持多种模板语言（Liquid, Nunjucks, Handlebars, Markdown, HTML 等），你可以混用。 轻量级： 框架本身非常精简，概念少。 高性能： 构建速度很快。 “无框架”框架： 更倾向于提供核心的静态生成能力，不强制特定的项目结构或数据模型。 优势： 极高的灵活性和自由度；学习曲线相对平缓（尤其如果你熟悉其中一种模板语言）；性能优异。 劣势： 需要自己搭建更多东西（相比开箱即用的框架）；主题生态不如前几个成熟；需要 Node.js 环境。 Astro\n官方支持： GitHub Pages 不原生支持。需要本地构建，推送构建产物（dist 目录）。 语言： Node.js (但组件理念独特) 特点： 岛屿架构： 核心理念！默认输出纯静态 HTML/CSS，但可以按需“激活”页面上的交互式组件（称为“岛屿”），大幅减少不必要的 JS。 框架无关： 可以在 .astro 组件中无缝使用 React, Vue, Svelte, Solid 等 UI 框架的组件。 高性能： 非常注重输出站点的性能（速度、SEO）。 内容优先： 对 Markdown/MDX 支持优秀，内置内容集合功能。 优势： 构建现代、高性能网站的最佳选择之一；独特的架构带来极佳的用户体验；强大的内容管理能力；灵活的组件系统。 劣势： 概念较新，学习曲线相对陡峭；需要 Node.js 环境；生态还在快速发展中。 🔍 核心区别对比表 特性 Jekyll Hugo Hexo VuePress/VitePress Eleventy (11ty) Astro 原生 GitHub Pages 支持 ✅ 是 (自动构建) ❌ 否 (需本地构建) ❌ 否 (需本地构建) ❌ 否 (需本地构建) ❌ 否 (需本地构建) ❌ 否 (需本地构建) 开发语言 Ruby Go (单二进制) Node.js Node.js (Vue) Node.js Node.js 最大优势 与 GitHub Pages 集成 极速构建 插件生态强大 Markdown+Vue组件 灵活简单，多模板 岛屿架构，高性能 构建速度 较慢 (大型站点) ⚡ 极快 快 快 (VitePress 更快) 快 快 学习曲线 平缓 中等 (Go模板) 中等 中等 (需Vue基础) 平缓 (熟悉模板即可) 较陡 (新概念) 主题生态 非常丰富 非常丰富 非常丰富 良好 (官方主题优秀) 增长中 增长迅速 插件/扩展性 良好 良好 (短代码等) ✅ 极好 良好 良好 (通过配置/JS) 良好 (集成框架能力强) 灵活性/自由度 中等 高 高 高 (Vue组件) ✅ 极高 高 最适合人群 新手/GitHub集成优先 讨厌等待/大型站点 前端开发者/插件爱好者 Vue开发者/技术文档 追求简洁自由/多语言者 性能控/现代框架使用者 📌 选择建议 追求最简单部署，不想本地构建：选 Jekyll。 GitHub 替你搞定一切，专注于写作。 博客规模大或无法忍受慢速构建：选 Hugo。 速度是王道，部署步骤也简单。 前端开发者，喜欢丰富的插件和主题：选 Hexo。 Node.js 环境很熟悉，扩展性强。 熟悉 Vue.js 或需要强交互/技术文档：选 VuePress / VitePress。 Markdown + Vue 的组合非常强大，开发体验好。 喜欢简洁、灵活、自由度高，不依赖特定框架：选 Eleventy。 用你喜欢的模板语言，按你的方式组织。 构建高性能、现代化网站，想用不同框架组件：选 Astro。 岛屿架构带来卓越性能，未来感十足。 💡 重要提示 部署方式： 只有 Jekyll 享受 GitHub Pages 的原生构建支持。对于其他框架，你必须在本地或通过 GitHub Actions 等 CI/CD 工具完成构建，然后将生成的静态文件（通常是 public, dist, _site, docs 等目录）推送到仓库的特定分支（如 gh-pages）或主分支的特定目录（如 /docs），并在仓库设置中指定源。 GitHub Actions： 对于非 Jekyll 框架，强烈推荐使用 GitHub Actions 自动化构建和部署过程。这样你只需推送源代码，Actions 会自动执行构建并将生成的静态文件部署到 GitHub Pages。官方或社区通常提供现成的 Action 工作流。 考虑熟悉度： 选择你或你的团队最熟悉的语言和技术的框架，会大大降低学习成本和开发效率。 需求驱动： 明确你的博客需求（纯写作？需要复杂功能？需要极致性能？需要特定技术栈集成？），再根据需求选择最匹配的框架。 🎯 总结 GitHub Pages 为静态博客提供了优秀的托管平台。Jekyll 凭借其原生集成是最省心的选择。Hugo 凭借无与伦比的构建速度是大型站点或追求效率者的首选。Hexo 以其强大的插件生态吸引 Node.js 开发者。VuePress/VitePress 是 Vue 技术栈和文档需求的绝配。Eleventy 提供了最大的灵活性和简洁性。Astro 则代表了现代高性能 Web 开发的方向。\n根据你的具体需求、技术偏好和对部署流程的接受程度，仔细权衡以上框架的特点，就能找到最适合你在 GitHub Pages 上搭建个人博客的工具！开始构建你的博客之旅吧！\n","date":"2025-06-02T22:52:19+08:00","image":"https://tc.z.wiki/autoupload/20250603/sjGQ/1085X637/image.png","permalink":"https://muo123.github.io/p/github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%AF%E4%BE%9B%E9%80%89%E6%8B%A9%E7%9A%84%E6%A1%86%E6%9E%B6%E6%9C%89%E5%93%AA%E4%BA%9B/","title":"Github Pages 搭建个人博客可供选择的框架有哪些"}]