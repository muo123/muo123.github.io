<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>雪国流明</title>
        <link>https://muo123.github.io/</link>
        <description>Recent content on 雪国流明</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>muo123</copyright>
        <lastBuildDate>Tue, 10 Jun 2025 19:54:08 +0800</lastBuildDate><atom:link href="https://muo123.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>详细了解 SQL</title>
        <link>https://muo123.github.io/articles/%E8%AF%A6%E7%BB%86%E4%BA%86%E8%A7%A3-sql/</link>
        <pubDate>Tue, 10 Jun 2025 19:54:08 +0800</pubDate>
        
        <guid>https://muo123.github.io/articles/%E8%AF%A6%E7%BB%86%E4%BA%86%E8%A7%A3-sql/</guid>
        <description>&lt;p&gt;&lt;strong&gt;SQL (Structured Query Language)&lt;/strong&gt;，它是与关系型数据库进行交互的&lt;strong&gt;标准编程语言&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;核心概念&#34;&gt;核心概念
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;关系型数据库 (RDBMS):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SQL 操作的对象是&lt;strong&gt;关系型数据库管理系统&lt;/strong&gt;，如 MySQL, PostgreSQL, Oracle, Microsoft SQL Server, SQLite 等。&lt;/li&gt;
&lt;li&gt;数据以&lt;strong&gt;表&lt;/strong&gt;的形式组织存储，类似于电子表格。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表 (Table):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数据库中的基本结构，用于存储特定类型的数据实体（例如：&lt;code&gt;Customers&lt;/code&gt;, &lt;code&gt;Orders&lt;/code&gt;, &lt;code&gt;Products&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;一个数据库通常包含多个表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列 (Column):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;定义表中的属性或字段（例如：在 &lt;code&gt;Customers&lt;/code&gt; 表中，可能有 &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;FirstName&lt;/code&gt;, &lt;code&gt;LastName&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt;, &lt;code&gt;City&lt;/code&gt; 等列）。&lt;/li&gt;
&lt;li&gt;每列有特定的数据类型（如整数 &lt;code&gt;INT&lt;/code&gt;, 字符串 &lt;code&gt;VARCHAR&lt;/code&gt;, 日期 &lt;code&gt;DATE&lt;/code&gt;, 布尔值 &lt;code&gt;BOOLEAN&lt;/code&gt; 等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行 (Row) / 记录 (Record):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;表中的一条具体数据项（例如：一行代表一个具体的客户信息）。&lt;/li&gt;
&lt;li&gt;每一行在表中应该是唯一的（通常通过主键保证）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主键 (Primary Key):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;表中一列或一组列，其值能&lt;strong&gt;唯一标识&lt;/strong&gt;表中的每一行（例如：&lt;code&gt;CustomerID&lt;/code&gt;）。不能为 &lt;code&gt;NULL&lt;/code&gt; 且值必须唯一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外键 (Foreign Key):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个表中的一列（或一组列），其值引用另一个表的&lt;strong&gt;主键&lt;/strong&gt;。用于建立表与表之间的&lt;strong&gt;关系&lt;/strong&gt;（例如：&lt;code&gt;Orders&lt;/code&gt; 表中的 &lt;code&gt;CustomerID&lt;/code&gt; 列是外键，引用 &lt;code&gt;Customers&lt;/code&gt; 表的主键 &lt;code&gt;CustomerID&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sql-的主要组成部分按功能分类&#34;&gt;SQL 的主要组成部分（按功能分类）
&lt;/h2&gt;&lt;p&gt;SQL 语句根据其功能主要分为以下几类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DDL (Data Definition Language - 数据定义语言):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于&lt;strong&gt;定义、修改和删除数据库结构&lt;/strong&gt;（模式）。&lt;/li&gt;
&lt;li&gt;主要语句：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CREATE&lt;/code&gt;: 创建数据库、表、索引、视图等对象。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;TABLE&lt;/span&gt; Customers (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CustomerID &lt;span style=&#34;color:#ff5c57&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;KEY&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FirstName &lt;span style=&#34;color:#ff5c57&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#ff9f43&#34;&gt;50&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LastName &lt;span style=&#34;color:#ff5c57&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#ff9f43&#34;&gt;50&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Email &lt;span style=&#34;color:#ff5c57&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#ff9f43&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALTER&lt;/code&gt;: 修改现有数据库对象的结构（如添加、删除或修改列）。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;TABLE&lt;/span&gt; Customers &lt;span style=&#34;color:#ff6ac1&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;COLUMN&lt;/span&gt; PhoneNumber &lt;span style=&#34;color:#ff5c57&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#ff9f43&#34;&gt;20&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DROP&lt;/code&gt;: 删除数据库对象（表、索引、视图等）。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;TABLE&lt;/span&gt; OldCustomers;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRUNCATE&lt;/code&gt;: 快速删除表中的所有数据（保留表结构），通常比 &lt;code&gt;DELETE&lt;/code&gt; 更快且不记录单个行删除。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;TRUNCATE&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;TABLE&lt;/span&gt; LogEntries;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DML (Data Manipulation Language - 数据操作语言):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于&lt;strong&gt;操作数据库表中的实际数据&lt;/strong&gt;（增、删、改）。&lt;/li&gt;
&lt;li&gt;主要语句：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSERT&lt;/code&gt;: 向表中插入新的数据行。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;INTO&lt;/span&gt; Customers (FirstName, LastName, Email)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Doe&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;john.doe@example.com&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UPDATE&lt;/code&gt;: 修改表中已有的数据行。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;UPDATE&lt;/span&gt; Customers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;SET&lt;/span&gt; Email &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;new.email@example.com&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;WHERE&lt;/span&gt; CustomerID &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;123&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;: 从表中删除数据行。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;FROM&lt;/span&gt; Customers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;WHERE&lt;/span&gt; CustomerID &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;456&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DQL (Data Query Language - 数据查询语言):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要用于&lt;strong&gt;从数据库中检索数据&lt;/strong&gt;。虽然只有一个核心语句，但它是最常用和最复杂的部分。&lt;/li&gt;
&lt;li&gt;核心语句：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt;: 从一个或多个表中查询数据。功能极其强大，包含众多子句：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;SELECT&lt;/span&gt; column1, column2, ... &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#78787e&#34;&gt;-- 选择要返回的列 (* 表示所有列)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;table_name&lt;/span&gt;                  &lt;span style=&#34;color:#78787e&#34;&gt;-- 指定数据来源的表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#ff6ac1&#34;&gt;WHERE&lt;/span&gt; condition]                &lt;span style=&#34;color:#78787e&#34;&gt;-- 过滤行 (基于指定条件)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#ff6ac1&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;column_name&lt;/span&gt;]           &lt;span style=&#34;color:#78787e&#34;&gt;-- 将结果集按一列或多列分组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#ff6ac1&#34;&gt;HAVING&lt;/span&gt; condition]              &lt;span style=&#34;color:#78787e&#34;&gt;-- 对分组后的结果集进行过滤 (与 GROUP BY 配合使用)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#ff6ac1&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;column_name&lt;/span&gt; [&lt;span style=&#34;color:#ff6ac1&#34;&gt;ASC&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;DESC&lt;/span&gt;]] &lt;span style=&#34;color:#78787e&#34;&gt;-- 对结果集排序 (ASC 升序, DESC 降序)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#ff6ac1&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;number&lt;/span&gt;];                 &lt;span style=&#34;color:#78787e&#34;&gt;-- 限制返回的行数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键子句详解 (&lt;code&gt;SELECT&lt;/code&gt;):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JOIN&lt;/code&gt; (&lt;code&gt;INNER JOIN&lt;/code&gt;, &lt;code&gt;LEFT JOIN&lt;/code&gt; / &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt;, &lt;code&gt;RIGHT JOIN&lt;/code&gt; / &lt;code&gt;RIGHT OUTER JOIN&lt;/code&gt;, &lt;code&gt;FULL JOIN&lt;/code&gt; / &lt;code&gt;FULL OUTER JOIN&lt;/code&gt;, &lt;code&gt;CROSS JOIN&lt;/code&gt;): 用于&lt;strong&gt;组合来自两个或多个表&lt;/strong&gt;的行，基于它们之间的相关列（通常是外键关系）。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;SELECT&lt;/span&gt; Orders.OrderID, Customers.FirstName, Customers.LastName
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;FROM&lt;/span&gt; Orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;JOIN&lt;/span&gt; Customers &lt;span style=&#34;color:#ff6ac1&#34;&gt;ON&lt;/span&gt; Orders.CustomerID &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; Customers.CustomerID; &lt;span style=&#34;color:#78787e&#34;&gt;-- 只返回有匹配订单的客户
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;:&lt;/strong&gt; 只返回两个表中匹配的行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LEFT (OUTER) JOIN&lt;/code&gt;:&lt;/strong&gt; 返回左表 (FROM 后的表) 的所有行，即使右表中没有匹配。右表不匹配的部分用 &lt;code&gt;NULL&lt;/code&gt; 填充。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RIGHT (OUTER) JOIN&lt;/code&gt;:&lt;/strong&gt; 返回右表 (JOIN 后的表) 的所有行，即使左表中没有匹配。左表不匹配的部分用 &lt;code&gt;NULL&lt;/code&gt; 填充。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;FULL (OUTER) JOIN&lt;/code&gt;:&lt;/strong&gt; 返回左右两表中所有的行。不匹配的部分用 &lt;code&gt;NULL&lt;/code&gt; 填充。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;CROSS JOIN&lt;/code&gt;:&lt;/strong&gt; 返回两个表的笛卡尔积（所有可能的行组合）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子查询 (Subquery):&lt;/strong&gt; 嵌套在另一个 &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 语句或另一个子查询中的查询。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;SELECT&lt;/span&gt; CustomerName
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;FROM&lt;/span&gt; Customers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;WHERE&lt;/span&gt; CustomerID &lt;span style=&#34;color:#ff6ac1&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color:#ff6ac1&#34;&gt;SELECT&lt;/span&gt; CustomerID &lt;span style=&#34;color:#ff6ac1&#34;&gt;FROM&lt;/span&gt; Orders &lt;span style=&#34;color:#ff6ac1&#34;&gt;WHERE&lt;/span&gt; OrderDate &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;2023-01-01&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合操作 (Set Operations):&lt;/strong&gt; 组合多个 &lt;code&gt;SELECT&lt;/code&gt; 语句的结果集。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt;: 合并结果集，&lt;strong&gt;自动去除重复行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNION ALL&lt;/code&gt;: 合并结果集，&lt;strong&gt;包含所有行（包括重复行）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INTERSECT&lt;/code&gt;: 返回两个查询结果集的&lt;strong&gt;交集&lt;/strong&gt;（共同存在的行）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXCEPT&lt;/code&gt; (或 &lt;code&gt;MINUS&lt;/code&gt;): 返回第一个查询结果集中&lt;strong&gt;排除&lt;/strong&gt;第二个查询结果集内容后的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DCL (Data Control Language - 数据控制语言):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于&lt;strong&gt;控制数据库访问权限和安全性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;主要语句：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GRANT&lt;/code&gt;: 授予用户或角色对数据库对象的特定权限（如 &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALL PRIVILEGES&lt;/code&gt;）。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;SELECT&lt;/span&gt;, &lt;span style=&#34;color:#ff6ac1&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;ON&lt;/span&gt; Customers &lt;span style=&#34;color:#ff6ac1&#34;&gt;TO&lt;/span&gt; user_reporting;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REVOKE&lt;/code&gt;: 撤销之前授予的权限。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;REVOKE&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;ON&lt;/span&gt; Orders &lt;span style=&#34;color:#ff6ac1&#34;&gt;FROM&lt;/span&gt; user_intern;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCL (Transaction Control Language - 事务控制语言):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于&lt;strong&gt;管理数据库中的事务&lt;/strong&gt;。事务是一组作为单个逻辑工作单元执行的 SQL 语句，要么全部成功，要么全部失败（ACID 特性：原子性、一致性、隔离性、持久性）。&lt;/li&gt;
&lt;li&gt;主要语句：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BEGIN TRANSACTION&lt;/code&gt; (或 &lt;code&gt;START TRANSACTION&lt;/code&gt;): 显式开始一个事务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt;: 提交事务，使事务中所有修改永久生效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROLLBACK&lt;/code&gt;: 回滚事务，撤销事务中所有未提交的修改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SAVEPOINT&lt;/code&gt;: 在事务内设置保存点，允许部分回滚到该点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SET TRANSACTION&lt;/code&gt;: 设置事务特性（如隔离级别）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sql-的重要特性&#34;&gt;SQL 的重要特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;声明式语言 (Declarative):&lt;/strong&gt; 你主要描述&lt;strong&gt;你想要什么数据&lt;/strong&gt;（&lt;code&gt;SELECT ... WHERE ...&lt;/code&gt;），而不是像过程式语言那样详细指定计算机如何一步步获取数据。数据库引擎的&lt;strong&gt;查询优化器&lt;/strong&gt;负责找出最高效的执行路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准化:&lt;/strong&gt; SQL 有 ANSI/ISO 标准（如 SQL-92, SQL:1999, SQL:2003, SQL:2008, SQL:2011, SQL:2016, SQL:2019），确保了核心语法的通用性。但&lt;strong&gt;不同数据库厂商（如 MySQL, PostgreSQL, Oracle, SQL Server）在实现标准 SQL 的同时，都扩展了自己的特有功能（方言）和数据类型&lt;/strong&gt;。编写可移植的 SQL 需要注意这些差异。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的查询能力:&lt;/strong&gt; 通过 &lt;code&gt;SELECT&lt;/code&gt; 语句结合 &lt;code&gt;WHERE&lt;/code&gt;, &lt;code&gt;JOIN&lt;/code&gt;, &lt;code&gt;GROUP BY&lt;/code&gt;, &lt;code&gt;HAVING&lt;/code&gt;, 子查询、窗口函数等，可以执行非常复杂的数据检索、聚合和分析操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据完整性与安全性:&lt;/strong&gt; 通过约束（主键、外键、唯一约束、非空约束、检查约束）、事务（ACID）和权限控制（DCL）来保证数据的准确、一致和安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql-的实际应用场景&#34;&gt;SQL 的实际应用场景
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据检索与分析:&lt;/strong&gt; 这是 SQL 最核心的用途。分析师、数据科学家、产品经理等使用 SQL 从海量数据中提取所需信息，生成报告，进行业务分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web 应用后端:&lt;/strong&gt; 几乎所有动态网站（电商、社交网络、内容管理系统）的后端服务器都使用 SQL 数据库存储用户信息、产品数据、订单、帖子等内容，并通过 SQL 进行读写操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动应用后端:&lt;/strong&gt; 与 Web 应用类似，移动 App 的数据通常也存储在服务器端的 SQL 数据库中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据仓库与商业智能 (BI):&lt;/strong&gt; SQL 是查询数据仓库（如 Amazon Redshift, Google BigQuery, Snowflake）和操作 BI 工具（如 Tableau, Power BI, Looker）的基础语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据迁移与集成 (ETL):&lt;/strong&gt; 在数据管道中，SQL 常用于从源数据库提取数据、在暂存区转换数据、以及加载到目标数据库或数据仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库管理:&lt;/strong&gt; DBA（数据库管理员）使用 SQL 进行数据库的创建、维护、性能调优、备份恢复、用户权限管理等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习-sql-的建议&#34;&gt;学习 SQL 的建议
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;动手实践:&lt;/strong&gt; 理论学习是基础，但最重要的是动手写 SQL 语句。安装一个数据库（如 MySQL, PostgreSQL 或 SQLite）或使用在线练习平台（如 LeetCode, HackerRank, SQLZoo, Mode Analytics SQL Tutorial, W3Schools SQL）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解基础:&lt;/strong&gt; 牢固掌握 &lt;code&gt;SELECT&lt;/code&gt;（包括所有关键子句 &lt;code&gt;WHERE&lt;/code&gt;, &lt;code&gt;GROUP BY&lt;/code&gt;, &lt;code&gt;HAVING&lt;/code&gt;, &lt;code&gt;ORDER BY&lt;/code&gt;, &lt;code&gt;LIMIT&lt;/code&gt;）、&lt;code&gt;JOIN&lt;/code&gt;（各种连接的区别）、基本的 &lt;code&gt;INSERT&lt;/code&gt;/&lt;code&gt;UPDATE&lt;/code&gt;/&lt;code&gt;DELETE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;掌握 &lt;code&gt;JOIN&lt;/code&gt;:&lt;/strong&gt; 理解不同 &lt;code&gt;JOIN&lt;/code&gt; 类型（尤其是 &lt;code&gt;INNER JOIN&lt;/code&gt; 和 &lt;code&gt;LEFT JOIN&lt;/code&gt;）的工作原理和应用场景至关重要，因为实际数据通常分布在多个表中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学习聚合与分组:&lt;/strong&gt; &lt;code&gt;GROUP BY&lt;/code&gt; 和聚合函数（&lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;）是数据分析的核心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解子查询:&lt;/strong&gt; 学会编写和使用子查询来解决复杂问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熟悉所用数据库的文档:&lt;/strong&gt; 了解你正在使用的特定数据库（MySQL, PostgreSQL 等）的语法细节、数据类型和特有功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关注性能:&lt;/strong&gt; 学习如何编写高效的 SQL 查询（例如：使用索引、避免 &lt;code&gt;SELECT *&lt;/code&gt;、优化 &lt;code&gt;JOIN&lt;/code&gt; 和 &lt;code&gt;WHERE&lt;/code&gt; 条件）。&lt;code&gt;EXPLAIN&lt;/code&gt; 或 &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; 命令是你的好朋友。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理 &lt;code&gt;NULL&lt;/code&gt; 值:&lt;/strong&gt; 理解 &lt;code&gt;NULL&lt;/code&gt; 在比较、计算和聚合中的行为，并学会使用 &lt;code&gt;IS NULL&lt;/code&gt; / &lt;code&gt;IS NOT NULL&lt;/code&gt; 和 &lt;code&gt;COALESCE&lt;/code&gt; / &lt;code&gt;IFNULL&lt;/code&gt; 等函数处理它。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;SQL 是管理和操作关系型数据库的基石语言。它功能强大、应用广泛，从简单的数据查询到复杂的业务逻辑实现都离不开它。无论是数据分析师、软件工程师、产品经理还是数据库管理员，掌握 SQL 都是一项极具价值的核心技能。其声明式的特性让你专注于“要什么”，而让数据库引擎去解决“怎么拿”的问题，极大地提高了数据处理的效率和便捷性。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>怎么给 Hugo 添加 Mermaid</title>
        <link>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0-mermaid/</link>
        <pubDate>Tue, 10 Jun 2025 13:17:52 +0800</pubDate>
        
        <guid>https://muo123.github.io/articles/%E6%80%8E%E4%B9%88%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0-mermaid/</guid>
        <description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250610/O17b/1045X478/image.png" alt="Featured image of post 怎么给 Hugo 添加 Mermaid" /&gt;&lt;p&gt;Hugo 没有为 Mermaid 图标提供内置模板，查阅 Hugo 文档发现在 Hugo 中添加 Mermaid 支持可以通过以下步骤实现：&lt;/p&gt;
&lt;h3 id=&#34;创建渲染钩子文件&#34;&gt;&lt;strong&gt;创建渲染钩子文件&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;在项目目录中新建文件：&lt;br&gt;
&lt;code&gt;layouts/_default/_markup/render-codeblock-mermaid.html&lt;/code&gt;&lt;br&gt;
内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;mermaid&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {{ .Inner | htmlEscape | safeHTML }}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff6ac1&#34;&gt;pre&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{ .Page.Store.Set &amp;#34;hasMermaid&amp;#34; true }}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加-mermaid-初始化脚本&#34;&gt;&lt;strong&gt;添加 Mermaid 初始化脚本&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;layouts/_default/baseof.html&lt;/code&gt; 文件的底部添加（注意需要在&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;标签之前）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{ if .Store.Get &amp;#34;hasMermaid&amp;#34; }}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; mermaid from &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mermaid.initialize({ startOnLoad&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;验证使用&#34;&gt;验证使用
&lt;/h3&gt;&lt;p&gt;创建测试内容 &lt;code&gt;content/post/demo.md&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;```mermaid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sequenceDiagram
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    participant Alice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    participant Bob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loop Healthcheck
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        John-&amp;gt;&amp;gt;John: Fight against hypochondria
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    John--&amp;gt;&amp;gt;Alice: Great!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    John-&amp;gt;&amp;gt;Bob: How about you?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;```
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现效果如下所示：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;
  sequenceDiagram
    participant Alice
    participant Bob
    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
    John--&amp;gt;&amp;gt;Alice: Great!
    John-&amp;gt;&amp;gt;Bob: How about you?
    Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/pre&gt;
&lt;p&gt;完成以上步骤后，Hugo 站点即可支持 Mermaid 图表渲染。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>深入了解MVC架构</title>
        <link>https://muo123.github.io/articles/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3mvc%E6%9E%B6%E6%9E%84/</link>
        <pubDate>Mon, 09 Jun 2025 21:11:31 +0800</pubDate>
        
        <guid>https://muo123.github.io/articles/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3mvc%E6%9E%B6%E6%9E%84/</guid>
        <description>&lt;img src="https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/sDey/743X194/image.png" alt="Featured image of post 深入了解MVC架构" /&gt;&lt;p&gt;本文将深入探讨 &lt;strong&gt;MVC (Model-View-Controller)&lt;/strong&gt; 架构模式，特别是在 &lt;strong&gt;iOS开发&lt;/strong&gt; 中的实现、优缺点和演变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVC 的核心思想：职责分离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MVC 的核心目标是将应用程序的逻辑划分为三个清晰的角色，每个角色有明确的职责，从而降低代码的耦合度，提高可维护性和可测试性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MyFeature/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Model/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── User.swift          // 数据模型
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── DataService.swift   // 网络/数据库服务
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── View/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── ProfileView.swift   // 自定义视图
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── ProfileCell.swift   // TableView单元格
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── Controller/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── ProfileViewController.swift // 视图控制器
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;经典-mvc-理论模型&#34;&gt;&lt;strong&gt;经典 MVC 理论模型&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/Y9Mn/841X108/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;841X108/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;经典 MVC 数据流示意图&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户 (User)&lt;/strong&gt; 与 &lt;strong&gt;视图 (View)&lt;/strong&gt; 交互（如点击按钮）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; 将用户事件传递给 &lt;strong&gt;控制器 (Controller)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; 处理逻辑：
&lt;ul&gt;
&lt;li&gt;更新 &lt;strong&gt;模型 (Model)&lt;/strong&gt; 数据（如保存用户输入）。&lt;/li&gt;
&lt;li&gt;从 &lt;strong&gt;Model&lt;/strong&gt; 读取数据（如查询数据库）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; 数据变更后通知 &lt;strong&gt;Controller&lt;/strong&gt;（通过观察者模式等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; 将新数据传递给 &lt;strong&gt;View&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; 根据数据更新界面，反馈给用户。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ &lt;strong&gt;理想情况&lt;/strong&gt;：各层职责分离，数据流清晰。&lt;br&gt;
❌ &lt;strong&gt;iOS 现实&lt;/strong&gt;：Controller 常过度承担逻辑，导致臃肿。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;model-模型&#34;&gt;&lt;strong&gt;Model (模型)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;职责：&lt;/strong&gt; 代表应用程序的核心数据和业务逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包含什么：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数据结构（例如：&lt;code&gt;User&lt;/code&gt;, &lt;code&gt;Product&lt;/code&gt;, &lt;code&gt;Order&lt;/code&gt; 等类或结构体）。&lt;/li&gt;
&lt;li&gt;数据的操作方法（例如：创建、读取、更新、删除 - CRUD）。&lt;/li&gt;
&lt;li&gt;业务规则和计算逻辑（例如：验证用户输入、计算订单总价）。&lt;/li&gt;
&lt;li&gt;数据持久化操作（例如：与数据库、网络API交互的代码，虽然有时这部分会单独抽象成服务层）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键特性：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;独立于 UI：&lt;/strong&gt; Model 完全不关心数据如何显示或用户如何交互。它只关注数据本身和操作数据的逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知变更：&lt;/strong&gt; 当 Model 的数据发生改变时，它需要一种机制来通知相关方（通常是 Controller）。在 iOS 中，这通常通过以下几种方式实现：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;KVO (Key-Value Observing)：&lt;/strong&gt; 允许对象监听另一个对象特定属性的变化。（较底层，手动管理麻烦）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;委托模式 (Delegation)：&lt;/strong&gt; 定义协议，Model 持有对实现了该协议的委托对象（通常是 Controller）的弱引用，并在数据变化时调用委托方法。（常用，但通常是一对一）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知中心 (NotificationCenter)：&lt;/strong&gt; 广播数据变更事件，任何注册监听的组件都可以响应。（一对多，松散耦合，但需注意内存管理和类型安全）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应式编程 (Combine/RxSwift)：&lt;/strong&gt; 使用可观察的流来处理数据变更通知。（现代、强大，但学习曲线较陡）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直接调用：&lt;/strong&gt; Controller 在修改 Model 后，直接手动更新 View。（最简单，但耦合度高，容易遗漏）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;view-视图&#34;&gt;&lt;strong&gt;View (视图)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;职责：&lt;/strong&gt; 负责数据的可视化呈现和捕获用户的输入事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包含什么：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;UI 组件：&lt;code&gt;UIView&lt;/code&gt; 及其子类 (&lt;code&gt;UILabel&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;UITableView&lt;/code&gt;, &lt;code&gt;UICollectionView&lt;/code&gt;, &lt;code&gt;UITextField&lt;/code&gt; 等)。&lt;/li&gt;
&lt;li&gt;布局信息：Frame、Auto Layout 约束、Size Classes。&lt;/li&gt;
&lt;li&gt;外观样式：颜色、字体、图片、动画效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键特性：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被动：&lt;/strong&gt; 理想情况下，View 本身不应该包含业务逻辑。它只负责：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;展示：&lt;/strong&gt; 根据 Controller 提供的数据渲染 UI。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互：&lt;/strong&gt; 检测用户操作（如点击、滑动、输入）并将这些事件 &lt;strong&gt;传递&lt;/strong&gt; 给 Controller 处理。View 本身不决定如何处理这些事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可复用：&lt;/strong&gt; 设计良好的 View 组件（如自定义的 &lt;code&gt;UIView&lt;/code&gt; 子类）可以在不同的界面甚至不同的项目中复用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;独立于 Model：&lt;/strong&gt; View 不应该直接访问或操作 Model。它应该通过 Controller 来获取展示所需的数据（通常是简单的、格式化的数据，而不是整个 Model 对象）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;controller-控制器&#34;&gt;&lt;strong&gt;Controller (控制器)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;职责：&lt;/strong&gt; 作为 &lt;strong&gt;Model&lt;/strong&gt; 和 &lt;strong&gt;View&lt;/strong&gt; 之间的 &lt;strong&gt;协调者 (Mediator)&lt;/strong&gt; 和 &lt;strong&gt;胶水 (Glue)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包含什么：&lt;/strong&gt; 在 iOS 中，最主要的 Controller 是 &lt;code&gt;UIViewController&lt;/code&gt; 及其子类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键任务：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理 View 生命周期：&lt;/strong&gt; 响应 &lt;code&gt;viewDidLoad&lt;/code&gt;, &lt;code&gt;viewWillAppear&lt;/code&gt;, &lt;code&gt;viewDidDisappear&lt;/code&gt; 等事件，负责创建、配置、显示和销毁 View。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取/更新 Model：&lt;/strong&gt; 从数据源（数据库、网络、其他服务）获取数据并填充 Model。响应用户操作或业务逻辑要求更新 Model。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新 View：&lt;/strong&gt; 监听 Model 的变化（通过 KVO、委托、通知等），获取最新的数据，并将其 &lt;strong&gt;格式化&lt;/strong&gt; 后传递给 View 进行显示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理用户交互：&lt;/strong&gt; 接收来自 View 的用户事件（如按钮点击、表格行选择、文本输入完成），解释这些事件的含义，触发相应的业务逻辑（通常是更新 Model 或导航到其他界面）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导航：&lt;/strong&gt; 管理视图控制器之间的切换（Push/Pop, Present/Dismiss）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理其他系统事件：&lt;/strong&gt; 如内存警告、旋转事件等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键特性：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强依赖：&lt;/strong&gt; Controller 通常需要了解具体的 View 和 Model 细节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心枢纽：&lt;/strong&gt; 大部分应用程序逻辑（尤其是与UI流程相关的）都汇聚在这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mvc-中的数据流向&#34;&gt;&lt;strong&gt;MVC 中的数据流向：&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;标准的 MVC 数据流有两种主要路径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户交互路径：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户在 &lt;strong&gt;View&lt;/strong&gt; 上操作（点击按钮）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; 将事件 &lt;strong&gt;通知&lt;/strong&gt; 给 &lt;strong&gt;Controller&lt;/strong&gt; (例如：通过 IBAction)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; &lt;strong&gt;解释&lt;/strong&gt; 事件，执行相应的业务逻辑：
&lt;ul&gt;
&lt;li&gt;可能需要 &lt;strong&gt;更新 Model&lt;/strong&gt; (例如：将商品加入购物车)。&lt;/li&gt;
&lt;li&gt;可能需要 &lt;strong&gt;更新 View&lt;/strong&gt; 状态 (例如：禁用按钮)。&lt;/li&gt;
&lt;li&gt;可能需要 &lt;strong&gt;导航&lt;/strong&gt; 到新界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果 Model 被更新，Model 会 &lt;strong&gt;通知&lt;/strong&gt; Controller 变化发生了（如果 Controller 监听了 Model）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; 从 &lt;strong&gt;Model&lt;/strong&gt; 获取 &lt;strong&gt;更新后的数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; 将 &lt;strong&gt;格式化后的数据&lt;/strong&gt; &lt;strong&gt;传递给&lt;/strong&gt; &lt;strong&gt;View&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; 根据新数据 &lt;strong&gt;更新其 UI&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Model 变更路径 (非用户直接触发)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部因素导致 &lt;strong&gt;Model&lt;/strong&gt; 发生变化（例如：后台网络请求完成、定时器触发更新）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; &lt;strong&gt;通知&lt;/strong&gt; 其监听者（通常是 &lt;strong&gt;Controller&lt;/strong&gt;）变化发生了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; 从 &lt;strong&gt;Model&lt;/strong&gt; 获取 &lt;strong&gt;更新后的数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; 将 &lt;strong&gt;格式化后的数据&lt;/strong&gt; &lt;strong&gt;传递给&lt;/strong&gt; &lt;strong&gt;View&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; 根据新数据 &lt;strong&gt;更新其 UI&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ios-中的-mvcmassive-view-controller问题&#34;&gt;&lt;strong&gt;iOS 中的 MVC（“Massive View Controller”问题）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/l8wN/878X304/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;878X304/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iOS MVC 的典型问题：Massive View Controller&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Model 与 View 几乎无直接交互&lt;/strong&gt;，完全依赖 &lt;strong&gt;Controller&lt;/strong&gt; 中介。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View 与 Controller 强耦合&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;IBOutlet&lt;/code&gt;（视图控件引用）和 &lt;code&gt;IBAction&lt;/code&gt;（事件回调）紧密绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller 成为“上帝对象”&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;承担 &lt;strong&gt;业务逻辑&lt;/strong&gt;、&lt;strong&gt;网络请求&lt;/strong&gt;、&lt;strong&gt;数据解析&lt;/strong&gt;、&lt;strong&gt;UI 配置&lt;/strong&gt;、&lt;strong&gt;导航跳转&lt;/strong&gt; 等几乎所有职责。&lt;/li&gt;
&lt;li&gt;导致代码量爆炸（数千行常见），可维护性和可测试性极差。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;💥 &lt;strong&gt;核心问题&lt;/strong&gt;：Controller 违反 &lt;strong&gt;单一职责原则&lt;/strong&gt;，变成“垃圾抽屉”。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;ios-中的-mvc-uikit-mvc现实与理论的差距&#34;&gt;&lt;strong&gt;iOS 中的 MVC (UIKit MVC)：现实与理论的差距&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Apple 在 UIKit 框架中推广了 MVC，但其实现方式与经典的 MVC 理论有显著差异，导致了著名的 &lt;strong&gt;“Massive View Controller” (臃肿的视图控制器)&lt;/strong&gt; 问题：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;组件&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;经典 MVC 理论职责&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;iOS (UIKit) MVC 实际常见职责&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;导致的问题&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据 + 业务逻辑&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据 (常为简单结构体/类)，业务逻辑常被放到 Controller 或 Service&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Model 过于贫血，核心逻辑分散。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;纯展示 + 传递事件&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;展示 + &lt;strong&gt;部分布局逻辑&lt;/strong&gt; (Storyboard/XIB/Code) + 传递事件&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;职责相对清晰，但通过 IBOutlet/IBAction 与 Controller 强耦合。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Controller&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;协调 Model 和 View，处理事件&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;几乎包含所有非 Model/View 的代码&lt;/strong&gt;：&lt;br&gt;- 业务逻辑&lt;br&gt;- 网络请求&lt;br&gt;- 数据解析&lt;br&gt;- 数据转换/格式化&lt;br&gt;- View 配置/布局 (常大量)&lt;br&gt;- 导航逻辑&lt;br&gt;- 处理 Model 变更&lt;br&gt;- 处理用户事件&lt;br&gt;- 生命周期管理&lt;br&gt;- 依赖管理&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Massive View Controller!&lt;/strong&gt; &lt;br&gt;代码量巨大，难以维护、测试、复用。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;为什么-ios-mvc-容易导致-massive-view-controller&#34;&gt;&lt;strong&gt;为什么 iOS MVC 容易导致 Massive View Controller？&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;UIViewController&lt;/code&gt; 的天然定位：&lt;/strong&gt; Apple 设计 &lt;code&gt;UIViewController&lt;/code&gt; 时，就让它紧密关联着一个 &lt;code&gt;UIView&lt;/code&gt; (&lt;code&gt;self.view&lt;/code&gt;)，并且负责其生命周期。这使得 Controller 和 View 的界限在代码中变得模糊，开发者很容易把 View 的配置代码（本应属于 View 的职责）直接写在 Controller 里。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storyboard/XIB 的便利与陷阱：&lt;/strong&gt; Interface Builder (Storyboard/XIB) 虽然能可视化设计 UI，但它将 View 的布局和部分配置（如 Auto Layout 约束）以序列化形式存储。Controller 需要通过 &lt;code&gt;IBOutlet&lt;/code&gt; 连接到这些 View 元素进行动态操作。这种强连接鼓励了在 Controller 中直接操作 View 细节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件处理 (IBAction)：&lt;/strong&gt; &lt;code&gt;IBAction&lt;/code&gt; 方法直接定义在 Controller 中，处理用户交互的逻辑自然就写在了 Controller 里。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺少明确的中间层：&lt;/strong&gt; 经典的 MVC 中，Controller 应该是薄薄的一层协调者。但在 iOS 实践中，由于没有强制分离的规则，业务逻辑、数据转换、网络交互等本可以独立出来的逻辑，都因为方便而被塞进了 Controller。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model 的“贫血”：&lt;/strong&gt; 很多 iOS 开发者习惯将 Model 设计为仅包含数据的简单结构（贫血模型），而将操作这些数据的业务逻辑放在 Controller 中，进一步加重了 Controller 的负担。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;ios-mvc-的优点&#34;&gt;&lt;strong&gt;iOS MVC 的优点：&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单直观：&lt;/strong&gt; 概念清晰，上手容易，尤其适合小型项目或原型开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apple 官方支持：&lt;/strong&gt; UIKit 框架本身的设计就是围绕 MVC 构建的，有大量的文档、教程和示例代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具集成：&lt;/strong&gt; Storyboard/XIB 与 &lt;code&gt;UIViewController&lt;/code&gt; 的集成非常紧密。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期管理：&lt;/strong&gt; &lt;code&gt;UIViewController&lt;/code&gt; 提供了明确的视图生命周期钩子。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ios-mvc-的缺点&#34;&gt;&lt;strong&gt;iOS MVC 的缺点：&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Massive View Controller：&lt;/strong&gt; 这是最核心的痛点，导致代码臃肿、难以阅读、维护困难、复用性差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;难以单元测试：&lt;/strong&gt; Controller 通常依赖 &lt;code&gt;UIKit&lt;/code&gt; 组件（如 &lt;code&gt;UIView&lt;/code&gt;, &lt;code&gt;UIViewController&lt;/code&gt; 生命周期）、网络请求、数据库等，使得对其进行隔离单元测试变得复杂且脆弱。庞大的 Controller 也意味着测试用例会非常庞大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;紧耦合：&lt;/strong&gt; View 和 Controller 通过 &lt;code&gt;IBOutlet&lt;/code&gt;/&lt;code&gt;IBAction&lt;/code&gt; 紧密耦合，难以独立复用或替换。Controller 通常也直接知晓具体的 Model 和 View 细节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;职责模糊：&lt;/strong&gt; 业务逻辑、数据转换、UI 更新逻辑混杂在 Controller 中，违反了单一职责原则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码复用性差：&lt;/strong&gt; 与特定 View 强关联的逻辑很难在其他地方复用。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;改进-mvc-的方案减轻-controller-负担&#34;&gt;&lt;strong&gt;改进 MVC 的方案（减轻 Controller 负担）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://tc.z.wiki/autoupload/LLDBPtgBr9Urin7-1d1Bk_nFSiw33MlPagvUIGEPh-ayl5f0KlZfm6UsKj-HyTuv/20250609/Q8S8/792X496/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;792X496/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓解 Massive View Controller 的实践&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抽取独立组件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Service 层&lt;/strong&gt;：封装网络请求、数据库操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DataSource 对象&lt;/strong&gt;：处理 &lt;code&gt;UITableView&lt;/code&gt;/&lt;code&gt;UICollectionView&lt;/code&gt; 的数据源逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utils 工具类&lt;/strong&gt;：提供格式化、校验等辅助函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller 仅保留核心协调职责&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;初始化组件、响应生命周期事件、高层导航决策。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model 升级为“富模型”&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;包含业务逻辑（如 &lt;code&gt;User.validatePassword()&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View 封装自定义控件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将布局代码移入 &lt;code&gt;UIView&lt;/code&gt; 子类，减少 Controller 内 UI 代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ &lt;strong&gt;效果&lt;/strong&gt;：Controller 瘦身，代码可读性和可测试性提升。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;如何缓解-massive-view-controller-在-mvc-框架内&#34;&gt;&lt;strong&gt;如何缓解 Massive View Controller？ (在 MVC 框架内)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;即使坚持使用 MVC，也可以通过一些实践来减轻 Controller 的负担：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;富 Model (Rich Model)：&lt;/strong&gt; 将业务逻辑尽可能地移动到 Model 中。让 Model 不仅仅是一个数据结构，而是包含操作这些数据的方法。例如，&lt;code&gt;User&lt;/code&gt; 模型可以有 &lt;code&gt;changePassword&lt;/code&gt; 方法，内部处理验证逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据源和委托分离：&lt;/strong&gt; 对于 &lt;code&gt;UITableView&lt;/code&gt; 或 &lt;code&gt;UICollectionView&lt;/code&gt;，将其 &lt;code&gt;dataSource&lt;/code&gt; 和 &lt;code&gt;delegate&lt;/code&gt; 分离到独立的类中（例如 &lt;code&gt;MyTableDataSource&lt;/code&gt;），而不是让 Controller 直接实现所有协议方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建 Helper/Utility 类：&lt;/strong&gt; 将通用的工具方法、格式化逻辑、网络请求封装等提取到独立的 Helper 或 Service 类中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 Child View Controllers：&lt;/strong&gt; 将复杂界面拆分成多个逻辑区域，每个区域由自己的 Child View Controller 管理，父 Controller 负责协调。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免在 Controller 中做复杂的 View 布局：&lt;/strong&gt; 尽量使用 Auto Layout（在 Interface Builder 或代码中），并将自定义 View 的布局逻辑封装在 &lt;code&gt;UIView&lt;/code&gt; 子类中。Controller 只负责提供数据和处理高层事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎使用 Storyboard Segues：&lt;/strong&gt; 避免在 Segue 的 &lt;code&gt;prepareForSegue&lt;/code&gt; 方法中塞入过多的数据准备和逻辑。考虑使用更明确的导航方法或路由机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用扩展 (Extensions)：&lt;/strong&gt; 将 Controller 中不同职责的代码划分到不同的扩展文件中（例如 &lt;code&gt;MyViewController+Network.swift&lt;/code&gt;, &lt;code&gt;MyViewController+TableView.swift&lt;/code&gt;），提高可读性，但逻辑上还在同一个类里。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;mvc-的替代方案&#34;&gt;&lt;strong&gt;MVC 的替代方案：&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;为了解决 MVC 在 iOS 中固有的问题，出现了多种替代架构模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MVVM (Model-View-ViewModel)：&lt;/strong&gt; 引入 ViewModel 层，负责将 Model 数据转换为 View 可直接显示的数据，并包含视图相关的状态和命令。View 和 ViewModel 通过数据绑定（如 Combine, RxSwift）连接，大大减少了 Controller（或 View，在 SwiftUI 中）的职责。&lt;strong&gt;这是目前最流行的替代方案，尤其适合 SwiftUI。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VIPER (View-Interactor-Presenter-Entity-Router)：&lt;/strong&gt; 将职责划分得更加细致（路由、业务逻辑、展示逻辑、实体），每个组件职责单一且明确，可测试性极高。但引入的复杂性和文件数量也显著增加，适合大型、长期维护的项目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVP (Model-View-Presenter)：&lt;/strong&gt; 类似于 MVVM，但 View 和 Presenter 之间通常通过接口/协议进行通信，强调被动 View。在 iOS 中不如 MVVM 流行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clean Architecture / TCA (The Composable Architecture)：&lt;/strong&gt; 强调分层（Entities, Use Cases, Interface Adapters, Frameworks &amp;amp; Drivers）、依赖规则（依赖向内指向核心业务逻辑）、单向数据流。TCA 是基于 Swift 的一个具体实现，结合了 Elm 和 Redux 的思想，提供强大的状态管理和可测试性。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结：&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;MVC 是一个基础且重要的架构模式，理解其核心思想和在 iOS 中的具体实现（以及由此引发的 Massive View Controller 问题）是 iOS 开发者的必备知识。虽然它在小型项目或简单界面上仍然有效且快速，但在面对复杂应用时，其缺点会变得非常突出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于新项目：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果主要使用 &lt;strong&gt;SwiftUI&lt;/strong&gt;，MVVM 是非常自然且推荐的选择。&lt;/li&gt;
&lt;li&gt;如果主要使用 &lt;strong&gt;UIKit&lt;/strong&gt;，强烈推荐学习和采用 &lt;strong&gt;MVVM&lt;/strong&gt;（通常结合 Combine 或 RxSwift 进行数据绑定）来避免 Massive View Controller。VIPER 或 Clean Architecture/TCA 是更高级的选择，适用于对可维护性、可测试性要求极高的大型项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对于维护遗留的 UIKit MVC 项目：&lt;/strong&gt; 了解 MVC 的原理和问题所在，并逐步应用上述的“缓解策略”进行重构，或者在有条件和收益的情况下，逐步向 MVVM 等模式迁移部分功能模块。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugo &#43; Github Pages 博客搭建</title>
        <link>https://muo123.github.io/articles/hugo--github-pages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
        <pubDate>Tue, 03 Jun 2025 11:02:43 +0800</pubDate>
        
        <guid>https://muo123.github.io/articles/hugo--github-pages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
        <description>&lt;img src="https://tc.z.wiki/autoupload/20250603/UrPE/1602X637/image.png" alt="Featured image of post Hugo &#43; Github Pages 博客搭建" /&gt;&lt;p&gt;以下是 &lt;strong&gt;Hugo + GitHub Pages 博客搭建全流程指南&lt;/strong&gt;，从环境配置到自动化部署，附详细代码和避坑提示：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一环境准备--windows-&#34;&gt;一、环境准备 ( Windows )
&lt;/h3&gt;&lt;h4 id=&#34;1-安装-git&#34;&gt;1. 安装 Git
&lt;/h4&gt;&lt;p&gt;下载地址：https://git-scm.cn/&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;去 Git 官网下载对应版本，如无意外选择 x64 版本安装即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装成功后可以在开始菜单栏看到 Git 文件夹以及相关 Git 工具
&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/e7iD/590X241/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;590X241/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-安装-hugo&#34;&gt;2. 安装 Hugo
&lt;/h4&gt;&lt;p&gt;下载地址： &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载 Hugo 扩展版（支持 Sass/SCSS）
(选 hugo_extended_*.zip)
&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/C09T/878X261/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;878X261/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压到 D:\Hugo 并将路径加入系统环境变量 PATH
&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/RX8J/702X242/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;702X242/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-创建本地项目&#34;&gt;3. 创建本地项目
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建项目。在任意文件夹（图例为 D 盘）打开控制台，并输入指令 &lt;code&gt;hugo new site xxx(你的项目名)&lt;/code&gt;
&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/snZg/850X422/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;850X422/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行服务。切换至该目录，并输入指令 &lt;code&gt;hugo server&lt;/code&gt;，网址输入&lt;code&gt;localhost:1313&lt;/code&gt;，此时由于没有主题内容，显示 page not found，在控制台输入&lt;code&gt;Ctrl + C&lt;/code&gt;即可关闭服务
&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/2Fhs/1087X555/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1087X555/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二项目配置&#34;&gt;二、项目配置
&lt;/h3&gt;&lt;h4 id=&#34;1-添加主题以-stack-为例&#34;&gt;1. 添加主题（以 &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack&lt;/a&gt; 为例）
&lt;/h4&gt;&lt;p&gt;可以选择从官网下载，选择喜欢的主题并下载压缩包，解压到 &lt;code&gt;themes&lt;/code&gt; 文件夹&lt;/p&gt;
&lt;p&gt;官网地址：https://themes.gohugo.io/&lt;/p&gt;
&lt;p&gt;或者使用 git 指令下载对应主题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# 将主题添加为 Git 子模块（避免直接复制文件）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/j4Rp/565X219/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;565X219/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-基础配置&#34;&gt;2. 基础配置
&lt;/h4&gt;&lt;p&gt;个人编写 &lt;code&gt;hugo.toml&lt;/code&gt; 比较耗费时间，下载的主题文件夹中一般包含网站实例 &lt;code&gt;exampleSite&lt;/code&gt;，可以将里面的 &lt;code&gt;content&lt;/code&gt; 文件夹和 &lt;code&gt;hugo.yaml&lt;/code&gt; 配置文件拷贝到当前目录，并覆盖博客目录相关文件。覆盖目录文件后，可能出现兼容性报错，此时需要删除 &lt;code&gt;Content/post/rich-content&lt;/code&gt;。另外，相关语言配置项根据需要进行合理修改&lt;/p&gt;
&lt;h4 id=&#34;3-创建第一篇文章&#34;&gt;3. 创建第一篇文章
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new posts/hello.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编辑 &lt;code&gt;content/posts/hello-world.md&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date = &amp;#39;2025-06-02T22:12:41+08:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;draft = true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;title = &amp;#39;Hello&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is a test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;三本地预览&#34;&gt;三、本地预览
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -D  &lt;span style=&#34;color:#78787e&#34;&gt;# -D 包含草稿&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 &lt;code&gt;https://localhost:1313&lt;/code&gt; 实时预览&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tc.z.wiki/autoupload/20250602/HNrK/1653X872/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1653X872/image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;四部署到-github-pages&#34;&gt;四、部署到 GitHub Pages
&lt;/h3&gt;&lt;h4 id=&#34;方案一手动部署适合初学者&#34;&gt;方案一：手动部署（适合初学者）
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# 1. 构建静态文件（生成到 public 目录）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo --minify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# 2. 创建 GitHub 仓库：&amp;lt;你的用户名&amp;gt;.github.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# 3. 第一次推送代码之前需要进行如下配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.name &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;你的 GitHub 用户名&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.email &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;你注册 GitHub 的邮箱&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# 4. 将 public 目录推送到仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;cd&lt;/span&gt; public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin git@Github.com:&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git &lt;span style=&#34;color:#ff6ac1&#34;&gt;(&lt;/span&gt;需要设置ssh&lt;span style=&#34;color:#ff6ac1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 或者使用指令 git remote add origin https://github.com/&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Initial deploy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;方案二自动化部署推荐使用-github-actions&#34;&gt;方案二：自动化部署（推荐！使用 GitHub Actions）
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建新仓库&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;创建一个用来储存所有博客文件的新仓库，权限设置为&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;`&lt;/span&gt;private&lt;span style=&#34;color:#ff6ac1&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;前往&lt;/span&gt; Settings&lt;span style=&#34;color:#ff6ac1&#34;&gt;/&lt;/span&gt;Developer Settings&lt;span style=&#34;color:#ff6ac1&#34;&gt;/&lt;/span&gt;Personal access tokens , &lt;span style=&#34;color:#ff5c57&#34;&gt;点击&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;“&lt;/span&gt;Generate new &lt;span style=&#34;color:#57c7ff&#34;&gt;token&lt;/span&gt; (classic)&lt;span style=&#34;color:#ff5c57&#34;&gt;”&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;创建一个&lt;/span&gt; token&lt;span style=&#34;color:#ff5c57&#34;&gt;，并勾选&lt;/span&gt; repo &lt;span style=&#34;color:#ff5c57&#34;&gt;和&lt;/span&gt; workflow &lt;span style=&#34;color:#ff5c57&#34;&gt;选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;复制&lt;/span&gt; token&lt;span style=&#34;color:#ff5c57&#34;&gt;，前往新仓库的&lt;/span&gt; Settings&lt;span style=&#34;color:#ff6ac1&#34;&gt;/&lt;/span&gt;Secrets &lt;span style=&#34;color:#ff6ac1&#34;&gt;and&lt;/span&gt; variables&lt;span style=&#34;color:#ff6ac1&#34;&gt;/&lt;/span&gt;Actions&lt;span style=&#34;color:#ff5c57&#34;&gt;，点击&lt;/span&gt; New repository secret &lt;span style=&#34;color:#ff5c57&#34;&gt;将&lt;/span&gt; token &lt;span style=&#34;color:#ff5c57&#34;&gt;保存在仓库的环境变量中。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;博客项目根目录创建 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;name&lt;/span&gt;: blog deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;push&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;branches&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - main  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;runs-on&lt;/span&gt;: ubuntu-latest	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ff6ac1&#34;&gt;uses&lt;/span&gt;: actions/checkout@v4	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;submodules&lt;/span&gt;: &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ff6ac1&#34;&gt;name&lt;/span&gt;: Setup Hugo	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;uses&lt;/span&gt;: peaceiris/actions-hugo@v3	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;extended&lt;/span&gt;: &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ff6ac1&#34;&gt;name&lt;/span&gt;: Build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;run&lt;/span&gt;: hugo -D
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ff6ac1&#34;&gt;name&lt;/span&gt;: Deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;uses&lt;/span&gt;: peaceiris/actions-gh-pages@v4	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;external_repository&lt;/span&gt;: xxx/xxx.github.io	# 自己的GitHub pages仓库
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;personal_token&lt;/span&gt;: ${{ secrets.你的token变量名 }}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;publish_dir&lt;/span&gt;: ./public	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;publish_branch&lt;/span&gt;: main	
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以在目录创建 &lt;code&gt;.gitignore&lt;/code&gt; 文件，避免提交部分文件，例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;resources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.hugo_build.lock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;推送代码到 GitHub&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Add workflow&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin git@Github.com:&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git &lt;span style=&#34;color:#ff6ac1&#34;&gt;(&lt;/span&gt;需要设置ssh&lt;span style=&#34;color:#ff6ac1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 或者使用指令 git remote add origin https://github.com/&amp;lt;用户名&amp;gt;/&amp;lt;用户名&amp;gt;.github.io.git 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;五访问与优化&#34;&gt;五、访问与优化
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问地址&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;https://&amp;lt;用户名&amp;gt;.github.io&lt;/code&gt; (首次部署需等待 1-2 分钟)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义域名（可选）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在项目根目录添加 &lt;code&gt;static/CNAME&lt;/code&gt; 文件，内容为域名：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;blog.yourdomain.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;DNS 添加 CNAME 记录指向 &lt;code&gt;&amp;lt;用户名&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制 HTTPS&lt;/strong&gt;&lt;br&gt;
在 GitHub Pages 设置中勾选 &lt;strong&gt;Enforce HTTPS&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;六常用命令速查&#34;&gt;六、常用命令速查
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;命令&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;hugo new posts/标题.md&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;新建文章&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;启动本地服务器（含草稿）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;hugo --minify&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;构建优化后的静态文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;git submodule update --remote&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;更新主题&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;七避坑指南&#34;&gt;七、避坑指南
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主题无法加载&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保使用 &lt;code&gt;git submodule&lt;/code&gt; 添加主题&lt;/li&gt;
&lt;li&gt;在 Actions 中启用 &lt;code&gt;submodules: recursive&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建失败&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; 中的 Hugo 版本是否匹配&lt;/li&gt;
&lt;li&gt;确保使用 &lt;code&gt;extended&lt;/code&gt; 版本（如果主题需要 SCSS）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中文乱码&lt;/strong&gt;&lt;br&gt;
在文章 Front Matter 中明确指定编码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;charset&lt;/span&gt;: utf-8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义布局&lt;/strong&gt;&lt;br&gt;
复制主题文件到本地覆盖（避免直接修改主题）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp themes/stack/layouts/_default/single.html layouts/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;效果预览&#34;&gt;效果预览
&lt;/h3&gt;&lt;p&gt;完成部署后，你将获得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⚡ 基于 Hugo 的极速静态博客&lt;/li&gt;
&lt;li&gt;🤖 自动化 Git 工作流（提交即发布）&lt;/li&gt;
&lt;li&gt;📱 响应式主题适配移动端&lt;/li&gt;
&lt;li&gt;🔒 免费 HTTPS 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;立即开始你的博客之旅吧！升级方案可添加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Algolia 搜索（&lt;a class=&#34;link&#34; href=&#34;https://github.com/replicatedhq/hugo-algolia&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo-algolia&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Utterances 评论系统（GitHub Issue 驱动）&lt;/li&gt;
&lt;li&gt;流量统计（Google Analytics/Umami）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>博客框架 Hugo，Hexo，Jekyll 三者的区别和对比</title>
        <link>https://muo123.github.io/articles/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6-hugohexojekyll-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%AF%B9%E6%AF%94/</link>
        <pubDate>Mon, 02 Jun 2025 23:23:47 +0800</pubDate>
        
        <guid>https://muo123.github.io/articles/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6-hugohexojekyll-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%AF%B9%E6%AF%94/</guid>
        <description>&lt;img src="https://tc.z.wiki/autoupload/20250603/5th1/848X557/image.png" alt="Featured image of post 博客框架 Hugo，Hexo，Jekyll 三者的区别和对比" /&gt;&lt;p&gt;以下是 Hugo、Hexo 和 Jekyll 三大主流静态博客框架的详细对比，从核心特性到适用场景的全方位分析，帮助你快速选择最适合的工具：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;核心区别对比表&#34;&gt;&lt;strong&gt;核心区别对比表&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Hexo&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;开发语言&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Go（单二进制文件）&lt;/td&gt;
          &lt;td&gt;Node.js&lt;/td&gt;
          &lt;td&gt;Ruby&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;构建速度&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;⚡ &lt;strong&gt;极快&lt;/strong&gt;（千页秒级）&lt;/td&gt;
          &lt;td&gt;🚀 快（依赖插件复杂度）&lt;/td&gt;
          &lt;td&gt;⏳ 较慢（大型项目可能需分钟级）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;GitHub Pages 支持&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;❌ 需本地构建后推送产物&lt;/td&gt;
          &lt;td&gt;❌ 需本地构建后推送产物&lt;/td&gt;
          &lt;td&gt;✅ &lt;strong&gt;原生支持&lt;/strong&gt;（自动构建）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;安装复杂度&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;★☆☆（无需环境，下载即用）&lt;/td&gt;
          &lt;td&gt;★★☆（需 Node.js 环境）&lt;/td&gt;
          &lt;td&gt;★★★（需 Ruby 环境及 Bundler）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;主题生态&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;丰富（&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Themes&lt;/a&gt;）&lt;/td&gt;
          &lt;td&gt;极丰富（&lt;a class=&#34;link&#34; href=&#34;https://hexo.io/themes/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hexo Themes&lt;/a&gt;）&lt;/td&gt;
          &lt;td&gt;成熟（&lt;a class=&#34;link&#34; href=&#34;https://jekyllthemes.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll Themes&lt;/a&gt;）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;插件扩展性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;中等（内置短代码/部分插件）&lt;/td&gt;
          &lt;td&gt;✅ &lt;strong&gt;极强&lt;/strong&gt;（600+ 插件）&lt;/td&gt;
          &lt;td&gt;良好（Gem 插件）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;模板引擎&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Go Templates（学习曲线陡）&lt;/td&gt;
          &lt;td&gt;EJS/Swig/Pug（灵活）&lt;/td&gt;
          &lt;td&gt;Liquid（易上手）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;内容管理&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;灵活（支持自定义内容类型）&lt;/td&gt;
          &lt;td&gt;标准 Markdown + Front Matter&lt;/td&gt;
          &lt;td&gt;标准 Markdown + Front Matter&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;适用人群&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;大型站点/效率优先者&lt;/td&gt;
          &lt;td&gt;前端开发者/插件爱好者&lt;/td&gt;
          &lt;td&gt;GitHub 新手/讨厌本地构建者&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;深度解析三大框架&#34;&gt;&lt;strong&gt;深度解析三大框架&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-hugo速度至上的极简主义&#34;&gt;1. &lt;strong&gt;Hugo：速度至上的极简主义&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无需依赖环境&lt;/strong&gt;：单文件执行，解压即用，跨平台无兼容问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;极致构建速度&lt;/strong&gt;：千篇文章构建仅需 2-5 秒，适合频繁更新的大型博客。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强类型内容模型&lt;/strong&gt;：可自定义内容结构（如技术文档、作品集）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Go Templates 语法较复杂（例如条件判断需写 &lt;code&gt;{{ if eq .A .B }}&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;插件生态弱于 Hexo，高级功能需手动开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型用户&lt;/strong&gt;：技术博主、文档站点维护者、讨厌等待构建的人。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-hexo前端开发者的瑞士军刀&#34;&gt;2. &lt;strong&gt;Hexo：前端开发者的瑞士军刀&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;插件驱动&lt;/strong&gt;：支持图床优化（&lt;code&gt;hexo-asset-image&lt;/code&gt;）、SEO 增强（&lt;code&gt;hexo-seo&lt;/code&gt;）等深度定制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术栈亲和&lt;/strong&gt;：基于 Node.js，前端开发者可无缝接入 Webpack/Babel 等工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主题高度自由&lt;/strong&gt;：可修改主题源码，自由度远超 Hugo/Jekyll 的主题配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;插件过多可能导致构建缓慢（需谨慎选择插件）。&lt;/li&gt;
&lt;li&gt;需熟悉 Node.js 开发环境（版本兼容问题常见）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型用户&lt;/strong&gt;：前端工程师、需要深度定制的技术博主。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-jekyllgithub-亲儿子的零配置方案&#34;&gt;3. &lt;strong&gt;Jekyll：GitHub 亲儿子的零配置方案&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无缝 GitHub 集成&lt;/strong&gt;：推送 Markdown 即自动发布，无需本地构建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低学习曲线&lt;/strong&gt;：Liquid 模板类似自然语言（例：&lt;code&gt;{% if page.title %}&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;官方维护保障&lt;/strong&gt;：GitHub 官方支持，兼容性无忧。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 环境在 Windows 易出错（需 RubyInstaller + DevKit）。&lt;/li&gt;
&lt;li&gt;百篇文章以上构建显著变慢（&amp;gt;30秒）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型用户&lt;/strong&gt;：写作优先的博主、非技术背景用户、小型项目快速上线。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;关键决策场景&#34;&gt;&lt;strong&gt;关键决策场景&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;你的需求&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;推荐框架&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;原因&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;纯写作/讨厌命令行&lt;/td&gt;
          &lt;td&gt;Jekyll&lt;/td&gt;
          &lt;td&gt;推送 Markdown 即发布，无需构建&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;博客规模大（&amp;gt;500篇文章）&lt;/td&gt;
          &lt;td&gt;Hugo&lt;/td&gt;
          &lt;td&gt;构建速度碾压对手，节省生命&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;前端开发者/爱折腾插件&lt;/td&gt;
          &lt;td&gt;Hexo&lt;/td&gt;
          &lt;td&gt;用 Node.js 生态定制功能（如 PWA 支持）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;需托管 GitHub 且追求稳定&lt;/td&gt;
          &lt;td&gt;Jekyll&lt;/td&gt;
          &lt;td&gt;官方支持，无构建失败风险&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;多语言站点（i18n）&lt;/td&gt;
          &lt;td&gt;Hugo&lt;/td&gt;
          &lt;td&gt;内置多语言支持，配置简单&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;终极选择建议&#34;&gt;&lt;strong&gt;终极选择建议&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选 Hugo 如果&lt;/strong&gt;：你追求效率至上，内容量巨大，或抗拒环境配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选 Hexo 如果&lt;/strong&gt;：你是前端开发者，需要插件拓展功能（如 Algolia 搜索）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选 Jekyll 如果&lt;/strong&gt;：你希望完全依赖 GitHub 自动化，专注写作而非技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;部署提示&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hugo/Hexo 可用 GitHub Actions 自动化构建（&lt;a class=&#34;link&#34; href=&#34;https://github.com/peaceiris/actions-hugo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;示例脚本&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;避免将 &lt;code&gt;node_modules&lt;/code&gt;/&lt;code&gt;public&lt;/code&gt; 推送到 Git 仓库（用 &lt;code&gt;.gitignore&lt;/code&gt; 过滤）。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Github Pages 搭建个人博客可供选择的框架有哪些</title>
        <link>https://muo123.github.io/articles/github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%AF%E4%BE%9B%E9%80%89%E6%8B%A9%E7%9A%84%E6%A1%86%E6%9E%B6%E6%9C%89%E5%93%AA%E4%BA%9B/</link>
        <pubDate>Mon, 02 Jun 2025 22:52:19 +0800</pubDate>
        
        <guid>https://muo123.github.io/articles/github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%AF%E4%BE%9B%E9%80%89%E6%8B%A9%E7%9A%84%E6%A1%86%E6%9E%B6%E6%9C%89%E5%93%AA%E4%BA%9B/</guid>
        <description>&lt;img src="https://tc.z.wiki/autoupload/20250603/sjGQ/1085X637/image.png" alt="Featured image of post Github Pages 搭建个人博客可供选择的框架有哪些" /&gt;&lt;p&gt;在 GitHub Pages 上搭建个人博客是极佳的选择（免费、稳定、易用），而选择合适的静态网站生成框架至关重要。以下是主流且与 GitHub Pages 配合良好的框架，以及它们之间的核心区别：&lt;/p&gt;
&lt;h2 id=&#34;-主流框架推荐&#34;&gt;🎈 主流框架推荐
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方支持：&lt;/strong&gt; GitHub Pages &lt;strong&gt;原生支持&lt;/strong&gt; Jekyll。这意味着你只需将 Jekyll 源文件推送到仓库，GitHub 会自动为你构建网站。无需本地构建或上传 &lt;code&gt;_site&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言：&lt;/strong&gt; Ruby&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单易上手：&lt;/strong&gt; 主题、插件丰富，文档完善，社区庞大，非常适合初学者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;约定优于配置：&lt;/strong&gt; 遵循特定目录结构，很多功能开箱即用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liquid 模板引擎：&lt;/strong&gt; 灵活但学习曲线相对平缓。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown 支持：&lt;/strong&gt; 内置支持，方便写作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt; 与 GitHub Pages 集成最无缝，部署最省心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势：&lt;/strong&gt; 构建速度在大型站点上相对较慢；需要 Ruby 环境进行本地开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方支持：&lt;/strong&gt; GitHub Pages &lt;strong&gt;不原生支持&lt;/strong&gt; Hugo。你需要&lt;strong&gt;在本地构建&lt;/strong&gt;网站（生成 &lt;code&gt;public&lt;/code&gt; 目录），然后将这个 &lt;code&gt;public&lt;/code&gt; 目录的内容推送到 GitHub 仓库（通常是 &lt;code&gt;gh-pages&lt;/code&gt; 分支或特定分支/docs 目录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言：&lt;/strong&gt; Go (编译成单个二进制文件)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;极速构建：&lt;/strong&gt; 最大的优势！构建成千上万页面也只需几秒到十几秒。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单二进制文件：&lt;/strong&gt; 安装部署极其简单，无需复杂的语言环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大灵活：&lt;/strong&gt; 内容组织方式灵活，模板功能强大（Go Templates）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主题丰富：&lt;/strong&gt; 拥有非常庞大且活跃的主题生态系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt; 无与伦比的构建速度，本地开发体验极佳，部署简单（虽然需要本地构建）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势：&lt;/strong&gt; Go Templates 学习曲线可能比 Liquid 稍陡；需要手动构建后部署到 GitHub Pages。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hexo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方支持：&lt;/strong&gt; GitHub Pages &lt;strong&gt;不原生支持&lt;/strong&gt; Hexo。需要&lt;strong&gt;本地构建&lt;/strong&gt;（生成 &lt;code&gt;public&lt;/code&gt; 目录），然后推送 &lt;code&gt;public&lt;/code&gt; 目录内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言：&lt;/strong&gt; Node.js&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速高效：&lt;/strong&gt; 构建速度较快（虽然通常不及 Hugo）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件驱动：&lt;/strong&gt; 拥有海量的插件，功能扩展性极强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主题丰富：&lt;/strong&gt; 主题数量众多，风格多样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向博客优化：&lt;/strong&gt; 对博客所需的标签、分类、归档等支持良好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt; 基于 Node.js，对前端开发者友好；插件生态强大，可定制性高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势：&lt;/strong&gt; 需要 Node.js 环境；配置可能相对复杂一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VuePress / VitePress&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方支持：&lt;/strong&gt; GitHub Pages &lt;strong&gt;不原生支持&lt;/strong&gt;。需要&lt;strong&gt;本地构建&lt;/strong&gt;，推送构建产物（通常是 &lt;code&gt;.vuepress/dist&lt;/code&gt; 或 &lt;code&gt;.vitepress/dist&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言：&lt;/strong&gt; Node.js (基于 Vue.js)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术栈驱动：&lt;/strong&gt; 专为技术文档设计，但对博客也非常适合，尤其适合熟悉 Vue.js 的开发者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown 扩展强大：&lt;/strong&gt; 可以在 Markdown 中直接使用 Vue 组件，实现高度交互性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认主题优秀：&lt;/strong&gt; 官方默认主题简洁美观，功能实用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发体验好：&lt;/strong&gt; 基于 Vite，启动和热更新速度极快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt; 技术文档和博客的完美结合；利用 Vue 组件系统实现高度定制；优秀的开发体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势：&lt;/strong&gt; 对不熟悉 Vue 的开发者有一定门槛；主题和插件生态相对 Jekyll/Hugo/Hexo 规模小些（但增长快）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eleventy (11ty)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方支持：&lt;/strong&gt; GitHub Pages &lt;strong&gt;不原生支持&lt;/strong&gt;。需要&lt;strong&gt;本地构建&lt;/strong&gt;，推送构建产物（可配置）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言：&lt;/strong&gt; Node.js&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;极度灵活与简单：&lt;/strong&gt; 零配置默认值，但可深度定制。支持多种模板语言（Liquid, Nunjucks, Handlebars, Markdown, HTML 等），你可以混用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量级：&lt;/strong&gt; 框架本身非常精简，概念少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能：&lt;/strong&gt; 构建速度很快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“无框架”框架：&lt;/strong&gt; 更倾向于提供核心的静态生成能力，不强制特定的项目结构或数据模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt; 极高的灵活性和自由度；学习曲线相对平缓（尤其如果你熟悉其中一种模板语言）；性能优异。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势：&lt;/strong&gt; 需要自己搭建更多东西（相比开箱即用的框架）；主题生态不如前几个成熟；需要 Node.js 环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Astro&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方支持：&lt;/strong&gt; GitHub Pages &lt;strong&gt;不原生支持&lt;/strong&gt;。需要&lt;strong&gt;本地构建&lt;/strong&gt;，推送构建产物（&lt;code&gt;dist&lt;/code&gt; 目录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言：&lt;/strong&gt; Node.js (但组件理念独特)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;岛屿架构：&lt;/strong&gt; 核心理念！默认输出纯静态 HTML/CSS，但可以按需“激活”页面上的交互式组件（称为“岛屿”），大幅减少不必要的 JS。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;框架无关：&lt;/strong&gt; 可以在 &lt;code&gt;.astro&lt;/code&gt; 组件中无缝使用 React, Vue, Svelte, Solid 等 UI 框架的组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能：&lt;/strong&gt; 非常注重输出站点的性能（速度、SEO）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内容优先：&lt;/strong&gt; 对 Markdown/MDX 支持优秀，内置内容集合功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势：&lt;/strong&gt; 构建现代、高性能网站的最佳选择之一；独特的架构带来极佳的用户体验；强大的内容管理能力；灵活的组件系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势：&lt;/strong&gt; 概念较新，学习曲线相对陡峭；需要 Node.js 环境；生态还在快速发展中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;-核心区别对比表&#34;&gt;🔍 核心区别对比表
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;特性&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Jekyll&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Hugo&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Hexo&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;VuePress/VitePress&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Eleventy (11ty)&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Astro&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;原生 GitHub Pages 支持&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;✅ &lt;strong&gt;是&lt;/strong&gt; (自动构建)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;❌ 否 (需本地构建)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;❌ 否 (需本地构建)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;❌ 否 (需本地构建)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;❌ 否 (需本地构建)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;❌ 否 (需本地构建)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;开发语言&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ruby&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Go (单二进制)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Node.js&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Node.js (Vue)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Node.js&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Node.js&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;最大优势&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;与 GitHub Pages 集成&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;极速构建&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;插件生态强大&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Markdown+Vue组件&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;灵活简单&lt;/strong&gt;，多模板&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;岛屿架构&lt;/strong&gt;，高性能&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;构建速度&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;较慢 (大型站点)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⚡ &lt;strong&gt;极快&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;快&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;快 (VitePress 更快)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;快&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;快&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;学习曲线&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;平缓&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;中等 (Go模板)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;中等&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;中等 (需Vue基础)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;平缓 (熟悉模板即可)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;较陡 (新概念)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;主题生态&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;非常丰富&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;非常丰富&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;非常丰富&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;良好 (官方主题优秀)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;增长中&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;增长迅速&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;插件/扩展性&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;良好&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;良好 (短代码等)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;✅ &lt;strong&gt;极好&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;良好&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;良好 (通过配置/JS)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;良好 (集成框架能力强)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;灵活性/自由度&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;中等&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;高&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;高&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;高 (Vue组件)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;✅ &lt;strong&gt;极高&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;最适合人群&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;新手/GitHub集成优先&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;讨厌等待/大型站点&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;前端开发者/插件爱好者&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Vue开发者/技术文档&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;追求简洁自由/多语言者&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;性能控/现代框架使用者&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;-选择建议&#34;&gt;📌 选择建议
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追求最简单部署，不想本地构建：选 &lt;code&gt;Jekyll&lt;/code&gt;。&lt;/strong&gt; GitHub 替你搞定一切，专注于写作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;博客规模大或无法忍受慢速构建：选 &lt;code&gt;Hugo&lt;/code&gt;。&lt;/strong&gt; 速度是王道，部署步骤也简单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端开发者，喜欢丰富的插件和主题：选 &lt;code&gt;Hexo&lt;/code&gt;。&lt;/strong&gt; Node.js 环境很熟悉，扩展性强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熟悉 Vue.js 或需要强交互/技术文档：选 &lt;code&gt;VuePress&lt;/code&gt; / &lt;code&gt;VitePress&lt;/code&gt;。&lt;/strong&gt; Markdown + Vue 的组合非常强大，开发体验好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;喜欢简洁、灵活、自由度高，不依赖特定框架：选 &lt;code&gt;Eleventy&lt;/code&gt;。&lt;/strong&gt; 用你喜欢的模板语言，按你的方式组织。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建高性能、现代化网站，想用不同框架组件：选 &lt;code&gt;Astro&lt;/code&gt;。&lt;/strong&gt; 岛屿架构带来卓越性能，未来感十足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-重要提示&#34;&gt;💡 重要提示
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;部署方式：&lt;/strong&gt; 只有 Jekyll 享受 GitHub Pages 的原生构建支持。对于其他框架，你&lt;strong&gt;必须&lt;/strong&gt;在本地或通过 GitHub Actions 等 CI/CD 工具完成构建，然后将生成的静态文件（通常是 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;dist&lt;/code&gt;, &lt;code&gt;_site&lt;/code&gt;, &lt;code&gt;docs&lt;/code&gt; 等目录）推送到仓库的特定分支（如 &lt;code&gt;gh-pages&lt;/code&gt;）或主分支的特定目录（如 &lt;code&gt;/docs&lt;/code&gt;），并在仓库设置中指定源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Actions：&lt;/strong&gt; 对于非 Jekyll 框架，强烈推荐使用 GitHub Actions 自动化构建和部署过程。这样你只需推送源代码，Actions 会自动执行构建并将生成的静态文件部署到 GitHub Pages。官方或社区通常提供现成的 Action 工作流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑熟悉度：&lt;/strong&gt; 选择你或你的团队最熟悉的语言和技术的框架，会大大降低学习成本和开发效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需求驱动：&lt;/strong&gt; 明确你的博客需求（纯写作？需要复杂功能？需要极致性能？需要特定技术栈集成？），再根据需求选择最匹配的框架。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;-总结&#34;&gt;🎯 总结
&lt;/h2&gt;&lt;p&gt;GitHub Pages 为静态博客提供了优秀的托管平台。Jekyll 凭借其原生集成是&lt;strong&gt;最省心&lt;/strong&gt;的选择。Hugo 凭借&lt;strong&gt;无与伦比的构建速度&lt;/strong&gt;是大型站点或追求效率者的首选。Hexo 以其强大的&lt;strong&gt;插件生态&lt;/strong&gt;吸引 Node.js 开发者。VuePress/VitePress 是 &lt;strong&gt;Vue 技术栈和文档需求&lt;/strong&gt;的绝配。Eleventy 提供了&lt;strong&gt;最大的灵活性&lt;/strong&gt;和简洁性。Astro 则代表了&lt;strong&gt;现代高性能 Web 开发&lt;/strong&gt;的方向。&lt;/p&gt;
&lt;p&gt;根据你的具体需求、技术偏好和对部署流程的接受程度，仔细权衡以上框架的特点，就能找到最适合你在 GitHub Pages 上搭建个人博客的工具！开始构建你的博客之旅吧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://muo123.github.io/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0800</pubDate>
        
        <guid>https://muo123.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>About</title>
        <link>https://muo123.github.io/about/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0800</pubDate>
        
        <guid>https://muo123.github.io/about/</guid>
        <description>&lt;p&gt;Written in Go, Hugo is an open source static site generator available under the &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/blob/master/LICENSE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apache License 2.0.&lt;/a&gt; Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.&lt;/p&gt;
&lt;p&gt;Hugo makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/yuin/goldmark&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/yuin/goldmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/alecthomas/chroma&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/muesli/smartcrop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/cobra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/viper&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.&lt;/p&gt;
&lt;p&gt;Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.&lt;/p&gt;
&lt;p&gt;Websites built with Hugo are extremely fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.&lt;/p&gt;
&lt;p&gt;Learn more and contribute on &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Links</title>
        <link>https://muo123.github.io/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://muo123.github.io/links/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;links&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ff6ac1&#34;&gt;title&lt;/span&gt;: GitHub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;description&lt;/span&gt;: GitHub is the world&amp;#39;s largest software development platform.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;website&lt;/span&gt;: https://github.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;image&lt;/span&gt;: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ff6ac1&#34;&gt;title&lt;/span&gt;: TypeScript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;description&lt;/span&gt;: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;website&lt;/span&gt;: https://www.typescriptlang.org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;image&lt;/span&gt;: ts-logo-128.jpg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Search</title>
        <link>https://muo123.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://muo123.github.io/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
